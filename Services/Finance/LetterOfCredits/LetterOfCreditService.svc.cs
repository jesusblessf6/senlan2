using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Objects;
using System.Data.SqlClient;
using System.Linq;
using System.ServiceModel;
using System.Transactions;
using DBEntity;
using Services.Base;
using Utility.ErrorManagement;
using Services.Physical.Contracts;
using Services.Physical.Payments;
using DBEntity.EnableProperty;
using DBEntity.EnumEntity;
using Services.Helper.QuotaHelper;

namespace Services.Finance.LetterOfCredits
{
    // 注意: 使用“重构”菜单上的“重命名”命令，可以同时更改代码、svc 和配置文件中的类名“LetterOfCreditService”。
    public class LetterOfCreditService : BaseService<LetterOfCredit>, ILetterOfCreditService
    {
        #region ILetterOfCreditService Members

        /// <summary>
        /// 删除功能
        /// </summary>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        public override void RemoveById(int id, int userId)
        {
            using (var ts = new TransactionScope())
            {
                try
                {
                    #region 注释掉原来的代码
                    //PaymentRequest paymentRequest;
                    //int quotaId = 0;
                    //using (var ctx = new SenLan2Entities(userId))
                    //{
                    //    //查找关联单据
                    //    LetterOfCredit lc = QueryForObj(GetObjQuery<LetterOfCredit>(ctx).Include("PaymentRequest"), l => l.Id == id);

                    //    //信用证与商业发票关联
                    //    List<LCCIRel> rels = QueryForObjs(GetObjQuery<LCCIRel>(ctx), o => o.LCId == id).ToList();
                    //    if (rels != null && rels.Count > 0)
                    //    {
                    //        throw new FaultException(ErrCode.LCCommercialInvoiceConnected.ToString());
                    //    }

                    //    if (lc.LCCIRels != null)
                    //    if (lc.QuotaId.HasValue)
                    //        quotaId = lc.QuotaId.Value;
                    //    lc.IsDeleted = true;

                    //    //删除提单上的信用证Id
                    //    List<Delivery> deliveries = QueryForObjs(GetObjQuery<Delivery>(ctx), o => o.QuotaId == quotaId).ToList();
                    //    foreach (var delivery in deliveries)
                    //    {
                    //        delivery.LCId = null;
                    //    }

                    //    ctx.SaveChanges();
                    //    paymentRequest = lc.PaymentRequest;
                    //}
                    ////修改批次的已收已付金额
                    //var quotaService = new QuotaService();
                    //quotaService.SetPaidAndReceivedAmount(quotaId, userId);

                    ////更改付款申请工作台完成状态
                    //if (paymentRequest != null && paymentRequest.IsPaid)
                    //{
                    //    paymentRequest.IsPaid = false;
                    //    var paymentRequestService = new PaymentRequestService();
                    //    paymentRequestService.UpdatePaymentRequestIsPaid(paymentRequest, userId);
                    //}
                    #endregion

                    #region 如果有自动生存的 同时删除
                    using (var ctx = new SenLan2Entities(userId))
                    {
                        LetterOfCredit autoLC = QueryForObj(GetObjQuery<LetterOfCredit>(ctx), c => c.RelLCId == id && c.IsAutoGenerated);
                        if(autoLC != null)
                        {
                            DeleteLC(autoLC.Id,userId);
                        }
                    }
                    #endregion
                    DeleteLC(id, userId);

                    ts.Complete();
                }
                catch (OptimisticConcurrencyException)
                {
                    throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
                }
                finally
                {
                    ts.Dispose();
                }
            }
        }

        private void DeleteLC(int id , int userId)
        {
            try
            {
                PaymentRequest paymentRequest;
                int quotaId = 0;
                using (var ctx = new SenLan2Entities(userId))
                {
                    //查找关联单据
                    LetterOfCredit lc = QueryForObj(GetObjQuery<LetterOfCredit>(ctx).Include("PaymentRequest").Include("Quota"), l => l.Id == id);

                    //信用证与商业发票关联
                    List<LCCIRel> rels = QueryForObjs(GetObjQuery<LCCIRel>(ctx), o => o.LCId == id).ToList();
                    if (rels.Count > 0)
                    {
                        throw new FaultException(ErrCode.LCCommercialInvoiceConnected.ToString());
                    }

                    if (lc.LCCIRels != null)
                        if (lc.QuotaId.HasValue)
                            quotaId = lc.QuotaId.Value;
                    lc.IsDeleted = true;

                    //删除提单上的信用证Id
                    List<Delivery> deliveries = QueryForObjs(GetObjQuery<Delivery>(ctx), o => o.QuotaId == quotaId).ToList();
                    foreach (var delivery in deliveries)
                    {
                        delivery.LCId = null;
                    }
                    if(lc.Quota != null)
                    {
                        lc.Quota.IsFundflowFinished = false;
                    }

                    ctx.SaveChanges();
                    paymentRequest = lc.PaymentRequest;
                }
                //修改批次的已收已付金额
                var quotaService = new QuotaService();
                quotaService.SetPaidAndReceivedAmount(quotaId, userId);

                //更改付款申请工作台完成状态
                if (paymentRequest != null && paymentRequest.IsPaid)
                {
                    paymentRequest.IsPaid = false;
                    var paymentRequestService = new PaymentRequestService();
                    paymentRequestService.UpdatePaymentRequestIsPaid(paymentRequest, userId);
                }
            }
            catch (OptimisticConcurrencyException)
            {
                throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
            }
        }

        /// <summary>
        /// 新增信用证
        /// </summary>
        /// <param name="lc"></param>
        /// <param name="userId"></param>
        /// <param name="deliveries"> </param>
        /// <param name="addedAttachments"> </param>
        public void CreateNewLetterOfCredit(LetterOfCredit lc, int userId, List<Delivery> deliveries,
                                            List<Attachment> addedAttachments, bool isFundflowFinished)
        {
            using (var ts = new TransactionScope())
            {
                try
                {
                    #region 注释掉的 原来的方法
                    ////创建证
                    //using (var ctx = new SenLan2Entities(userId))
                    //{
                    //    ObjectSet<LetterOfCredit> os = GetObjSet<LetterOfCredit>(ctx);
                    //    Create(os, lc);
                    //    ctx.SaveChanges();
                    //}
                    ////关联提单
                    //using (var ctx = new SenLan2Entities(userId))
                    //{
                    //    LetterOfCredit letterOfCredit =
                    //        QueryForObjs(GetObjQuery<LetterOfCredit>(ctx), o => o.Id == lc.Id).FirstOrDefault();
                    //    foreach (Delivery item in deliveries)
                    //    {
                    //        if (letterOfCredit != null && letterOfCredit.Id > 0)
                    //        {
                    //            int id = item.Id;
                    //            Delivery oldLine = QueryForObj(GetObjQuery<Delivery>(ctx), o => o.Id == id);
                    //            oldLine.LCId = letterOfCredit.Id;
                    //            Update(GetObjSet<Delivery>(ctx), oldLine);
                    //        }
                    //    }
                    //    ctx.SaveChanges();
                    //}
                    ////附件
                    //if (addedAttachments != null)
                    //{
                    //    //有附件
                    //    foreach (Attachment attachment in addedAttachments)
                    //    {
                    //        CreateAttachment(lc.Id, attachment, userId);
                    //    }
                    //}
                    ////修改批次的已收已付金额
                    //var quotaService = new QuotaService();
                    //quotaService.SetPaidAndReceivedAmount(lc.QuotaId, userId);
                    #endregion

                    CreateDocument(lc, userId, deliveries, addedAttachments, isFundflowFinished);

                    if(IsInternalCustomer(lc.ApplicantId, lc.BeneficiaryId,userId))
                    {
                        int quotaId = QuotaHelper.GetAutoGeneratedQuotaId(lc.QuotaId ?? 0);
                        if (quotaId > 0)
                        {
                            var autoLC = new LetterOfCredit();
                            autoLC.QuotaId = quotaId;

                            if (lc.PorS == (int)LCPorS.LCPurchase)
                            {
                                autoLC.PorS = (int)LCPorS.LCSales;
                            }
                            else
                            {
                                autoLC.PorS = (int)LCPorS.LCPurchase;
                            }
                            autoLC.ApplicantId = lc.BeneficiaryId;
                            autoLC.BeneficiaryId = lc.ApplicantId;
                            autoLC.IssueAmount = lc.IssueAmount;
                            autoLC.LCNo = lc.LCNo;
                            autoLC.LCType = lc.LCType;
                            autoLC.LCStatus = lc.LCStatus;
                            autoLC.CurrencyId = lc.CurrencyId;
                            autoLC.LCDays = lc.LCDays;
                            autoLC.PromptBasis = lc.PromptBasis;
                            autoLC.AdvisingBankId = lc.AdvisingBankId;
                            autoLC.IssueBankId = lc.IssueBankId;
                            autoLC.IssueDate = lc.IssueDate;
                            autoLC.IssueQuantity = lc.IssueQuantity;
                            autoLC.AcceptanceExpiryDate = lc.AcceptanceExpiryDate;
                            autoLC.LCExpiryDate = lc.LCExpiryDate;
                            autoLC.LatestShippmentDate = lc.LatestShippmentDate;
                            autoLC.ActualAcceptanceDate = lc.ActualAcceptanceDate;
                            autoLC.PresentAmount = lc.PresentAmount;
                            autoLC.PresentDate = lc.PresentDate;
                            autoLC.Comment = lc.Comment;
                            autoLC.IBORType = lc.IBORType;
                            autoLC.FinancialStatus = lc.FinancialStatus;
                            autoLC.IBORValue = lc.IBORValue;
                            autoLC.Float = lc.Float;
                            autoLC.Interest = lc.Interest;
                            //不需要关联到一个付款申请
                            //autoLC.PaymentRequestId = lc.PaymentRequestId;
                            autoLC.RelLCId = lc.Id;
                            autoLC.IsAutoGenerated = true;
                            CreateDocument(autoLC, userId, null, null, isFundflowFinished);

                            lc.RelLCId = autoLC.Id;
                            lc.IsAutoGenerated = false;
                            UpdateDocument(lc, userId, deliveries, null, null, isFundflowFinished);//信用证有自动生成单据 更新主数据的关联单据ID字段 不需要把附件带过去更新
                        }
                    }
                    ts.Complete();
                }
                catch (OptimisticConcurrencyException)
                {
                    throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
                }
                catch (Exception ex)
                {
                    if (ex.InnerException is SqlException && ((SqlException)ex.InnerException).Number == 8152)
                    {
                        throw new FaultException(ErrCode.StringOverflow.ToString());
                    }

                    throw;
                }
                finally
                {
                    ts.Dispose();
                }
            }
        }

        private void CreateDocument(LetterOfCredit lc, int userId, List<Delivery> deliveries,
                                            IEnumerable<Attachment> addedAttachments, bool isFundflowFinished)
        {
            try
            {
                //创建证
                using (var ctx = new SenLan2Entities(userId))
                {
                    Quota quota = QueryForObj(GetObjQuery<Quota>(ctx), c => c.Id == lc.QuotaId);
                    if(quota != null && quota.Id > 0)
                    {
                        quota.IsFundflowFinished = isFundflowFinished;
                        Update(GetObjSet<Quota>(ctx), quota);
                    }
                    ObjectSet<LetterOfCredit> os = GetObjSet<LetterOfCredit>(ctx);
                    Create(os, lc);
                    ctx.SaveChanges();
                }
                //关联提单
                using (var ctx = new SenLan2Entities(userId))
                {
                    if (deliveries != null && deliveries.Count > 0)
                    {
                        LetterOfCredit letterOfCredit =
                            QueryForObjs(GetObjQuery<LetterOfCredit>(ctx), o => o.Id == lc.Id).FirstOrDefault();
                        foreach (Delivery item in deliveries)
                        {
                            if (letterOfCredit != null && letterOfCredit.Id > 0)
                            {
                                int id = item.Id;
                                Delivery oldLine = QueryForObj(GetObjQuery<Delivery>(ctx), o => o.Id == id);
                                oldLine.LCId = letterOfCredit.Id;
                                Update(GetObjSet<Delivery>(ctx), oldLine);
                            }
                        }
                    }
                    ctx.SaveChanges();
                }
                //附件
                if (addedAttachments != null)
                {
                    //有附件
                    foreach (Attachment attachment in addedAttachments)
                    {
                        CreateAttachment(lc.Id, attachment, userId);
                    }
                }
                //修改批次的已收已付金额
                var quotaService = new QuotaService();
                quotaService.SetPaidAndReceivedAmount(lc.QuotaId, userId);
            }
            catch (OptimisticConcurrencyException)
            {
                throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
            }
        }

        /// <summary>
        /// 修改信用证
        /// </summary>
        /// <param name="lc"></param>
        /// <param name="userId"></param>
        /// <param name="deliveries"> </param>
        /// <param name="addedAttachments"> </param>
        /// <param name="deletedAttachments"> </param>
        public void UpdateExistedLetterOfCredit(LetterOfCredit lc, int userId, List<Delivery> deliveries,
                                                List<Attachment> addedAttachments,
                                                List<Attachment> deletedAttachments, bool isFundflowFinished)
        {
            using (var ts = new TransactionScope())
            {
                try
                {
                    #region 注释掉原来的代码
                    //int oldQuotaId = 0;
                    //using (var ctx = new SenLan2Entities(userId))
                    //{
                        
                    //    var oldLC = QueryForObj(GetObjQuery<LetterOfCredit>(ctx), o => o.Id == lc.Id);
                    //    if (oldLC.QuotaId.HasValue)
                    //        oldQuotaId = oldLC.QuotaId.Value;
                    //    //修改信用证
                    //    oldLC.AcceptanceExpiryDate = lc.AcceptanceExpiryDate;
                    //    oldLC.ActualAcceptanceDate = lc.ActualAcceptanceDate;
                    //    oldLC.AdvisingBankId = lc.AdvisingBankId;
                    //    oldLC.ApplicantId = lc.ApplicantId;
                    //    oldLC.BeneficiaryId = lc.BeneficiaryId;
                    //    oldLC.Comment = lc.Comment;
                    //    oldLC.CurrencyId = lc.CurrencyId;
                    //    oldLC.DiscountInterest = lc.DiscountInterest;
                    //    oldLC.DiscountRate = lc.DiscountRate;
                    //    oldLC.Float = lc.Float;
                    //    oldLC.IBORType = lc.IBORType;
                    //    oldLC.IBORValue = lc.IBORValue;
                    //    oldLC.Interest = lc.Interest;
                    //    oldLC.IssueAmount = lc.IssueAmount;
                    //    oldLC.IssueBankId = lc.IssueBankId;
                    //    oldLC.IssueDate = lc.IssueDate;
                    //    oldLC.IssueQuantity = lc.IssueQuantity;
                    //    oldLC.LatestShippmentDate = lc.LatestShippmentDate;
                    //    oldLC.LCDays = lc.LCDays;
                    //    oldLC.LCExpiryDate = lc.LCExpiryDate;
                    //    oldLC.LCNo = lc.LCNo;
                    //    oldLC.LCStatus = lc.LCStatus;
                    //    oldLC.LCType = lc.LCType;
                    //    oldLC.PaymentRequestId = lc.PaymentRequestId;
                    //    oldLC.PorS = lc.PorS;
                    //    oldLC.PresentAmount = lc.PresentAmount;
                    //    oldLC.PresentDate = lc.PresentDate;
                    //    oldLC.PromptBasis = lc.PromptBasis;
                    //    oldLC.QuotaId = lc.QuotaId;
                    //    oldLC.FinancialStatus = lc.FinancialStatus;
                        
                    //    ObjectSet<LetterOfCredit> os = GetObjSet<LetterOfCredit>(ctx);
                    //    Update(os, oldLC);
                    //    //解除原有关系
                    //    List<Delivery> ds =
                    //        QueryForObjs(GetObjQuery<Delivery>(ctx), o => o.LCId == lc.Id).ToList();
                    //    foreach (Delivery item in ds)
                    //    {
                    //        int dlvId = item.Id;
                    //        Delivery dlv =
                    //            QueryForObjs(GetObjQuery<Delivery>(ctx), o => o.Id == dlvId).FirstOrDefault();
                    //        if (dlv != null)
                    //        {
                    //            dlv.LCId = null;
                    //            Update(GetObjSet<Delivery>(ctx), dlv);
                    //        }
                    //    }
                    //    ctx.SaveChanges();
                    //}
                    //using (var ctx2 = new SenLan2Entities(userId))
                    //{
                    //    //新建提单信用证关系
                    //    foreach (Delivery item in deliveries)
                    //    {
                    //        int dlv2Id = item.Id;
                    //        Delivery dlv2 =
                    //            QueryForObjs(GetObjQuery<Delivery>(ctx2), o => o.Id == dlv2Id).FirstOrDefault();
                    //        if (dlv2 != null)
                    //        {
                    //            dlv2.LCId = lc.Id;
                    //            Update(GetObjSet<Delivery>(ctx2), dlv2);
                    //        }
                    //    }

                    //    ctx2.SaveChanges();
                    //}
                    //using (var ctx3 = new SenLan2Entities(userId))
                    //{
                    //    if (addedAttachments != null)
                    //    {
                    //        //有附件
                    //        foreach (Attachment attachment in addedAttachments)
                    //        {
                    //            CreateAttachment(lc.Id, attachment, userId);
                    //        }
                    //    }

                    //    if (deletedAttachments != null)
                    //    {
                    //        //有附件
                    //        foreach (Attachment attachment in deletedAttachments)
                    //        {
                    //            DeleteAttachment(ctx3, attachment);
                    //        }
                    //    }
                    //}

                    ////修改批次的已收已付金额
                    //var quotaService = new QuotaService();
                    //if (lc != null && lc.QuotaId != null)
                    //{
                    //    quotaService.SetPaidAndReceivedAmount(lc.QuotaId.Value, userId);
                    //}

                    //if (oldQuotaId != 0)
                    //{
                    //    //修改以前的批次的已收已付金额
                    //    if (lc.QuotaId.HasValue)
                    //    {
                    //        if (oldQuotaId != lc.QuotaId.Value)
                    //        {
                    //            quotaService.SetPaidAndReceivedAmount(oldQuotaId, userId);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        quotaService.SetPaidAndReceivedAmount(oldQuotaId, userId);
                    //    }
                    //}
                    #endregion
                    UpdateDocument(lc, userId, deliveries, addedAttachments, deletedAttachments, isFundflowFinished);

                    using (var ctx = new SenLan2Entities())
                    {
                        LetterOfCredit autoLC = QueryForObj(GetObjQuery<LetterOfCredit>(ctx), c => c.RelLCId == lc.Id && c.IsAutoGenerated);
                        if(autoLC != null)
                        {
                            int quotaId = QuotaHelper.GetAutoGeneratedQuotaId(lc.QuotaId ?? 0);
                            if(quotaId > 0)
                            {
                                autoLC.QuotaId = quotaId;
                            }
                            autoLC.ApplicantId = lc.BeneficiaryId;
                            autoLC.BeneficiaryId = lc.ApplicantId;
                            autoLC.IssueAmount = lc.IssueAmount;
                            autoLC.LCNo = lc.LCNo;
                            autoLC.LCType = lc.LCType;
                            autoLC.LCStatus = lc.LCStatus;
                            autoLC.CurrencyId = lc.CurrencyId;
                            autoLC.LCDays = lc.LCDays;
                            autoLC.PromptBasis = lc.PromptBasis;
                            autoLC.AdvisingBankId = lc.AdvisingBankId;
                            autoLC.IssueBankId = lc.IssueBankId;
                            autoLC.IssueDate = lc.IssueDate;
                            autoLC.IssueQuantity = lc.IssueQuantity;
                            autoLC.AcceptanceExpiryDate = lc.AcceptanceExpiryDate;
                            autoLC.LCExpiryDate = lc.LCExpiryDate;
                            autoLC.LatestShippmentDate = lc.LatestShippmentDate;
                            autoLC.ActualAcceptanceDate = lc.ActualAcceptanceDate;
                            autoLC.PresentAmount = lc.PresentAmount;
                            autoLC.PresentDate = lc.PresentDate;
                            autoLC.Comment = lc.Comment;
                            autoLC.IBORType = lc.IBORType;
                            autoLC.FinancialStatus = lc.FinancialStatus;
                            autoLC.IBORValue = lc.IBORValue;
                            autoLC.Float = lc.Float;
                            autoLC.Interest = lc.Interest;
                            autoLC.PaymentRequestId = lc.PaymentRequestId;
                            autoLC.RelLCId = lc.Id;
                            autoLC.IsAutoGenerated = true;

                            UpdateDocument(autoLC, userId, null, null, null, isFundflowFinished);
                        }
                    }
                    ts.Complete();
                }
                catch (OptimisticConcurrencyException)
                {
                    throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
                }
                catch (Exception ex)
                {
                    if (ex.InnerException is SqlException && ((SqlException)ex.InnerException).Number == 8152)
                    {
                        throw new FaultException(ErrCode.StringOverflow.ToString());
                    }

                    throw;
                }
                finally
                {
                    ts.Dispose();
                }
            }
        }

        private void UpdateDocument(LetterOfCredit lc, int userId, IEnumerable<Delivery> deliveries,
                                                IEnumerable<Attachment> addedAttachments,
                                                IEnumerable<Attachment> deletedAttachments, bool isFundflowFinished)
        {
            try
            {
                int oldQuotaId = 0;
                using (var ctx = new SenLan2Entities(userId))
                {

                    var oldLC = QueryForObj(GetObjQuery<LetterOfCredit>(ctx), o => o.Id == lc.Id);
                    if (oldLC.QuotaId.HasValue)
                        oldQuotaId = oldLC.QuotaId.Value;
                    //修改信用证
                    oldLC.AcceptanceExpiryDate = lc.AcceptanceExpiryDate;
                    oldLC.ActualAcceptanceDate = lc.ActualAcceptanceDate;
                    oldLC.AdvisingBankId = lc.AdvisingBankId;
                    oldLC.ApplicantId = lc.ApplicantId;
                    oldLC.BeneficiaryId = lc.BeneficiaryId;
                    oldLC.Comment = lc.Comment;
                    oldLC.CurrencyId = lc.CurrencyId;
                    oldLC.DiscountInterest = lc.DiscountInterest;
                    oldLC.DiscountRate = lc.DiscountRate;
                    oldLC.Float = lc.Float;
                    oldLC.IBORType = lc.IBORType;
                    oldLC.IBORValue = lc.IBORValue;
                    oldLC.Interest = lc.Interest;
                    oldLC.IssueAmount = lc.IssueAmount;
                    oldLC.IssueBankId = lc.IssueBankId;
                    oldLC.IssueDate = lc.IssueDate;
                    oldLC.IssueQuantity = lc.IssueQuantity;
                    oldLC.LatestShippmentDate = lc.LatestShippmentDate;
                    oldLC.LCDays = lc.LCDays;
                    oldLC.LCExpiryDate = lc.LCExpiryDate;
                    oldLC.LCNo = lc.LCNo;
                    oldLC.LCStatus = lc.LCStatus;
                    oldLC.LCType = lc.LCType;
                    oldLC.PaymentRequestId = lc.PaymentRequestId;
                    oldLC.PorS = lc.PorS;
                    oldLC.PresentAmount = lc.PresentAmount;
                    oldLC.PresentDate = lc.PresentDate;
                    oldLC.PromptBasis = lc.PromptBasis;
                    oldLC.QuotaId = lc.QuotaId;
                    oldLC.FinancialStatus = lc.FinancialStatus;
                    oldLC.RelLCId = lc.RelLCId;
                    oldLC.IsAutoGenerated = lc.IsAutoGenerated;

                    ObjectSet<LetterOfCredit> os = GetObjSet<LetterOfCredit>(ctx);
                    Update(os, oldLC);
                    //解除原有关系
                    List<Delivery> ds =
                        QueryForObjs(GetObjQuery<Delivery>(ctx), o => o.LCId == lc.Id).ToList();
                    foreach (Delivery item in ds)
                    {
                        int dlvId = item.Id;
                        Delivery dlv =
                            QueryForObjs(GetObjQuery<Delivery>(ctx), o => o.Id == dlvId).FirstOrDefault();
                        if (dlv != null)
                        {
                            dlv.LCId = null;
                            Update(GetObjSet<Delivery>(ctx), dlv);
                        }
                    }
                    Quota quota = QueryForObj(GetObjQuery<Quota>(ctx), c => c.Id == lc.QuotaId.Value);
                    if(quota != null && quota.Id > 0)
                    {
                        quota.IsFundflowFinished = isFundflowFinished;
                        Update(GetObjSet<Quota>(ctx), quota);
                    }
                    if (oldQuotaId != 0 && oldQuotaId != lc.QuotaId.Value)
                    {
                        Quota oldQuota = QueryForObj(GetObjQuery<Quota>(ctx), c => c.Id == oldQuotaId);
                        oldQuota.IsFundflowFinished = false;
                        Update(GetObjSet<Quota>(ctx), oldQuota);
                    }
                    ctx.SaveChanges();
                }
                using (var ctx2 = new SenLan2Entities(userId))
                {
                    if (deliveries != null)
                    {
                        //新建提单信用证关系
                        foreach (Delivery item in deliveries)
                        {
                            int dlv2Id = item.Id;
                            Delivery dlv2 =
                                QueryForObjs(GetObjQuery<Delivery>(ctx2), o => o.Id == dlv2Id).FirstOrDefault();
                            if (dlv2 != null)
                            {
                                dlv2.LCId = lc.Id;
                                Update(GetObjSet<Delivery>(ctx2), dlv2);
                            }
                        }
                    }
                    ctx2.SaveChanges();
                }
                using (var ctx3 = new SenLan2Entities(userId))
                {
                    if (addedAttachments != null)
                    {
                        //有附件
                        foreach (Attachment attachment in addedAttachments)
                        {
                            CreateAttachment(lc.Id, attachment, userId);
                        }
                    }

                    if (deletedAttachments != null)
                    {
                        //有附件
                        foreach (Attachment attachment in deletedAttachments)
                        {
                            DeleteAttachment(ctx3, attachment);
                        }
                    }
                }

                //修改批次的已收已付金额
                var quotaService = new QuotaService();
                if (lc.QuotaId != null)
                {
                    quotaService.SetPaidAndReceivedAmount(lc.QuotaId.Value, userId);
                }

                if (oldQuotaId != 0)
                {
                    //修改以前的批次的已收已付金额
                    if (lc.QuotaId.HasValue)
                    {
                        if (oldQuotaId != lc.QuotaId.Value)
                        {
                            quotaService.SetPaidAndReceivedAmount(oldQuotaId, userId);
                        }
                    }
                    else
                    {
                        quotaService.SetPaidAndReceivedAmount(oldQuotaId, userId);
                    }
                }
            }
            catch (OptimisticConcurrencyException)
            {
                throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
            }
        }

        #endregion

        /// <summary>
        /// 新增附件
        /// </summary>
        /// <param name="lCId"> </param>
        /// <param name="attachment"></param>
        /// <param name="userId"></param>
        private void CreateAttachment(int lCId, Attachment attachment, int userId)
        {
            try
            {
                using (var ctx = new SenLan2Entities(userId))
                {
                    if (attachment != null)
                    {
                        //设置DocumentId
                        Document doc = QueryForObj(GetObjQuery<Document>(ctx), o => o.TableCode == "LetterOfCredit");
                        attachment.Id = 0;
                        attachment.DocumentId = doc.Id;
                        attachment.RecordId = lCId;
                        Create(GetObjSet<Attachment>(ctx), attachment);
                        ctx.SaveChanges();
                    }
                }
            }
            catch (OptimisticConcurrencyException)
            {
                throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
            }
        }

        /// <summary>
        /// 删除附件
        /// </summary>
        /// <param name="ctx"></param>
        /// <param name="attachment"></param>
        private void DeleteAttachment(SenLan2Entities ctx, Attachment attachment)
        {
            if (attachment != null)
            {
                attachment.IsDeleted = true;
                Update(GetObjSet<Attachment>(ctx), attachment);
                ctx.SaveChanges();
            }
        }

        #region 编辑属性设置
        public LCEnableProperty SetElementsEnableProperty(int id)
        {
            try
            {
                var lcep = new LCEnableProperty();
                using (var ctx = new SenLan2Entities())
                {
                    //有自动产生的单据，则不可以修改内部客户和客户
                    LetterOfCredit loc = QueryForObj(GetObjQuery<LetterOfCredit>(ctx), lc => lc.Id == id);
                    if (loc != null && loc.RelLCId != null)
                    {
                        lcep.IsBPEnable = false;
                        lcep.IsInternalCustomerEnable = false;
                    }
                    //和商业发票关联则不能修改内部客户，客户和批次
                    if (QueryForObjs(GetObjQuery<LCCIRel>(ctx), r => r.LCId == id).Count() > 0)
                    {
                        lcep.IsBPEnable = false;
                        lcep.IsInternalCustomerEnable = false;
                        lcep.IsQuotaEnable = false;
                    }
                    return lcep;
                }
            }
            catch (OptimisticConcurrencyException)
            {
                throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
            }
        }
#endregion

        #region 判断是否是关联公司
        private bool IsInternalCustomer(int rId, int pId,int userId)
        {
            bool isResult = false;
            try
            {
                using (var ctx = new SenLan2Entities())
                {
                    var x = QueryForObjs(GetObjQuery<UserICLink>(ctx), o => o.UserId == userId).ToList();
                    List<int> bps = x.Select(o => o.BusinessPartnerId).Distinct().ToList();

                    //BusinessPartner rCustomer = QueryForObj(GetObjQuery<BusinessPartner>(ctx), c => c.Id == rId);
                    //BusinessPartner pCustomer = QueryForObj(GetObjQuery<BusinessPartner>(ctx), c => c.Id == pId);
                    if (bps.Contains(rId) && bps.Contains(pId))
                    {
                        isResult = true;
                    }
                    return isResult;
                }
            }
            catch (OptimisticConcurrencyException)
            {
                throw new FaultException(ErrCode.OptimisticConcurrencyErr.ToString());
            }
        }
        #endregion
    }
}