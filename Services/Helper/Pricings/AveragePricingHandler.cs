using System.Linq;
using DBEntity;
using DBEntity.EnumEntity;

namespace Services.Helper.Pricings
{
    public class AveragePricingHandler : BasePricingHandler
    {
        public AveragePricingHandler(Quota quota, SenLan2Entities ctx)
            :base(quota, ctx)
        {
            
        }

        public override void Update()
        {
            var oldQuota = CTX.Quotas.Single(o => o.Id == Quota.Id);
            if (oldQuota == null || oldQuota.PricingType != Quota.PricingType)
            {
                base.Update();
            }
            else
            {
                var up = CTX.Unpricings.FirstOrDefault(o => o.QuotaId == Quota.Id && !o.IsDeleted);
                if (up != null)
                {
                    up.EndPricingDate = Quota.PricingEndDate;
                    up.StartPricingDate = Quota.PricingStartDate;
                    up.UnpricingQuantity = Quota.Quantity;
                    CTX.SaveChanges();
                }
            }
        }

        public override void Create()
        {
            var up = new Unpricing
            {
                DeferFee = 0,
                EndPricingDate = Quota.PricingEndDate,
                StartPricingDate = Quota.PricingStartDate,
                UnpricingQuantity = Quota.Quantity
            };

            if (Quota.IsAutoGenerated && Quota.RelQuotaId != null)
            {
                var relQuota = CTX.Quotas.Single(o => o.Id == Quota.RelQuotaId);
                var un = CTX.Unpricings.FirstOrDefault(o => o.QuotaId == relQuota.Id);
                if (un != null)
                {
                    up.RelUnpricingId = un.Id;
                    up.IsAutoGenerated = true;
                }
            }

            Quota.Unpricings.Add(up);
            Quota.PricingStatus = (int) PricingStatus.NotAtAll;
        }

        public override void Recreate()
        {
            var up = new Unpricing
            {
                DeferFee = 0,
                EndPricingDate = Quota.PricingEndDate,
                StartPricingDate = Quota.PricingStartDate,
                UnpricingQuantity = Quota.Quantity,
                QuotaId = Quota.Id
            };

            if (Quota.IsAutoGenerated && Quota.RelQuotaId != null)
            {
                var relQuota = CTX.Quotas.Single(o => o.Id == Quota.RelQuotaId);
                var un = CTX.Unpricings.FirstOrDefault(o => o.QuotaId == relQuota.Id && !o.IsDeleted);
                if (un != null)
                {
                    up.RelUnpricingId = un.Id;
                    up.IsAutoGenerated = true;
                }
            }

            CTX.Unpricings.AddObject(up);
            Quota.PricingStatus = (int) PricingStatus.NotAtAll;
        }
    }
}