//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(TDHoldingPosition))]
    [KnownType(typeof(TDPosition))]
    public partial class TDCapitalDetail: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<int> AgentId
        {
            get { return _agentId; }
            set
            {
                if (_agentId != value)
                {
                    ChangeTracker.RecordOriginalValue("AgentId", _agentId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner != null && BusinessPartner.Id != value)
                        {
                            BusinessPartner = null;
                        }
                    }
                    _agentId = value;
                    OnPropertyChanged("AgentId");
                }
            }
        }
        private Nullable<int> _agentId;
    
        [DataMember]
        public Nullable<int> InternalBPId
        {
            get { return _internalBPId; }
            set
            {
                if (_internalBPId != value)
                {
                    ChangeTracker.RecordOriginalValue("InternalBPId", _internalBPId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner1 != null && BusinessPartner1.Id != value)
                        {
                            BusinessPartner1 = null;
                        }
                    }
                    _internalBPId = value;
                    OnPropertyChanged("InternalBPId");
                }
            }
        }
        private Nullable<int> _internalBPId;
    
        [DataMember]
        public Nullable<System.DateTime> TradeDate
        {
            get { return _tradeDate; }
            set
            {
                if (_tradeDate != value)
                {
                    _tradeDate = value;
                    OnPropertyChanged("TradeDate");
                }
            }
        }
        private Nullable<System.DateTime> _tradeDate;
    
        [DataMember]
        public Nullable<decimal> YesterdayBalance
        {
            get { return _yesterdayBalance; }
            set
            {
                if (_yesterdayBalance != value)
                {
                    _yesterdayBalance = value;
                    OnPropertyChanged("YesterdayBalance");
                }
            }
        }
        private Nullable<decimal> _yesterdayBalance;
    
        [DataMember]
        public Nullable<decimal> TodayBalance
        {
            get { return _todayBalance; }
            set
            {
                if (_todayBalance != value)
                {
                    _todayBalance = value;
                    OnPropertyChanged("TodayBalance");
                }
            }
        }
        private Nullable<decimal> _todayBalance;
    
        [DataMember]
        public Nullable<decimal> Equity
        {
            get { return _equity; }
            set
            {
                if (_equity != value)
                {
                    _equity = value;
                    OnPropertyChanged("Equity");
                }
            }
        }
        private Nullable<decimal> _equity;
    
        [DataMember]
        public Nullable<decimal> MoneyIn
        {
            get { return _moneyIn; }
            set
            {
                if (_moneyIn != value)
                {
                    _moneyIn = value;
                    OnPropertyChanged("MoneyIn");
                }
            }
        }
        private Nullable<decimal> _moneyIn;
    
        [DataMember]
        public Nullable<decimal> MoneyOut
        {
            get { return _moneyOut; }
            set
            {
                if (_moneyOut != value)
                {
                    _moneyOut = value;
                    OnPropertyChanged("MoneyOut");
                }
            }
        }
        private Nullable<decimal> _moneyOut;
    
        [DataMember]
        public Nullable<decimal> CompleteMoney
        {
            get { return _completeMoney; }
            set
            {
                if (_completeMoney != value)
                {
                    _completeMoney = value;
                    OnPropertyChanged("CompleteMoney");
                }
            }
        }
        private Nullable<decimal> _completeMoney;
    
        [DataMember]
        public Nullable<decimal> BasicMargin
        {
            get { return _basicMargin; }
            set
            {
                if (_basicMargin != value)
                {
                    _basicMargin = value;
                    OnPropertyChanged("BasicMargin");
                }
            }
        }
        private Nullable<decimal> _basicMargin;
    
        [DataMember]
        public Nullable<decimal> Margin
        {
            get { return _margin; }
            set
            {
                if (_margin != value)
                {
                    _margin = value;
                    OnPropertyChanged("Margin");
                }
            }
        }
        private Nullable<decimal> _margin;
    
        [DataMember]
        public Nullable<decimal> AvailableCapital
        {
            get { return _availableCapital; }
            set
            {
                if (_availableCapital != value)
                {
                    _availableCapital = value;
                    OnPropertyChanged("AvailableCapital");
                }
            }
        }
        private Nullable<decimal> _availableCapital;
    
        [DataMember]
        public Nullable<decimal> SupplementaryMoney
        {
            get { return _supplementaryMoney; }
            set
            {
                if (_supplementaryMoney != value)
                {
                    _supplementaryMoney = value;
                    OnPropertyChanged("SupplementaryMoney");
                }
            }
        }
        private Nullable<decimal> _supplementaryMoney;
    
        [DataMember]
        public Nullable<decimal> CompleteMargin
        {
            get { return _completeMargin; }
            set
            {
                if (_completeMargin != value)
                {
                    _completeMargin = value;
                    OnPropertyChanged("CompleteMargin");
                }
            }
        }
        private Nullable<decimal> _completeMargin;
    
        [DataMember]
        public Nullable<decimal> BPInterest
        {
            get { return _bPInterest; }
            set
            {
                if (_bPInterest != value)
                {
                    _bPInterest = value;
                    OnPropertyChanged("BPInterest");
                }
            }
        }
        private Nullable<decimal> _bPInterest;
    
        [DataMember]
        public Nullable<decimal> PtFrozen
        {
            get { return _ptFrozen; }
            set
            {
                if (_ptFrozen != value)
                {
                    _ptFrozen = value;
                    OnPropertyChanged("PtFrozen");
                }
            }
        }
        private Nullable<decimal> _ptFrozen;
    
        [DataMember]
        public Nullable<decimal> MoneyFrozen
        {
            get { return _moneyFrozen; }
            set
            {
                if (_moneyFrozen != value)
                {
                    _moneyFrozen = value;
                    OnPropertyChanged("MoneyFrozen");
                }
            }
        }
        private Nullable<decimal> _moneyFrozen;
    
        [DataMember]
        public Nullable<decimal> ElseMoney
        {
            get { return _elseMoney; }
            set
            {
                if (_elseMoney != value)
                {
                    _elseMoney = value;
                    OnPropertyChanged("ElseMoney");
                }
            }
        }
        private Nullable<decimal> _elseMoney;
    
        [DataMember]
        public Nullable<decimal> TodayPNL
        {
            get { return _todayPNL; }
            set
            {
                if (_todayPNL != value)
                {
                    _todayPNL = value;
                    OnPropertyChanged("TodayPNL");
                }
            }
        }
        private Nullable<decimal> _todayPNL;
    
        [DataMember]
        public Nullable<decimal> SumFee
        {
            get { return _sumFee; }
            set
            {
                if (_sumFee != value)
                {
                    _sumFee = value;
                    OnPropertyChanged("SumFee");
                }
            }
        }
        private Nullable<decimal> _sumFee;
    
        [DataMember]
        public Nullable<decimal> TradeFee
        {
            get { return _tradeFee; }
            set
            {
                if (_tradeFee != value)
                {
                    _tradeFee = value;
                    OnPropertyChanged("TradeFee");
                }
            }
        }
        private Nullable<decimal> _tradeFee;
    
        [DataMember]
        public Nullable<decimal> DelayFee
        {
            get { return _delayFee; }
            set
            {
                if (_delayFee != value)
                {
                    _delayFee = value;
                    OnPropertyChanged("DelayFee");
                }
            }
        }
        private Nullable<decimal> _delayFee;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BusinessPartner BusinessPartner
        {
            get { return _businessPartner; }
            set
            {
                if (!ReferenceEquals(_businessPartner, value))
                {
                    var previousValue = _businessPartner;
                    _businessPartner = value;
                    FixupBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner");
                }
            }
        }
        private BusinessPartner _businessPartner;
    
        [DataMember]
        public BusinessPartner BusinessPartner1
        {
            get { return _businessPartner1; }
            set
            {
                if (!ReferenceEquals(_businessPartner1, value))
                {
                    var previousValue = _businessPartner1;
                    _businessPartner1 = value;
                    FixupBusinessPartner1(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner1");
                }
            }
        }
        private BusinessPartner _businessPartner1;
    
        [DataMember]
        public TrackableCollection<TDHoldingPosition> TDHoldingPositions
        {
            get
            {
                if (_tDHoldingPositions == null)
                {
                    _tDHoldingPositions = new TrackableCollection<TDHoldingPosition>();
                    _tDHoldingPositions.CollectionChanged += FixupTDHoldingPositions;
                }
                return _tDHoldingPositions;
            }
            set
            {
                if (!ReferenceEquals(_tDHoldingPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tDHoldingPositions != null)
                    {
                        _tDHoldingPositions.CollectionChanged -= FixupTDHoldingPositions;
                    }
                    _tDHoldingPositions = value;
                    if (_tDHoldingPositions != null)
                    {
                        _tDHoldingPositions.CollectionChanged += FixupTDHoldingPositions;
                    }
                    OnNavigationPropertyChanged("TDHoldingPositions");
                }
            }
        }
        private TrackableCollection<TDHoldingPosition> _tDHoldingPositions;
    
        [DataMember]
        public TrackableCollection<TDPosition> TDPositions
        {
            get
            {
                if (_tDPositions == null)
                {
                    _tDPositions = new TrackableCollection<TDPosition>();
                    _tDPositions.CollectionChanged += FixupTDPositions;
                }
                return _tDPositions;
            }
            set
            {
                if (!ReferenceEquals(_tDPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tDPositions != null)
                    {
                        _tDPositions.CollectionChanged -= FixupTDPositions;
                    }
                    _tDPositions = value;
                    if (_tDPositions != null)
                    {
                        _tDPositions.CollectionChanged += FixupTDPositions;
                    }
                    OnNavigationPropertyChanged("TDPositions");
                }
            }
        }
        private TrackableCollection<TDPosition> _tDPositions;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BusinessPartner = null;
            BusinessPartner1 = null;
            TDHoldingPositions.Clear();
            TDPositions.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupBusinessPartner(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TDCapitalDetails.Contains(this))
            {
                previousValue.TDCapitalDetails.Remove(this);
            }
    
            if (BusinessPartner != null)
            {
                if (!BusinessPartner.TDCapitalDetails.Contains(this))
                {
                    BusinessPartner.TDCapitalDetails.Add(this);
                }
    
                AgentId = BusinessPartner.Id;
            }
            else if (!skipKeys)
            {
                AgentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner")
                    && (ChangeTracker.OriginalValues["BusinessPartner"] == BusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner", previousValue);
                }
                if (BusinessPartner != null && !BusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupBusinessPartner1(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TDCapitalDetails1.Contains(this))
            {
                previousValue.TDCapitalDetails1.Remove(this);
            }
    
            if (BusinessPartner1 != null)
            {
                if (!BusinessPartner1.TDCapitalDetails1.Contains(this))
                {
                    BusinessPartner1.TDCapitalDetails1.Add(this);
                }
    
                InternalBPId = BusinessPartner1.Id;
            }
            else if (!skipKeys)
            {
                InternalBPId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner1")
                    && (ChangeTracker.OriginalValues["BusinessPartner1"] == BusinessPartner1))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner1", previousValue);
                }
                if (BusinessPartner1 != null && !BusinessPartner1.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner1.StartTracking();
                }
            }
        }
    
        private void FixupTDHoldingPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TDHoldingPosition item in e.NewItems)
                {
                    item.TDCapitalDetail = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TDHoldingPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TDHoldingPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.TDCapitalDetail, this))
                    {
                        item.TDCapitalDetail = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TDHoldingPositions", item);
                    }
                }
            }
        }
    
        private void FixupTDPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TDPosition item in e.NewItems)
                {
                    item.TDCapitalDetail = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TDPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TDPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.TDCapitalDetail, this))
                    {
                        item.TDCapitalDetail = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TDPositions", item);
                    }
                }
            }
        }

        #endregion

    }
}
