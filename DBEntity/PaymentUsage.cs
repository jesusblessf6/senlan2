//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FinancialAccount))]
    [KnownType(typeof(PaymentMean))]
    [KnownType(typeof(PaymentRequest))]
    public partial class PaymentUsage: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<int> DefaultPaymentMeanId
        {
            get { return _defaultPaymentMeanId; }
            set
            {
                if (_defaultPaymentMeanId != value)
                {
                    ChangeTracker.RecordOriginalValue("DefaultPaymentMeanId", _defaultPaymentMeanId);
                    if (!IsDeserializing)
                    {
                        if (PaymentMean != null && PaymentMean.Id != value)
                        {
                            PaymentMean = null;
                        }
                    }
                    _defaultPaymentMeanId = value;
                    OnPropertyChanged("DefaultPaymentMeanId");
                }
            }
        }
        private Nullable<int> _defaultPaymentMeanId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> FinancialAccountId
        {
            get { return _financialAccountId; }
            set
            {
                if (_financialAccountId != value)
                {
                    ChangeTracker.RecordOriginalValue("FinancialAccountId", _financialAccountId);
                    if (!IsDeserializing)
                    {
                        if (FinancialAccount != null && FinancialAccount.Id != value)
                        {
                            FinancialAccount = null;
                        }
                    }
                    _financialAccountId = value;
                    OnPropertyChanged("FinancialAccountId");
                }
            }
        }
        private Nullable<int> _financialAccountId;
    
        [DataMember]
        public bool IsDefault
        {
            get { return _isDefault; }
            set
            {
                if (_isDefault != value)
                {
                    _isDefault = value;
                    OnPropertyChanged("IsDefault");
                }
            }
        }
        private bool _isDefault;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public FinancialAccount FinancialAccount
        {
            get { return _financialAccount; }
            set
            {
                if (!ReferenceEquals(_financialAccount, value))
                {
                    var previousValue = _financialAccount;
                    _financialAccount = value;
                    FixupFinancialAccount(previousValue);
                    OnNavigationPropertyChanged("FinancialAccount");
                }
            }
        }
        private FinancialAccount _financialAccount;
    
        [DataMember]
        public PaymentMean PaymentMean
        {
            get { return _paymentMean; }
            set
            {
                if (!ReferenceEquals(_paymentMean, value))
                {
                    var previousValue = _paymentMean;
                    _paymentMean = value;
                    FixupPaymentMean(previousValue);
                    OnNavigationPropertyChanged("PaymentMean");
                }
            }
        }
        private PaymentMean _paymentMean;
    
        [DataMember]
        public TrackableCollection<PaymentRequest> PaymentRequests
        {
            get
            {
                if (_paymentRequests == null)
                {
                    _paymentRequests = new TrackableCollection<PaymentRequest>();
                    _paymentRequests.CollectionChanged += FixupPaymentRequests;
                }
                return _paymentRequests;
            }
            set
            {
                if (!ReferenceEquals(_paymentRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged -= FixupPaymentRequests;
                    }
                    _paymentRequests = value;
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged += FixupPaymentRequests;
                    }
                    OnNavigationPropertyChanged("PaymentRequests");
                }
            }
        }
        private TrackableCollection<PaymentRequest> _paymentRequests;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            FinancialAccount = null;
            PaymentMean = null;
            PaymentRequests.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupFinancialAccount(FinancialAccount previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentUsages.Contains(this))
            {
                previousValue.PaymentUsages.Remove(this);
            }
    
            if (FinancialAccount != null)
            {
                if (!FinancialAccount.PaymentUsages.Contains(this))
                {
                    FinancialAccount.PaymentUsages.Add(this);
                }
    
                FinancialAccountId = FinancialAccount.Id;
            }
            else if (!skipKeys)
            {
                FinancialAccountId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FinancialAccount")
                    && (ChangeTracker.OriginalValues["FinancialAccount"] == FinancialAccount))
                {
                    ChangeTracker.OriginalValues.Remove("FinancialAccount");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FinancialAccount", previousValue);
                }
                if (FinancialAccount != null && !FinancialAccount.ChangeTracker.ChangeTrackingEnabled)
                {
                    FinancialAccount.StartTracking();
                }
            }
        }
    
        private void FixupPaymentMean(PaymentMean previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentUsages.Contains(this))
            {
                previousValue.PaymentUsages.Remove(this);
            }
    
            if (PaymentMean != null)
            {
                if (!PaymentMean.PaymentUsages.Contains(this))
                {
                    PaymentMean.PaymentUsages.Add(this);
                }
    
                DefaultPaymentMeanId = PaymentMean.Id;
            }
            else if (!skipKeys)
            {
                DefaultPaymentMeanId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentMean")
                    && (ChangeTracker.OriginalValues["PaymentMean"] == PaymentMean))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentMean");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentMean", previousValue);
                }
                if (PaymentMean != null && !PaymentMean.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentMean.StartTracking();
                }
            }
        }
    
        private void FixupPaymentRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentRequest item in e.NewItems)
                {
                    item.PaymentUsage = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentRequests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.PaymentUsage, this))
                    {
                        item.PaymentUsage = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentRequests", item);
                    }
                }
            }
        }

        #endregion

    }
}
