//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Warehouse))]
    [KnownType(typeof(WarehouseInLine))]
    [KnownType(typeof(Commodity))]
    public partial class WarehouseIn: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<System.DateTime> WarehouseInDate
        {
            get { return _warehouseInDate; }
            set
            {
                if (_warehouseInDate != value)
                {
                    _warehouseInDate = value;
                    OnPropertyChanged("WarehouseInDate");
                }
            }
        }
        private Nullable<System.DateTime> _warehouseInDate;
    
        [DataMember]
        public int WarehouseId
        {
            get { return _warehouseId; }
            set
            {
                if (_warehouseId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseId", _warehouseId);
                    if (!IsDeserializing)
                    {
                        if (Warehouse != null && Warehouse.Id != value)
                        {
                            Warehouse = null;
                        }
                    }
                    _warehouseId = value;
                    OnPropertyChanged("WarehouseId");
                }
            }
        }
        private int _warehouseId;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public bool IsVerified
        {
            get { return _isVerified; }
            set
            {
                if (_isVerified != value)
                {
                    _isVerified = value;
                    OnPropertyChanged("IsVerified");
                }
            }
        }
        private bool _isVerified;
    
        [DataMember]
        public Nullable<int> CommodityId
        {
            get { return _commodityId; }
            set
            {
                if (_commodityId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityId", _commodityId);
                    if (!IsDeserializing)
                    {
                        if (Commodity != null && Commodity.Id != value)
                        {
                            Commodity = null;
                        }
                    }
                    _commodityId = value;
                    OnPropertyChanged("CommodityId");
                }
            }
        }
        private Nullable<int> _commodityId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Warehouse Warehouse
        {
            get { return _warehouse; }
            set
            {
                if (!ReferenceEquals(_warehouse, value))
                {
                    var previousValue = _warehouse;
                    _warehouse = value;
                    FixupWarehouse(previousValue);
                    OnNavigationPropertyChanged("Warehouse");
                }
            }
        }
        private Warehouse _warehouse;
    
        [DataMember]
        public TrackableCollection<WarehouseInLine> WarehouseInLines
        {
            get
            {
                if (_warehouseInLines == null)
                {
                    _warehouseInLines = new TrackableCollection<WarehouseInLine>();
                    _warehouseInLines.CollectionChanged += FixupWarehouseInLines;
                }
                return _warehouseInLines;
            }
            set
            {
                if (!ReferenceEquals(_warehouseInLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseInLines != null)
                    {
                        _warehouseInLines.CollectionChanged -= FixupWarehouseInLines;
                    }
                    _warehouseInLines = value;
                    if (_warehouseInLines != null)
                    {
                        _warehouseInLines.CollectionChanged += FixupWarehouseInLines;
                    }
                    OnNavigationPropertyChanged("WarehouseInLines");
                }
            }
        }
        private TrackableCollection<WarehouseInLine> _warehouseInLines;
    
        [DataMember]
        public Commodity Commodity
        {
            get { return _commodity; }
            set
            {
                if (!ReferenceEquals(_commodity, value))
                {
                    var previousValue = _commodity;
                    _commodity = value;
                    FixupCommodity(previousValue);
                    OnNavigationPropertyChanged("Commodity");
                }
            }
        }
        private Commodity _commodity;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Warehouse = null;
            WarehouseInLines.Clear();
            Commodity = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupWarehouse(Warehouse previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseIns.Contains(this))
            {
                previousValue.WarehouseIns.Remove(this);
            }
    
            if (Warehouse != null)
            {
                if (!Warehouse.WarehouseIns.Contains(this))
                {
                    Warehouse.WarehouseIns.Add(this);
                }
    
                WarehouseId = Warehouse.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Warehouse")
                    && (ChangeTracker.OriginalValues["Warehouse"] == Warehouse))
                {
                    ChangeTracker.OriginalValues.Remove("Warehouse");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Warehouse", previousValue);
                }
                if (Warehouse != null && !Warehouse.ChangeTracker.ChangeTrackingEnabled)
                {
                    Warehouse.StartTracking();
                }
            }
        }
    
        private void FixupCommodity(Commodity previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseIns.Contains(this))
            {
                previousValue.WarehouseIns.Remove(this);
            }
    
            if (Commodity != null)
            {
                if (!Commodity.WarehouseIns.Contains(this))
                {
                    Commodity.WarehouseIns.Add(this);
                }
    
                CommodityId = Commodity.Id;
            }
            else if (!skipKeys)
            {
                CommodityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Commodity")
                    && (ChangeTracker.OriginalValues["Commodity"] == Commodity))
                {
                    ChangeTracker.OriginalValues.Remove("Commodity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Commodity", previousValue);
                }
                if (Commodity != null && !Commodity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Commodity.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseInLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseInLine item in e.NewItems)
                {
                    item.WarehouseIn = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseInLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseInLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.WarehouseIn, this))
                    {
                        item.WarehouseIn = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseInLines", item);
                    }
                }
            }
        }

        #endregion

    }
}
