//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(Commodity))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(User))]
    public partial class LCAllocation: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public int BusinessPartnerId
        {
            get { return _businessPartnerId; }
            set
            {
                if (_businessPartnerId != value)
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartnerId", _businessPartnerId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner != null && BusinessPartner.Id != value)
                        {
                            BusinessPartner = null;
                        }
                    }
                    _businessPartnerId = value;
                    OnPropertyChanged("BusinessPartnerId");
                }
            }
        }
        private int _businessPartnerId;
    
        [DataMember]
        public int InternalCustomerId
        {
            get { return _internalCustomerId; }
            set
            {
                if (_internalCustomerId != value)
                {
                    ChangeTracker.RecordOriginalValue("InternalCustomerId", _internalCustomerId);
                    if (!IsDeserializing)
                    {
                        if (InternalCustomer != null && InternalCustomer.Id != value)
                        {
                            InternalCustomer = null;
                        }
                    }
                    _internalCustomerId = value;
                    OnPropertyChanged("InternalCustomerId");
                }
            }
        }
        private int _internalCustomerId;
    
        [DataMember]
        public Nullable<System.DateTime> EnquireDate
        {
            get { return _enquireDate; }
            set
            {
                if (_enquireDate != value)
                {
                    _enquireDate = value;
                    OnPropertyChanged("EnquireDate");
                }
            }
        }
        private Nullable<System.DateTime> _enquireDate;
    
        [DataMember]
        public Nullable<int> CommodityId
        {
            get { return _commodityId; }
            set
            {
                if (_commodityId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityId", _commodityId);
                    if (!IsDeserializing)
                    {
                        if (Commodity != null && Commodity.Id != value)
                        {
                            Commodity = null;
                        }
                    }
                    _commodityId = value;
                    OnPropertyChanged("CommodityId");
                }
            }
        }
        private Nullable<int> _commodityId;
    
        [DataMember]
        public Nullable<int> CurrencyId
        {
            get { return _currencyId; }
            set
            {
                if (_currencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CurrencyId", _currencyId);
                    if (!IsDeserializing)
                    {
                        if (Currency != null && Currency.Id != value)
                        {
                            Currency = null;
                        }
                    }
                    _currencyId = value;
                    OnPropertyChanged("CurrencyId");
                }
            }
        }
        private Nullable<int> _currencyId;
    
        [DataMember]
        public Nullable<int> Days
        {
            get { return _days; }
            set
            {
                if (_days != value)
                {
                    _days = value;
                    OnPropertyChanged("Days");
                }
            }
        }
        private Nullable<int> _days;
    
        [DataMember]
        public Nullable<decimal> Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private Nullable<decimal> _quantity;
    
        [DataMember]
        public Nullable<decimal> Amount
        {
            get { return _amount; }
            set
            {
                if (_amount != value)
                {
                    _amount = value;
                    OnPropertyChanged("Amount");
                }
            }
        }
        private Nullable<decimal> _amount;
    
        [DataMember]
        public string Quotation
        {
            get { return _quotation; }
            set
            {
                if (_quotation != value)
                {
                    _quotation = value;
                    OnPropertyChanged("Quotation");
                }
            }
        }
        private string _quotation;
    
        [DataMember]
        public Nullable<System.DateTime> IssueDate
        {
            get { return _issueDate; }
            set
            {
                if (_issueDate != value)
                {
                    _issueDate = value;
                    OnPropertyChanged("IssueDate");
                }
            }
        }
        private Nullable<System.DateTime> _issueDate;
    
        [DataMember]
        public Nullable<System.DateTime> DiscountDate
        {
            get { return _discountDate; }
            set
            {
                if (_discountDate != value)
                {
                    _discountDate = value;
                    OnPropertyChanged("DiscountDate");
                }
            }
        }
        private Nullable<System.DateTime> _discountDate;
    
        [DataMember]
        public string ActualDiscounting
        {
            get { return _actualDiscounting; }
            set
            {
                if (_actualDiscounting != value)
                {
                    _actualDiscounting = value;
                    OnPropertyChanged("ActualDiscounting");
                }
            }
        }
        private string _actualDiscounting;
    
        [DataMember]
        public Nullable<int> ResponsorId
        {
            get { return _responsorId; }
            set
            {
                if (_responsorId != value)
                {
                    ChangeTracker.RecordOriginalValue("ResponsorId", _responsorId);
                    if (!IsDeserializing)
                    {
                        if (Responsor != null && Responsor.Id != value)
                        {
                            Responsor = null;
                        }
                    }
                    _responsorId = value;
                    OnPropertyChanged("ResponsorId");
                }
            }
        }
        private Nullable<int> _responsorId;
    
        [DataMember]
        public string Comments
        {
            get { return _comments; }
            set
            {
                if (_comments != value)
                {
                    _comments = value;
                    OnPropertyChanged("Comments");
                }
            }
        }
        private string _comments;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string IssueBankName
        {
            get { return _issueBankName; }
            set
            {
                if (_issueBankName != value)
                {
                    _issueBankName = value;
                    OnPropertyChanged("IssueBankName");
                }
            }
        }
        private string _issueBankName;
    
        [DataMember]
        public string AcceptingBankName
        {
            get { return _acceptingBankName; }
            set
            {
                if (_acceptingBankName != value)
                {
                    _acceptingBankName = value;
                    OnPropertyChanged("AcceptingBankName");
                }
            }
        }
        private string _acceptingBankName;
    
        [DataMember]
        public bool IsCanceled
        {
            get { return _isCanceled; }
            set
            {
                if (_isCanceled != value)
                {
                    _isCanceled = value;
                    OnPropertyChanged("IsCanceled");
                }
            }
        }
        private bool _isCanceled;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BusinessPartner BusinessPartner
        {
            get { return _businessPartner; }
            set
            {
                if (!ReferenceEquals(_businessPartner, value))
                {
                    var previousValue = _businessPartner;
                    _businessPartner = value;
                    FixupBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner");
                }
            }
        }
        private BusinessPartner _businessPartner;
    
        [DataMember]
        public BusinessPartner InternalCustomer
        {
            get { return _internalCustomer; }
            set
            {
                if (!ReferenceEquals(_internalCustomer, value))
                {
                    var previousValue = _internalCustomer;
                    _internalCustomer = value;
                    FixupInternalCustomer(previousValue);
                    OnNavigationPropertyChanged("InternalCustomer");
                }
            }
        }
        private BusinessPartner _internalCustomer;
    
        [DataMember]
        public Commodity Commodity
        {
            get { return _commodity; }
            set
            {
                if (!ReferenceEquals(_commodity, value))
                {
                    var previousValue = _commodity;
                    _commodity = value;
                    FixupCommodity(previousValue);
                    OnNavigationPropertyChanged("Commodity");
                }
            }
        }
        private Commodity _commodity;
    
        [DataMember]
        public Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                    OnNavigationPropertyChanged("Currency");
                }
            }
        }
        private Currency _currency;
    
        [DataMember]
        public User Responsor
        {
            get { return _responsor; }
            set
            {
                if (!ReferenceEquals(_responsor, value))
                {
                    var previousValue = _responsor;
                    _responsor = value;
                    FixupResponsor(previousValue);
                    OnNavigationPropertyChanged("Responsor");
                }
            }
        }
        private User _responsor;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BusinessPartner = null;
            InternalCustomer = null;
            Commodity = null;
            Currency = null;
            Responsor = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBusinessPartner(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LCAllocations.Contains(this))
            {
                previousValue.LCAllocations.Remove(this);
            }
    
            if (BusinessPartner != null)
            {
                if (!BusinessPartner.LCAllocations.Contains(this))
                {
                    BusinessPartner.LCAllocations.Add(this);
                }
    
                BusinessPartnerId = BusinessPartner.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner")
                    && (ChangeTracker.OriginalValues["BusinessPartner"] == BusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner", previousValue);
                }
                if (BusinessPartner != null && !BusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupInternalCustomer(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LCAllocations1.Contains(this))
            {
                previousValue.LCAllocations1.Remove(this);
            }
    
            if (InternalCustomer != null)
            {
                if (!InternalCustomer.LCAllocations1.Contains(this))
                {
                    InternalCustomer.LCAllocations1.Add(this);
                }
    
                InternalCustomerId = InternalCustomer.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InternalCustomer")
                    && (ChangeTracker.OriginalValues["InternalCustomer"] == InternalCustomer))
                {
                    ChangeTracker.OriginalValues.Remove("InternalCustomer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InternalCustomer", previousValue);
                }
                if (InternalCustomer != null && !InternalCustomer.ChangeTracker.ChangeTrackingEnabled)
                {
                    InternalCustomer.StartTracking();
                }
            }
        }
    
        private void FixupCommodity(Commodity previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LCAllocations.Contains(this))
            {
                previousValue.LCAllocations.Remove(this);
            }
    
            if (Commodity != null)
            {
                if (!Commodity.LCAllocations.Contains(this))
                {
                    Commodity.LCAllocations.Add(this);
                }
    
                CommodityId = Commodity.Id;
            }
            else if (!skipKeys)
            {
                CommodityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Commodity")
                    && (ChangeTracker.OriginalValues["Commodity"] == Commodity))
                {
                    ChangeTracker.OriginalValues.Remove("Commodity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Commodity", previousValue);
                }
                if (Commodity != null && !Commodity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Commodity.StartTracking();
                }
            }
        }
    
        private void FixupCurrency(Currency previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LCAllocations.Contains(this))
            {
                previousValue.LCAllocations.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.LCAllocations.Contains(this))
                {
                    Currency.LCAllocations.Add(this);
                }
    
                CurrencyId = Currency.Id;
            }
            else if (!skipKeys)
            {
                CurrencyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Currency")
                    && (ChangeTracker.OriginalValues["Currency"] == Currency))
                {
                    ChangeTracker.OriginalValues.Remove("Currency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Currency", previousValue);
                }
                if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
                {
                    Currency.StartTracking();
                }
            }
        }
    
        private void FixupResponsor(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LCAllocations.Contains(this))
            {
                previousValue.LCAllocations.Remove(this);
            }
    
            if (Responsor != null)
            {
                if (!Responsor.LCAllocations.Contains(this))
                {
                    Responsor.LCAllocations.Add(this);
                }
    
                ResponsorId = Responsor.Id;
            }
            else if (!skipKeys)
            {
                ResponsorId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Responsor")
                    && (ChangeTracker.OriginalValues["Responsor"] == Responsor))
                {
                    ChangeTracker.OriginalValues.Remove("Responsor");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Responsor", previousValue);
                }
                if (Responsor != null && !Responsor.ChangeTracker.ChangeTrackingEnabled)
                {
                    Responsor.StartTracking();
                }
            }
        }

        #endregion

    }
}
