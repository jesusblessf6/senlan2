//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ApprovalStage))]
    [KnownType(typeof(Document))]
    [KnownType(typeof(LogAction))]
    [KnownType(typeof(User))]
    [KnownType(typeof(LogMessage))]
    public partial class Log: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public int DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentId", _documentId);
                    if (!IsDeserializing)
                    {
                        if (Document != null && Document.Id != value)
                        {
                            Document = null;
                        }
                    }
                    _documentId = value;
                    OnPropertyChanged("DocumentId");
                }
            }
        }
        private int _documentId;
    
        [DataMember]
        public int LogActionId
        {
            get { return _logActionId; }
            set
            {
                if (_logActionId != value)
                {
                    ChangeTracker.RecordOriginalValue("LogActionId", _logActionId);
                    if (!IsDeserializing)
                    {
                        if (LogAction != null && LogAction.Id != value)
                        {
                            LogAction = null;
                        }
                    }
                    _logActionId = value;
                    OnPropertyChanged("LogActionId");
                }
            }
        }
        private int _logActionId;
    
        [DataMember]
        public System.DateTime LogTime
        {
            get { return _logTime; }
            set
            {
                if (_logTime != value)
                {
                    _logTime = value;
                    OnPropertyChanged("LogTime");
                }
            }
        }
        private System.DateTime _logTime;
    
        [DataMember]
        public int LogUserId
        {
            get { return _logUserId; }
            set
            {
                if (_logUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("LogUserId", _logUserId);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                    }
                    _logUserId = value;
                    OnPropertyChanged("LogUserId");
                }
            }
        }
        private int _logUserId;
    
        [DataMember]
        public Nullable<int> ObjectId
        {
            get { return _objectId; }
            set
            {
                if (_objectId != value)
                {
                    _objectId = value;
                    OnPropertyChanged("ObjectId");
                }
            }
        }
        private Nullable<int> _objectId;
    
        [DataMember]
        public Nullable<int> ApprovalStageId
        {
            get { return _approvalStageId; }
            set
            {
                if (_approvalStageId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalStageId", _approvalStageId);
                    if (!IsDeserializing)
                    {
                        if (ApprovalStage != null && ApprovalStage.Id != value)
                        {
                            ApprovalStage = null;
                        }
                    }
                    _approvalStageId = value;
                    OnPropertyChanged("ApprovalStageId");
                }
            }
        }
        private Nullable<int> _approvalStageId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ApprovalStage ApprovalStage
        {
            get { return _approvalStage; }
            set
            {
                if (!ReferenceEquals(_approvalStage, value))
                {
                    var previousValue = _approvalStage;
                    _approvalStage = value;
                    FixupApprovalStage(previousValue);
                    OnNavigationPropertyChanged("ApprovalStage");
                }
            }
        }
        private ApprovalStage _approvalStage;
    
        [DataMember]
        public Document Document
        {
            get { return _document; }
            set
            {
                if (!ReferenceEquals(_document, value))
                {
                    var previousValue = _document;
                    _document = value;
                    FixupDocument(previousValue);
                    OnNavigationPropertyChanged("Document");
                }
            }
        }
        private Document _document;
    
        [DataMember]
        public LogAction LogAction
        {
            get { return _logAction; }
            set
            {
                if (!ReferenceEquals(_logAction, value))
                {
                    var previousValue = _logAction;
                    _logAction = value;
                    FixupLogAction(previousValue);
                    OnNavigationPropertyChanged("LogAction");
                }
            }
        }
        private LogAction _logAction;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TrackableCollection<LogMessage> LogMessages
        {
            get
            {
                if (_logMessages == null)
                {
                    _logMessages = new TrackableCollection<LogMessage>();
                    _logMessages.CollectionChanged += FixupLogMessages;
                }
                return _logMessages;
            }
            set
            {
                if (!ReferenceEquals(_logMessages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_logMessages != null)
                    {
                        _logMessages.CollectionChanged -= FixupLogMessages;
                    }
                    _logMessages = value;
                    if (_logMessages != null)
                    {
                        _logMessages.CollectionChanged += FixupLogMessages;
                    }
                    OnNavigationPropertyChanged("LogMessages");
                }
            }
        }
        private TrackableCollection<LogMessage> _logMessages;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ApprovalStage = null;
            Document = null;
            LogAction = null;
            User = null;
            LogMessages.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupApprovalStage(ApprovalStage previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Logs.Contains(this))
            {
                previousValue.Logs.Remove(this);
            }
    
            if (ApprovalStage != null)
            {
                if (!ApprovalStage.Logs.Contains(this))
                {
                    ApprovalStage.Logs.Add(this);
                }
    
                ApprovalStageId = ApprovalStage.Id;
            }
            else if (!skipKeys)
            {
                ApprovalStageId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ApprovalStage")
                    && (ChangeTracker.OriginalValues["ApprovalStage"] == ApprovalStage))
                {
                    ChangeTracker.OriginalValues.Remove("ApprovalStage");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ApprovalStage", previousValue);
                }
                if (ApprovalStage != null && !ApprovalStage.ChangeTracker.ChangeTrackingEnabled)
                {
                    ApprovalStage.StartTracking();
                }
            }
        }
    
        private void FixupDocument(Document previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Logs.Contains(this))
            {
                previousValue.Logs.Remove(this);
            }
    
            if (Document != null)
            {
                if (!Document.Logs.Contains(this))
                {
                    Document.Logs.Add(this);
                }
    
                DocumentId = Document.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Document")
                    && (ChangeTracker.OriginalValues["Document"] == Document))
                {
                    ChangeTracker.OriginalValues.Remove("Document");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Document", previousValue);
                }
                if (Document != null && !Document.ChangeTracker.ChangeTrackingEnabled)
                {
                    Document.StartTracking();
                }
            }
        }
    
        private void FixupLogAction(LogAction previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Logs.Contains(this))
            {
                previousValue.Logs.Remove(this);
            }
    
            if (LogAction != null)
            {
                if (!LogAction.Logs.Contains(this))
                {
                    LogAction.Logs.Add(this);
                }
    
                LogActionId = LogAction.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LogAction")
                    && (ChangeTracker.OriginalValues["LogAction"] == LogAction))
                {
                    ChangeTracker.OriginalValues.Remove("LogAction");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LogAction", previousValue);
                }
                if (LogAction != null && !LogAction.ChangeTracker.ChangeTrackingEnabled)
                {
                    LogAction.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Logs.Contains(this))
            {
                previousValue.Logs.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Logs.Contains(this))
                {
                    User.Logs.Add(this);
                }
    
                LogUserId = User.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupLogMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LogMessage item in e.NewItems)
                {
                    item.Log = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LogMessages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LogMessage item in e.OldItems)
                {
                    if (ReferenceEquals(item.Log, this))
                    {
                        item.Log = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LogMessages", item);
                    }
                }
            }
        }

        #endregion

    }
}
