//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(Port))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(DeliveryLine))]
    [KnownType(typeof(ForeignDeliveryPool))]
    [KnownType(typeof(ForeignDeliveryPoolLine))]
    public partial class Country: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public string ChineseName
        {
            get { return _chineseName; }
            set
            {
                if (_chineseName != value)
                {
                    _chineseName = value;
                    OnPropertyChanged("ChineseName");
                }
            }
        }
        private string _chineseName;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Brand> Brands
        {
            get
            {
                if (_brands == null)
                {
                    _brands = new TrackableCollection<Brand>();
                    _brands.CollectionChanged += FixupBrands;
                }
                return _brands;
            }
            set
            {
                if (!ReferenceEquals(_brands, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_brands != null)
                    {
                        _brands.CollectionChanged -= FixupBrands;
                    }
                    _brands = value;
                    if (_brands != null)
                    {
                        _brands.CollectionChanged += FixupBrands;
                    }
                    OnNavigationPropertyChanged("Brands");
                }
            }
        }
        private TrackableCollection<Brand> _brands;
    
        [DataMember]
        public TrackableCollection<Port> Ports
        {
            get
            {
                if (_ports == null)
                {
                    _ports = new TrackableCollection<Port>();
                    _ports.CollectionChanged += FixupPorts;
                }
                return _ports;
            }
            set
            {
                if (!ReferenceEquals(_ports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ports != null)
                    {
                        _ports.CollectionChanged -= FixupPorts;
                    }
                    _ports = value;
                    if (_ports != null)
                    {
                        _ports.CollectionChanged += FixupPorts;
                    }
                    OnNavigationPropertyChanged("Ports");
                }
            }
        }
        private TrackableCollection<Port> _ports;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries
        {
            get
            {
                if (_deliveries == null)
                {
                    _deliveries = new TrackableCollection<Delivery>();
                    _deliveries.CollectionChanged += FixupDeliveries;
                }
                return _deliveries;
            }
            set
            {
                if (!ReferenceEquals(_deliveries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged -= FixupDeliveries;
                    }
                    _deliveries = value;
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged += FixupDeliveries;
                    }
                    OnNavigationPropertyChanged("Deliveries");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries1
        {
            get
            {
                if (_deliveries1 == null)
                {
                    _deliveries1 = new TrackableCollection<Delivery>();
                    _deliveries1.CollectionChanged += FixupDeliveries1;
                }
                return _deliveries1;
            }
            set
            {
                if (!ReferenceEquals(_deliveries1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries1 != null)
                    {
                        _deliveries1.CollectionChanged -= FixupDeliveries1;
                    }
                    _deliveries1 = value;
                    if (_deliveries1 != null)
                    {
                        _deliveries1.CollectionChanged += FixupDeliveries1;
                    }
                    OnNavigationPropertyChanged("Deliveries1");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries1;
    
        [DataMember]
        public TrackableCollection<DeliveryLine> DeliveryLines
        {
            get
            {
                if (_deliveryLines == null)
                {
                    _deliveryLines = new TrackableCollection<DeliveryLine>();
                    _deliveryLines.CollectionChanged += FixupDeliveryLines;
                }
                return _deliveryLines;
            }
            set
            {
                if (!ReferenceEquals(_deliveryLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveryLines != null)
                    {
                        _deliveryLines.CollectionChanged -= FixupDeliveryLines;
                    }
                    _deliveryLines = value;
                    if (_deliveryLines != null)
                    {
                        _deliveryLines.CollectionChanged += FixupDeliveryLines;
                    }
                    OnNavigationPropertyChanged("DeliveryLines");
                }
            }
        }
        private TrackableCollection<DeliveryLine> _deliveryLines;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPool> ForeignDeliveryPools
        {
            get
            {
                if (_foreignDeliveryPools == null)
                {
                    _foreignDeliveryPools = new TrackableCollection<ForeignDeliveryPool>();
                    _foreignDeliveryPools.CollectionChanged += FixupForeignDeliveryPools;
                }
                return _foreignDeliveryPools;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPools, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPools != null)
                    {
                        _foreignDeliveryPools.CollectionChanged -= FixupForeignDeliveryPools;
                    }
                    _foreignDeliveryPools = value;
                    if (_foreignDeliveryPools != null)
                    {
                        _foreignDeliveryPools.CollectionChanged += FixupForeignDeliveryPools;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPools");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPool> _foreignDeliveryPools;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPool> ForeignDeliveryPools1
        {
            get
            {
                if (_foreignDeliveryPools1 == null)
                {
                    _foreignDeliveryPools1 = new TrackableCollection<ForeignDeliveryPool>();
                    _foreignDeliveryPools1.CollectionChanged += FixupForeignDeliveryPools1;
                }
                return _foreignDeliveryPools1;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPools1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPools1 != null)
                    {
                        _foreignDeliveryPools1.CollectionChanged -= FixupForeignDeliveryPools1;
                    }
                    _foreignDeliveryPools1 = value;
                    if (_foreignDeliveryPools1 != null)
                    {
                        _foreignDeliveryPools1.CollectionChanged += FixupForeignDeliveryPools1;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPools1");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPool> _foreignDeliveryPools1;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPoolLine> ForeignDeliveryPoolLines
        {
            get
            {
                if (_foreignDeliveryPoolLines == null)
                {
                    _foreignDeliveryPoolLines = new TrackableCollection<ForeignDeliveryPoolLine>();
                    _foreignDeliveryPoolLines.CollectionChanged += FixupForeignDeliveryPoolLines;
                }
                return _foreignDeliveryPoolLines;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPoolLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPoolLines != null)
                    {
                        _foreignDeliveryPoolLines.CollectionChanged -= FixupForeignDeliveryPoolLines;
                    }
                    _foreignDeliveryPoolLines = value;
                    if (_foreignDeliveryPoolLines != null)
                    {
                        _foreignDeliveryPoolLines.CollectionChanged += FixupForeignDeliveryPoolLines;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPoolLines");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPoolLine> _foreignDeliveryPoolLines;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Brands.Clear();
            Ports.Clear();
            Deliveries.Clear();
            Deliveries1.Clear();
            DeliveryLines.Clear();
            ForeignDeliveryPools.Clear();
            ForeignDeliveryPools1.Clear();
            ForeignDeliveryPoolLines.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupBrands(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Brand item in e.NewItems)
                {
                    item.Country = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Brands", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Brand item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Brands", item);
                    }
                }
            }
        }
    
        private void FixupPorts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Port item in e.NewItems)
                {
                    item.Country = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Ports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Port item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Ports", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.DischargePlace = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.DischargePlace, this))
                    {
                        item.DischargePlace = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.LoadingPlace = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.LoadingPlace, this))
                    {
                        item.LoadingPlace = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries1", item);
                    }
                }
            }
        }
    
        private void FixupDeliveryLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DeliveryLine item in e.NewItems)
                {
                    item.Country = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DeliveryLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Country, this))
                    {
                        item.Country = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DeliveryLines", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPools(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPool item in e.NewItems)
                {
                    item.DischargePlace = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPools", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPool item in e.OldItems)
                {
                    if (ReferenceEquals(item.DischargePlace, this))
                    {
                        item.DischargePlace = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPools", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPools1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPool item in e.NewItems)
                {
                    item.LoadingPlace = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPools1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPool item in e.OldItems)
                {
                    if (ReferenceEquals(item.LoadingPlace, this))
                    {
                        item.LoadingPlace = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPools1", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPoolLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPoolLine item in e.NewItems)
                {
                    item.OriginCountry = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPoolLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPoolLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.OriginCountry, this))
                    {
                        item.OriginCountry = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPoolLines", item);
                    }
                }
            }
        }

        #endregion

    }
}
