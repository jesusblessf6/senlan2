//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(UserICLink))]
    [KnownType(typeof(BankAccount))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(Inventory))]
    [KnownType(typeof(FundFlow))]
    [KnownType(typeof(VATInvoice))]
    [KnownType(typeof(VATInvoiceRequest))]
    [KnownType(typeof(PaymentRequest))]
    [KnownType(typeof(Commission))]
    [KnownType(typeof(SHFECapitalDetail))]
    [KnownType(typeof(LMEPosition))]
    [KnownType(typeof(TDCapitalDetail))]
    [KnownType(typeof(Contract))]
    [KnownType(typeof(LetterOfCredit))]
    [KnownType(typeof(WarehouseOut))]
    [KnownType(typeof(ForeignDeliveryPool))]
    [KnownType(typeof(LCAllocation))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Approval))]
    [KnownType(typeof(Document))]
    public partial class BusinessPartner: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedBy", _createdBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                    }
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    OnPropertyChanged("ShortName");
                }
            }
        }
        private string _shortName;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public int CustomerType
        {
            get { return _customerType; }
            set
            {
                if (_customerType != value)
                {
                    _customerType = value;
                    OnPropertyChanged("CustomerType");
                }
            }
        }
        private int _customerType;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string ContactPerson
        {
            get { return _contactPerson; }
            set
            {
                if (_contactPerson != value)
                {
                    _contactPerson = value;
                    OnPropertyChanged("ContactPerson");
                }
            }
        }
        private string _contactPerson;
    
        [DataMember]
        public string ContactPhone
        {
            get { return _contactPhone; }
            set
            {
                if (_contactPhone != value)
                {
                    _contactPhone = value;
                    OnPropertyChanged("ContactPhone");
                }
            }
        }
        private string _contactPhone;
    
        [DataMember]
        public string Fax
        {
            get { return _fax; }
            set
            {
                if (_fax != value)
                {
                    _fax = value;
                    OnPropertyChanged("Fax");
                }
            }
        }
        private string _fax;
    
        [DataMember]
        public string ZipCode
        {
            get { return _zipCode; }
            set
            {
                if (_zipCode != value)
                {
                    _zipCode = value;
                    OnPropertyChanged("ZipCode");
                }
            }
        }
        private string _zipCode;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string EnglishName
        {
            get { return _englishName; }
            set
            {
                if (_englishName != value)
                {
                    _englishName = value;
                    OnPropertyChanged("EnglishName");
                }
            }
        }
        private string _englishName;
    
        [DataMember]
        public string EnglishAddress
        {
            get { return _englishAddress; }
            set
            {
                if (_englishAddress != value)
                {
                    _englishAddress = value;
                    OnPropertyChanged("EnglishAddress");
                }
            }
        }
        private string _englishAddress;
    
        [DataMember]
        public string TaxNo
        {
            get { return _taxNo; }
            set
            {
                if (_taxNo != value)
                {
                    _taxNo = value;
                    OnPropertyChanged("TaxNo");
                }
            }
        }
        private string _taxNo;
    
        [DataMember]
        public Nullable<bool> IsDefault
        {
            get { return _isDefault; }
            set
            {
                if (_isDefault != value)
                {
                    _isDefault = value;
                    OnPropertyChanged("IsDefault");
                }
            }
        }
        private Nullable<bool> _isDefault;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<int> ApproveStatus
        {
            get { return _approveStatus; }
            set
            {
                if (_approveStatus != value)
                {
                    _approveStatus = value;
                    OnPropertyChanged("ApproveStatus");
                }
            }
        }
        private Nullable<int> _approveStatus;
    
        [DataMember]
        public Nullable<int> ApprovalId
        {
            get { return _approvalId; }
            set
            {
                if (_approvalId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalId", _approvalId);
                    if (!IsDeserializing)
                    {
                        if (Approval != null && Approval.Id != value)
                        {
                            Approval = null;
                        }
                    }
                    _approvalId = value;
                    OnPropertyChanged("ApprovalId");
                }
            }
        }
        private Nullable<int> _approvalId;
    
        [DataMember]
        public Nullable<int> ApprovalStageIndex
        {
            get { return _approvalStageIndex; }
            set
            {
                if (_approvalStageIndex != value)
                {
                    _approvalStageIndex = value;
                    OnPropertyChanged("ApprovalStageIndex");
                }
            }
        }
        private Nullable<int> _approvalStageIndex;
    
        [DataMember]
        public Nullable<int> DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentId", _documentId);
                    if (!IsDeserializing)
                    {
                        if (Document != null && Document.Id != value)
                        {
                            Document = null;
                        }
                    }
                    _documentId = value;
                    OnPropertyChanged("DocumentId");
                }
            }
        }
        private Nullable<int> _documentId;
    
        [DataMember]
        public string RejectReason
        {
            get { return _rejectReason; }
            set
            {
                if (_rejectReason != value)
                {
                    _rejectReason = value;
                    OnPropertyChanged("RejectReason");
                }
            }
        }
        private string _rejectReason;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<UserICLink> UserICLinks
        {
            get
            {
                if (_userICLinks == null)
                {
                    _userICLinks = new TrackableCollection<UserICLink>();
                    _userICLinks.CollectionChanged += FixupUserICLinks;
                }
                return _userICLinks;
            }
            set
            {
                if (!ReferenceEquals(_userICLinks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userICLinks != null)
                    {
                        _userICLinks.CollectionChanged -= FixupUserICLinks;
                    }
                    _userICLinks = value;
                    if (_userICLinks != null)
                    {
                        _userICLinks.CollectionChanged += FixupUserICLinks;
                    }
                    OnNavigationPropertyChanged("UserICLinks");
                }
            }
        }
        private TrackableCollection<UserICLink> _userICLinks;
    
        [DataMember]
        public TrackableCollection<BankAccount> BankAccounts
        {
            get
            {
                if (_bankAccounts == null)
                {
                    _bankAccounts = new TrackableCollection<BankAccount>();
                    _bankAccounts.CollectionChanged += FixupBankAccounts;
                }
                return _bankAccounts;
            }
            set
            {
                if (!ReferenceEquals(_bankAccounts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bankAccounts != null)
                    {
                        _bankAccounts.CollectionChanged -= FixupBankAccounts;
                    }
                    _bankAccounts = value;
                    if (_bankAccounts != null)
                    {
                        _bankAccounts.CollectionChanged += FixupBankAccounts;
                    }
                    OnNavigationPropertyChanged("BankAccounts");
                }
            }
        }
        private TrackableCollection<BankAccount> _bankAccounts;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries
        {
            get
            {
                if (_deliveries == null)
                {
                    _deliveries = new TrackableCollection<Delivery>();
                    _deliveries.CollectionChanged += FixupDeliveries;
                }
                return _deliveries;
            }
            set
            {
                if (!ReferenceEquals(_deliveries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged -= FixupDeliveries;
                    }
                    _deliveries = value;
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged += FixupDeliveries;
                    }
                    OnNavigationPropertyChanged("Deliveries");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries2
        {
            get
            {
                if (_deliveries2 == null)
                {
                    _deliveries2 = new TrackableCollection<Delivery>();
                    _deliveries2.CollectionChanged += FixupDeliveries2;
                }
                return _deliveries2;
            }
            set
            {
                if (!ReferenceEquals(_deliveries2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries2 != null)
                    {
                        _deliveries2.CollectionChanged -= FixupDeliveries2;
                    }
                    _deliveries2 = value;
                    if (_deliveries2 != null)
                    {
                        _deliveries2.CollectionChanged += FixupDeliveries2;
                    }
                    OnNavigationPropertyChanged("Deliveries2");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries2;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries3
        {
            get
            {
                if (_deliveries3 == null)
                {
                    _deliveries3 = new TrackableCollection<Delivery>();
                    _deliveries3.CollectionChanged += FixupDeliveries3;
                }
                return _deliveries3;
            }
            set
            {
                if (!ReferenceEquals(_deliveries3, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries3 != null)
                    {
                        _deliveries3.CollectionChanged -= FixupDeliveries3;
                    }
                    _deliveries3 = value;
                    if (_deliveries3 != null)
                    {
                        _deliveries3.CollectionChanged += FixupDeliveries3;
                    }
                    OnNavigationPropertyChanged("Deliveries3");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries3;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries4
        {
            get
            {
                if (_deliveries4 == null)
                {
                    _deliveries4 = new TrackableCollection<Delivery>();
                    _deliveries4.CollectionChanged += FixupDeliveries4;
                }
                return _deliveries4;
            }
            set
            {
                if (!ReferenceEquals(_deliveries4, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries4 != null)
                    {
                        _deliveries4.CollectionChanged -= FixupDeliveries4;
                    }
                    _deliveries4 = value;
                    if (_deliveries4 != null)
                    {
                        _deliveries4.CollectionChanged += FixupDeliveries4;
                    }
                    OnNavigationPropertyChanged("Deliveries4");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries4;
    
        [DataMember]
        public TrackableCollection<Inventory> Inventories
        {
            get
            {
                if (_inventories == null)
                {
                    _inventories = new TrackableCollection<Inventory>();
                    _inventories.CollectionChanged += FixupInventories;
                }
                return _inventories;
            }
            set
            {
                if (!ReferenceEquals(_inventories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_inventories != null)
                    {
                        _inventories.CollectionChanged -= FixupInventories;
                    }
                    _inventories = value;
                    if (_inventories != null)
                    {
                        _inventories.CollectionChanged += FixupInventories;
                    }
                    OnNavigationPropertyChanged("Inventories");
                }
            }
        }
        private TrackableCollection<Inventory> _inventories;
    
        [DataMember]
        public TrackableCollection<FundFlow> FundFlows
        {
            get
            {
                if (_fundFlows == null)
                {
                    _fundFlows = new TrackableCollection<FundFlow>();
                    _fundFlows.CollectionChanged += FixupFundFlows;
                }
                return _fundFlows;
            }
            set
            {
                if (!ReferenceEquals(_fundFlows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged -= FixupFundFlows;
                    }
                    _fundFlows = value;
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged += FixupFundFlows;
                    }
                    OnNavigationPropertyChanged("FundFlows");
                }
            }
        }
        private TrackableCollection<FundFlow> _fundFlows;
    
        [DataMember]
        public TrackableCollection<FundFlow> FundFlows1
        {
            get
            {
                if (_fundFlows1 == null)
                {
                    _fundFlows1 = new TrackableCollection<FundFlow>();
                    _fundFlows1.CollectionChanged += FixupFundFlows1;
                }
                return _fundFlows1;
            }
            set
            {
                if (!ReferenceEquals(_fundFlows1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fundFlows1 != null)
                    {
                        _fundFlows1.CollectionChanged -= FixupFundFlows1;
                    }
                    _fundFlows1 = value;
                    if (_fundFlows1 != null)
                    {
                        _fundFlows1.CollectionChanged += FixupFundFlows1;
                    }
                    OnNavigationPropertyChanged("FundFlows1");
                }
            }
        }
        private TrackableCollection<FundFlow> _fundFlows1;
    
        [DataMember]
        public TrackableCollection<VATInvoice> VATInvoices
        {
            get
            {
                if (_vATInvoices == null)
                {
                    _vATInvoices = new TrackableCollection<VATInvoice>();
                    _vATInvoices.CollectionChanged += FixupVATInvoices;
                }
                return _vATInvoices;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoices != null)
                    {
                        _vATInvoices.CollectionChanged -= FixupVATInvoices;
                    }
                    _vATInvoices = value;
                    if (_vATInvoices != null)
                    {
                        _vATInvoices.CollectionChanged += FixupVATInvoices;
                    }
                    OnNavigationPropertyChanged("VATInvoices");
                }
            }
        }
        private TrackableCollection<VATInvoice> _vATInvoices;
    
        [DataMember]
        public TrackableCollection<VATInvoice> VATInvoices1
        {
            get
            {
                if (_vATInvoices1 == null)
                {
                    _vATInvoices1 = new TrackableCollection<VATInvoice>();
                    _vATInvoices1.CollectionChanged += FixupVATInvoices1;
                }
                return _vATInvoices1;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoices1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoices1 != null)
                    {
                        _vATInvoices1.CollectionChanged -= FixupVATInvoices1;
                    }
                    _vATInvoices1 = value;
                    if (_vATInvoices1 != null)
                    {
                        _vATInvoices1.CollectionChanged += FixupVATInvoices1;
                    }
                    OnNavigationPropertyChanged("VATInvoices1");
                }
            }
        }
        private TrackableCollection<VATInvoice> _vATInvoices1;
    
        [DataMember]
        public TrackableCollection<VATInvoiceRequest> VATInvoiceRequests
        {
            get
            {
                if (_vATInvoiceRequests == null)
                {
                    _vATInvoiceRequests = new TrackableCollection<VATInvoiceRequest>();
                    _vATInvoiceRequests.CollectionChanged += FixupVATInvoiceRequests;
                }
                return _vATInvoiceRequests;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoiceRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoiceRequests != null)
                    {
                        _vATInvoiceRequests.CollectionChanged -= FixupVATInvoiceRequests;
                    }
                    _vATInvoiceRequests = value;
                    if (_vATInvoiceRequests != null)
                    {
                        _vATInvoiceRequests.CollectionChanged += FixupVATInvoiceRequests;
                    }
                    OnNavigationPropertyChanged("VATInvoiceRequests");
                }
            }
        }
        private TrackableCollection<VATInvoiceRequest> _vATInvoiceRequests;
    
        [DataMember]
        public TrackableCollection<VATInvoiceRequest> VATInvoiceRequests1
        {
            get
            {
                if (_vATInvoiceRequests1 == null)
                {
                    _vATInvoiceRequests1 = new TrackableCollection<VATInvoiceRequest>();
                    _vATInvoiceRequests1.CollectionChanged += FixupVATInvoiceRequests1;
                }
                return _vATInvoiceRequests1;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoiceRequests1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoiceRequests1 != null)
                    {
                        _vATInvoiceRequests1.CollectionChanged -= FixupVATInvoiceRequests1;
                    }
                    _vATInvoiceRequests1 = value;
                    if (_vATInvoiceRequests1 != null)
                    {
                        _vATInvoiceRequests1.CollectionChanged += FixupVATInvoiceRequests1;
                    }
                    OnNavigationPropertyChanged("VATInvoiceRequests1");
                }
            }
        }
        private TrackableCollection<VATInvoiceRequest> _vATInvoiceRequests1;
    
        [DataMember]
        public TrackableCollection<PaymentRequest> PaymentRequests
        {
            get
            {
                if (_paymentRequests == null)
                {
                    _paymentRequests = new TrackableCollection<PaymentRequest>();
                    _paymentRequests.CollectionChanged += FixupPaymentRequests;
                }
                return _paymentRequests;
            }
            set
            {
                if (!ReferenceEquals(_paymentRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged -= FixupPaymentRequests;
                    }
                    _paymentRequests = value;
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged += FixupPaymentRequests;
                    }
                    OnNavigationPropertyChanged("PaymentRequests");
                }
            }
        }
        private TrackableCollection<PaymentRequest> _paymentRequests;
    
        [DataMember]
        public TrackableCollection<PaymentRequest> PaymentRequests1
        {
            get
            {
                if (_paymentRequests1 == null)
                {
                    _paymentRequests1 = new TrackableCollection<PaymentRequest>();
                    _paymentRequests1.CollectionChanged += FixupPaymentRequests1;
                }
                return _paymentRequests1;
            }
            set
            {
                if (!ReferenceEquals(_paymentRequests1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentRequests1 != null)
                    {
                        _paymentRequests1.CollectionChanged -= FixupPaymentRequests1;
                    }
                    _paymentRequests1 = value;
                    if (_paymentRequests1 != null)
                    {
                        _paymentRequests1.CollectionChanged += FixupPaymentRequests1;
                    }
                    OnNavigationPropertyChanged("PaymentRequests1");
                }
            }
        }
        private TrackableCollection<PaymentRequest> _paymentRequests1;
    
        [DataMember]
        public TrackableCollection<Commission> Commissions
        {
            get
            {
                if (_commissions == null)
                {
                    _commissions = new TrackableCollection<Commission>();
                    _commissions.CollectionChanged += FixupCommissions;
                }
                return _commissions;
            }
            set
            {
                if (!ReferenceEquals(_commissions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commissions != null)
                    {
                        _commissions.CollectionChanged -= FixupCommissions;
                    }
                    _commissions = value;
                    if (_commissions != null)
                    {
                        _commissions.CollectionChanged += FixupCommissions;
                    }
                    OnNavigationPropertyChanged("Commissions");
                }
            }
        }
        private TrackableCollection<Commission> _commissions;
    
        [DataMember]
        public TrackableCollection<Commission> Commissions1
        {
            get
            {
                if (_commissions1 == null)
                {
                    _commissions1 = new TrackableCollection<Commission>();
                    _commissions1.CollectionChanged += FixupCommissions1;
                }
                return _commissions1;
            }
            set
            {
                if (!ReferenceEquals(_commissions1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commissions1 != null)
                    {
                        _commissions1.CollectionChanged -= FixupCommissions1;
                    }
                    _commissions1 = value;
                    if (_commissions1 != null)
                    {
                        _commissions1.CollectionChanged += FixupCommissions1;
                    }
                    OnNavigationPropertyChanged("Commissions1");
                }
            }
        }
        private TrackableCollection<Commission> _commissions1;
    
        [DataMember]
        public TrackableCollection<SHFECapitalDetail> SHFECapitalDetails
        {
            get
            {
                if (_sHFECapitalDetails == null)
                {
                    _sHFECapitalDetails = new TrackableCollection<SHFECapitalDetail>();
                    _sHFECapitalDetails.CollectionChanged += FixupSHFECapitalDetails;
                }
                return _sHFECapitalDetails;
            }
            set
            {
                if (!ReferenceEquals(_sHFECapitalDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sHFECapitalDetails != null)
                    {
                        _sHFECapitalDetails.CollectionChanged -= FixupSHFECapitalDetails;
                    }
                    _sHFECapitalDetails = value;
                    if (_sHFECapitalDetails != null)
                    {
                        _sHFECapitalDetails.CollectionChanged += FixupSHFECapitalDetails;
                    }
                    OnNavigationPropertyChanged("SHFECapitalDetails");
                }
            }
        }
        private TrackableCollection<SHFECapitalDetail> _sHFECapitalDetails;
    
        [DataMember]
        public TrackableCollection<SHFECapitalDetail> SHFECapitalDetails1
        {
            get
            {
                if (_sHFECapitalDetails1 == null)
                {
                    _sHFECapitalDetails1 = new TrackableCollection<SHFECapitalDetail>();
                    _sHFECapitalDetails1.CollectionChanged += FixupSHFECapitalDetails1;
                }
                return _sHFECapitalDetails1;
            }
            set
            {
                if (!ReferenceEquals(_sHFECapitalDetails1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sHFECapitalDetails1 != null)
                    {
                        _sHFECapitalDetails1.CollectionChanged -= FixupSHFECapitalDetails1;
                    }
                    _sHFECapitalDetails1 = value;
                    if (_sHFECapitalDetails1 != null)
                    {
                        _sHFECapitalDetails1.CollectionChanged += FixupSHFECapitalDetails1;
                    }
                    OnNavigationPropertyChanged("SHFECapitalDetails1");
                }
            }
        }
        private TrackableCollection<SHFECapitalDetail> _sHFECapitalDetails1;
    
        [DataMember]
        public TrackableCollection<LMEPosition> LMEPositions
        {
            get
            {
                if (_lMEPositions == null)
                {
                    _lMEPositions = new TrackableCollection<LMEPosition>();
                    _lMEPositions.CollectionChanged += FixupLMEPositions;
                }
                return _lMEPositions;
            }
            set
            {
                if (!ReferenceEquals(_lMEPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lMEPositions != null)
                    {
                        _lMEPositions.CollectionChanged -= FixupLMEPositions;
                    }
                    _lMEPositions = value;
                    if (_lMEPositions != null)
                    {
                        _lMEPositions.CollectionChanged += FixupLMEPositions;
                    }
                    OnNavigationPropertyChanged("LMEPositions");
                }
            }
        }
        private TrackableCollection<LMEPosition> _lMEPositions;
    
        [DataMember]
        public TrackableCollection<LMEPosition> LMEPositions1
        {
            get
            {
                if (_lMEPositions1 == null)
                {
                    _lMEPositions1 = new TrackableCollection<LMEPosition>();
                    _lMEPositions1.CollectionChanged += FixupLMEPositions1;
                }
                return _lMEPositions1;
            }
            set
            {
                if (!ReferenceEquals(_lMEPositions1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lMEPositions1 != null)
                    {
                        _lMEPositions1.CollectionChanged -= FixupLMEPositions1;
                    }
                    _lMEPositions1 = value;
                    if (_lMEPositions1 != null)
                    {
                        _lMEPositions1.CollectionChanged += FixupLMEPositions1;
                    }
                    OnNavigationPropertyChanged("LMEPositions1");
                }
            }
        }
        private TrackableCollection<LMEPosition> _lMEPositions1;
    
        [DataMember]
        public TrackableCollection<LMEPosition> LMEPositions2
        {
            get
            {
                if (_lMEPositions2 == null)
                {
                    _lMEPositions2 = new TrackableCollection<LMEPosition>();
                    _lMEPositions2.CollectionChanged += FixupLMEPositions2;
                }
                return _lMEPositions2;
            }
            set
            {
                if (!ReferenceEquals(_lMEPositions2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lMEPositions2 != null)
                    {
                        _lMEPositions2.CollectionChanged -= FixupLMEPositions2;
                    }
                    _lMEPositions2 = value;
                    if (_lMEPositions2 != null)
                    {
                        _lMEPositions2.CollectionChanged += FixupLMEPositions2;
                    }
                    OnNavigationPropertyChanged("LMEPositions2");
                }
            }
        }
        private TrackableCollection<LMEPosition> _lMEPositions2;
    
        [DataMember]
        public TrackableCollection<TDCapitalDetail> TDCapitalDetails
        {
            get
            {
                if (_tDCapitalDetails == null)
                {
                    _tDCapitalDetails = new TrackableCollection<TDCapitalDetail>();
                    _tDCapitalDetails.CollectionChanged += FixupTDCapitalDetails;
                }
                return _tDCapitalDetails;
            }
            set
            {
                if (!ReferenceEquals(_tDCapitalDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tDCapitalDetails != null)
                    {
                        _tDCapitalDetails.CollectionChanged -= FixupTDCapitalDetails;
                    }
                    _tDCapitalDetails = value;
                    if (_tDCapitalDetails != null)
                    {
                        _tDCapitalDetails.CollectionChanged += FixupTDCapitalDetails;
                    }
                    OnNavigationPropertyChanged("TDCapitalDetails");
                }
            }
        }
        private TrackableCollection<TDCapitalDetail> _tDCapitalDetails;
    
        [DataMember]
        public TrackableCollection<TDCapitalDetail> TDCapitalDetails1
        {
            get
            {
                if (_tDCapitalDetails1 == null)
                {
                    _tDCapitalDetails1 = new TrackableCollection<TDCapitalDetail>();
                    _tDCapitalDetails1.CollectionChanged += FixupTDCapitalDetails1;
                }
                return _tDCapitalDetails1;
            }
            set
            {
                if (!ReferenceEquals(_tDCapitalDetails1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tDCapitalDetails1 != null)
                    {
                        _tDCapitalDetails1.CollectionChanged -= FixupTDCapitalDetails1;
                    }
                    _tDCapitalDetails1 = value;
                    if (_tDCapitalDetails1 != null)
                    {
                        _tDCapitalDetails1.CollectionChanged += FixupTDCapitalDetails1;
                    }
                    OnNavigationPropertyChanged("TDCapitalDetails1");
                }
            }
        }
        private TrackableCollection<TDCapitalDetail> _tDCapitalDetails1;
    
        [DataMember]
        public TrackableCollection<Contract> Contracts
        {
            get
            {
                if (_contracts == null)
                {
                    _contracts = new TrackableCollection<Contract>();
                    _contracts.CollectionChanged += FixupContracts;
                }
                return _contracts;
            }
            set
            {
                if (!ReferenceEquals(_contracts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_contracts != null)
                    {
                        _contracts.CollectionChanged -= FixupContracts;
                    }
                    _contracts = value;
                    if (_contracts != null)
                    {
                        _contracts.CollectionChanged += FixupContracts;
                    }
                    OnNavigationPropertyChanged("Contracts");
                }
            }
        }
        private TrackableCollection<Contract> _contracts;
    
        [DataMember]
        public TrackableCollection<Contract> Contracts1
        {
            get
            {
                if (_contracts1 == null)
                {
                    _contracts1 = new TrackableCollection<Contract>();
                    _contracts1.CollectionChanged += FixupContracts1;
                }
                return _contracts1;
            }
            set
            {
                if (!ReferenceEquals(_contracts1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_contracts1 != null)
                    {
                        _contracts1.CollectionChanged -= FixupContracts1;
                    }
                    _contracts1 = value;
                    if (_contracts1 != null)
                    {
                        _contracts1.CollectionChanged += FixupContracts1;
                    }
                    OnNavigationPropertyChanged("Contracts1");
                }
            }
        }
        private TrackableCollection<Contract> _contracts1;
    
        [DataMember]
        public TrackableCollection<LetterOfCredit> LetterOfCredits
        {
            get
            {
                if (_letterOfCredits == null)
                {
                    _letterOfCredits = new TrackableCollection<LetterOfCredit>();
                    _letterOfCredits.CollectionChanged += FixupLetterOfCredits;
                }
                return _letterOfCredits;
            }
            set
            {
                if (!ReferenceEquals(_letterOfCredits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_letterOfCredits != null)
                    {
                        _letterOfCredits.CollectionChanged -= FixupLetterOfCredits;
                    }
                    _letterOfCredits = value;
                    if (_letterOfCredits != null)
                    {
                        _letterOfCredits.CollectionChanged += FixupLetterOfCredits;
                    }
                    OnNavigationPropertyChanged("LetterOfCredits");
                }
            }
        }
        private TrackableCollection<LetterOfCredit> _letterOfCredits;
    
        [DataMember]
        public TrackableCollection<LetterOfCredit> LetterOfCredits1
        {
            get
            {
                if (_letterOfCredits1 == null)
                {
                    _letterOfCredits1 = new TrackableCollection<LetterOfCredit>();
                    _letterOfCredits1.CollectionChanged += FixupLetterOfCredits1;
                }
                return _letterOfCredits1;
            }
            set
            {
                if (!ReferenceEquals(_letterOfCredits1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_letterOfCredits1 != null)
                    {
                        _letterOfCredits1.CollectionChanged -= FixupLetterOfCredits1;
                    }
                    _letterOfCredits1 = value;
                    if (_letterOfCredits1 != null)
                    {
                        _letterOfCredits1.CollectionChanged += FixupLetterOfCredits1;
                    }
                    OnNavigationPropertyChanged("LetterOfCredits1");
                }
            }
        }
        private TrackableCollection<LetterOfCredit> _letterOfCredits1;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries_1
        {
            get
            {
                if (_deliveries_1 == null)
                {
                    _deliveries_1 = new TrackableCollection<Delivery>();
                    _deliveries_1.CollectionChanged += FixupDeliveries_1;
                }
                return _deliveries_1;
            }
            set
            {
                if (!ReferenceEquals(_deliveries_1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries_1 != null)
                    {
                        _deliveries_1.CollectionChanged -= FixupDeliveries_1;
                    }
                    _deliveries_1 = value;
                    if (_deliveries_1 != null)
                    {
                        _deliveries_1.CollectionChanged += FixupDeliveries_1;
                    }
                    OnNavigationPropertyChanged("Deliveries_1");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries_1;
    
        [DataMember]
        public TrackableCollection<WarehouseOut> WarehouseOuts
        {
            get
            {
                if (_warehouseOuts == null)
                {
                    _warehouseOuts = new TrackableCollection<WarehouseOut>();
                    _warehouseOuts.CollectionChanged += FixupWarehouseOuts;
                }
                return _warehouseOuts;
            }
            set
            {
                if (!ReferenceEquals(_warehouseOuts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseOuts != null)
                    {
                        _warehouseOuts.CollectionChanged -= FixupWarehouseOuts;
                    }
                    _warehouseOuts = value;
                    if (_warehouseOuts != null)
                    {
                        _warehouseOuts.CollectionChanged += FixupWarehouseOuts;
                    }
                    OnNavigationPropertyChanged("WarehouseOuts");
                }
            }
        }
        private TrackableCollection<WarehouseOut> _warehouseOuts;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPool> ForeignDeliveryPools
        {
            get
            {
                if (_foreignDeliveryPools == null)
                {
                    _foreignDeliveryPools = new TrackableCollection<ForeignDeliveryPool>();
                    _foreignDeliveryPools.CollectionChanged += FixupForeignDeliveryPools;
                }
                return _foreignDeliveryPools;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPools, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPools != null)
                    {
                        _foreignDeliveryPools.CollectionChanged -= FixupForeignDeliveryPools;
                    }
                    _foreignDeliveryPools = value;
                    if (_foreignDeliveryPools != null)
                    {
                        _foreignDeliveryPools.CollectionChanged += FixupForeignDeliveryPools;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPools");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPool> _foreignDeliveryPools;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPool> ForeignDeliveryPools1
        {
            get
            {
                if (_foreignDeliveryPools1 == null)
                {
                    _foreignDeliveryPools1 = new TrackableCollection<ForeignDeliveryPool>();
                    _foreignDeliveryPools1.CollectionChanged += FixupForeignDeliveryPools1;
                }
                return _foreignDeliveryPools1;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPools1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPools1 != null)
                    {
                        _foreignDeliveryPools1.CollectionChanged -= FixupForeignDeliveryPools1;
                    }
                    _foreignDeliveryPools1 = value;
                    if (_foreignDeliveryPools1 != null)
                    {
                        _foreignDeliveryPools1.CollectionChanged += FixupForeignDeliveryPools1;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPools1");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPool> _foreignDeliveryPools1;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPool> ForeignDeliveryPools2
        {
            get
            {
                if (_foreignDeliveryPools2 == null)
                {
                    _foreignDeliveryPools2 = new TrackableCollection<ForeignDeliveryPool>();
                    _foreignDeliveryPools2.CollectionChanged += FixupForeignDeliveryPools2;
                }
                return _foreignDeliveryPools2;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPools2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPools2 != null)
                    {
                        _foreignDeliveryPools2.CollectionChanged -= FixupForeignDeliveryPools2;
                    }
                    _foreignDeliveryPools2 = value;
                    if (_foreignDeliveryPools2 != null)
                    {
                        _foreignDeliveryPools2.CollectionChanged += FixupForeignDeliveryPools2;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPools2");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPool> _foreignDeliveryPools2;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPool> ForeignDeliveryPools3
        {
            get
            {
                if (_foreignDeliveryPools3 == null)
                {
                    _foreignDeliveryPools3 = new TrackableCollection<ForeignDeliveryPool>();
                    _foreignDeliveryPools3.CollectionChanged += FixupForeignDeliveryPools3;
                }
                return _foreignDeliveryPools3;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPools3, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPools3 != null)
                    {
                        _foreignDeliveryPools3.CollectionChanged -= FixupForeignDeliveryPools3;
                    }
                    _foreignDeliveryPools3 = value;
                    if (_foreignDeliveryPools3 != null)
                    {
                        _foreignDeliveryPools3.CollectionChanged += FixupForeignDeliveryPools3;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPools3");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPool> _foreignDeliveryPools3;
    
        [DataMember]
        public TrackableCollection<LCAllocation> LCAllocations
        {
            get
            {
                if (_lCAllocations == null)
                {
                    _lCAllocations = new TrackableCollection<LCAllocation>();
                    _lCAllocations.CollectionChanged += FixupLCAllocations;
                }
                return _lCAllocations;
            }
            set
            {
                if (!ReferenceEquals(_lCAllocations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lCAllocations != null)
                    {
                        _lCAllocations.CollectionChanged -= FixupLCAllocations;
                    }
                    _lCAllocations = value;
                    if (_lCAllocations != null)
                    {
                        _lCAllocations.CollectionChanged += FixupLCAllocations;
                    }
                    OnNavigationPropertyChanged("LCAllocations");
                }
            }
        }
        private TrackableCollection<LCAllocation> _lCAllocations;
    
        [DataMember]
        public TrackableCollection<LCAllocation> LCAllocations1
        {
            get
            {
                if (_lCAllocations1 == null)
                {
                    _lCAllocations1 = new TrackableCollection<LCAllocation>();
                    _lCAllocations1.CollectionChanged += FixupLCAllocations1;
                }
                return _lCAllocations1;
            }
            set
            {
                if (!ReferenceEquals(_lCAllocations1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lCAllocations1 != null)
                    {
                        _lCAllocations1.CollectionChanged -= FixupLCAllocations1;
                    }
                    _lCAllocations1 = value;
                    if (_lCAllocations1 != null)
                    {
                        _lCAllocations1.CollectionChanged += FixupLCAllocations1;
                    }
                    OnNavigationPropertyChanged("LCAllocations1");
                }
            }
        }
        private TrackableCollection<LCAllocation> _lCAllocations1;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public Approval Approval
        {
            get { return _approval; }
            set
            {
                if (!ReferenceEquals(_approval, value))
                {
                    var previousValue = _approval;
                    _approval = value;
                    FixupApproval(previousValue);
                    OnNavigationPropertyChanged("Approval");
                }
            }
        }
        private Approval _approval;
    
        [DataMember]
        public Document Document
        {
            get { return _document; }
            set
            {
                if (!ReferenceEquals(_document, value))
                {
                    var previousValue = _document;
                    _document = value;
                    FixupDocument(previousValue);
                    OnNavigationPropertyChanged("Document");
                }
            }
        }
        private Document _document;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            UserICLinks.Clear();
            BankAccounts.Clear();
            Deliveries.Clear();
            Deliveries2.Clear();
            Deliveries3.Clear();
            Deliveries4.Clear();
            Inventories.Clear();
            FundFlows.Clear();
            FundFlows1.Clear();
            VATInvoices.Clear();
            VATInvoices1.Clear();
            VATInvoiceRequests.Clear();
            VATInvoiceRequests1.Clear();
            PaymentRequests.Clear();
            PaymentRequests1.Clear();
            Commissions.Clear();
            Commissions1.Clear();
            SHFECapitalDetails.Clear();
            SHFECapitalDetails1.Clear();
            LMEPositions.Clear();
            LMEPositions1.Clear();
            LMEPositions2.Clear();
            TDCapitalDetails.Clear();
            TDCapitalDetails1.Clear();
            Contracts.Clear();
            Contracts1.Clear();
            LetterOfCredits.Clear();
            LetterOfCredits1.Clear();
            Deliveries_1.Clear();
            WarehouseOuts.Clear();
            ForeignDeliveryPools.Clear();
            ForeignDeliveryPools1.Clear();
            ForeignDeliveryPools2.Clear();
            ForeignDeliveryPools3.Clear();
            LCAllocations.Clear();
            LCAllocations1.Clear();
            User = null;
            Approval = null;
            Document = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BusinessPartners.Contains(this))
            {
                previousValue.BusinessPartners.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.BusinessPartners.Contains(this))
                {
                    User.BusinessPartners.Add(this);
                }
    
                CreatedBy = User.Id;
            }
            else if (!skipKeys)
            {
                CreatedBy = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupApproval(Approval previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BusinessPartners.Contains(this))
            {
                previousValue.BusinessPartners.Remove(this);
            }
    
            if (Approval != null)
            {
                if (!Approval.BusinessPartners.Contains(this))
                {
                    Approval.BusinessPartners.Add(this);
                }
    
                ApprovalId = Approval.Id;
            }
            else if (!skipKeys)
            {
                ApprovalId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Approval")
                    && (ChangeTracker.OriginalValues["Approval"] == Approval))
                {
                    ChangeTracker.OriginalValues.Remove("Approval");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Approval", previousValue);
                }
                if (Approval != null && !Approval.ChangeTracker.ChangeTrackingEnabled)
                {
                    Approval.StartTracking();
                }
            }
        }
    
        private void FixupDocument(Document previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BusinessPartners.Contains(this))
            {
                previousValue.BusinessPartners.Remove(this);
            }
    
            if (Document != null)
            {
                if (!Document.BusinessPartners.Contains(this))
                {
                    Document.BusinessPartners.Add(this);
                }
    
                DocumentId = Document.Id;
            }
            else if (!skipKeys)
            {
                DocumentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Document")
                    && (ChangeTracker.OriginalValues["Document"] == Document))
                {
                    ChangeTracker.OriginalValues.Remove("Document");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Document", previousValue);
                }
                if (Document != null && !Document.ChangeTracker.ChangeTrackingEnabled)
                {
                    Document.StartTracking();
                }
            }
        }
    
        private void FixupUserICLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserICLink item in e.NewItems)
                {
                    item.InternalCustomer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserICLinks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserICLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.InternalCustomer, this))
                    {
                        item.InternalCustomer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserICLinks", item);
                    }
                }
            }
        }
    
        private void FixupBankAccounts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BankAccount item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BankAccounts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BankAccount item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BankAccounts", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.NotifyParty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.NotifyParty, this))
                    {
                        item.NotifyParty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.Shipper = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.Shipper, this))
                    {
                        item.Shipper = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries2", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries3(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.ShippingParty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries3", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.ShippingParty, this))
                    {
                        item.ShippingParty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries3", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries4(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.WarehouseProvider = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries4", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.WarehouseProvider, this))
                    {
                        item.WarehouseProvider = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries4", item);
                    }
                }
            }
        }
    
        private void FixupInventories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Inventory item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Inventories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Inventory item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Inventories", item);
                    }
                }
            }
        }
    
        private void FixupFundFlows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FundFlow item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FundFlows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FundFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FundFlows", item);
                    }
                }
            }
        }
    
        private void FixupFundFlows1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FundFlow item in e.NewItems)
                {
                    item.InternalCustomer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FundFlows1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FundFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.InternalCustomer, this))
                    {
                        item.InternalCustomer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FundFlows1", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoice item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoices", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoices1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoice item in e.NewItems)
                {
                    item.BusinessPartner1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoices1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner1, this))
                    {
                        item.BusinessPartner1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoices1", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoiceRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoiceRequest item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoiceRequests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoiceRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoiceRequests", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoiceRequests1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoiceRequest item in e.NewItems)
                {
                    item.InternalCustomer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoiceRequests1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoiceRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.InternalCustomer, this))
                    {
                        item.InternalCustomer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoiceRequests1", item);
                    }
                }
            }
        }
    
        private void FixupPaymentRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentRequest item in e.NewItems)
                {
                    item.PayBusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentRequests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.PayBusinessPartner, this))
                    {
                        item.PayBusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentRequests", item);
                    }
                }
            }
        }
    
        private void FixupPaymentRequests1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentRequest item in e.NewItems)
                {
                    item.ReceiveBusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentRequests1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReceiveBusinessPartner, this))
                    {
                        item.ReceiveBusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentRequests1", item);
                    }
                }
            }
        }
    
        private void FixupCommissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Commission item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Commissions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Commission item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Commissions", item);
                    }
                }
            }
        }
    
        private void FixupCommissions1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Commission item in e.NewItems)
                {
                    item.InternalBP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Commissions1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Commission item in e.OldItems)
                {
                    if (ReferenceEquals(item.InternalBP, this))
                    {
                        item.InternalBP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Commissions1", item);
                    }
                }
            }
        }
    
        private void FixupSHFECapitalDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SHFECapitalDetail item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SHFECapitalDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SHFECapitalDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SHFECapitalDetails", item);
                    }
                }
            }
        }
    
        private void FixupSHFECapitalDetails1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SHFECapitalDetail item in e.NewItems)
                {
                    item.BusinessPartner1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SHFECapitalDetails1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SHFECapitalDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner1, this))
                    {
                        item.BusinessPartner1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SHFECapitalDetails1", item);
                    }
                }
            }
        }
    
        private void FixupLMEPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LMEPosition item in e.NewItems)
                {
                    item.Agent = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LMEPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LMEPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Agent, this))
                    {
                        item.Agent = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LMEPositions", item);
                    }
                }
            }
        }
    
        private void FixupLMEPositions1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LMEPosition item in e.NewItems)
                {
                    item.Client = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LMEPositions1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LMEPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Client, this))
                    {
                        item.Client = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LMEPositions1", item);
                    }
                }
            }
        }
    
        private void FixupLMEPositions2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LMEPosition item in e.NewItems)
                {
                    item.InternalBP = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LMEPositions2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LMEPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.InternalBP, this))
                    {
                        item.InternalBP = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LMEPositions2", item);
                    }
                }
            }
        }
    
        private void FixupTDCapitalDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TDCapitalDetail item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TDCapitalDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TDCapitalDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TDCapitalDetails", item);
                    }
                }
            }
        }
    
        private void FixupTDCapitalDetails1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TDCapitalDetail item in e.NewItems)
                {
                    item.BusinessPartner1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TDCapitalDetails1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TDCapitalDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner1, this))
                    {
                        item.BusinessPartner1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TDCapitalDetails1", item);
                    }
                }
            }
        }
    
        private void FixupContracts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Contract item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Contracts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Contract item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Contracts", item);
                    }
                }
            }
        }
    
        private void FixupContracts1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Contract item in e.NewItems)
                {
                    item.InternalCustomer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Contracts1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Contract item in e.OldItems)
                {
                    if (ReferenceEquals(item.InternalCustomer, this))
                    {
                        item.InternalCustomer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Contracts1", item);
                    }
                }
            }
        }
    
        private void FixupLetterOfCredits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LetterOfCredit item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LetterOfCredits", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LetterOfCredit item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LetterOfCredits", item);
                    }
                }
            }
        }
    
        private void FixupLetterOfCredits1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LetterOfCredit item in e.NewItems)
                {
                    item.BusinessPartner1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LetterOfCredits1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LetterOfCredit item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner1, this))
                    {
                        item.BusinessPartner1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LetterOfCredits1", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries_1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries_1", item);
                    }
                }
            }
        }
    
        private void FixupWarehouseOuts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseOut item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseOuts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseOut item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseOuts", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPools(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPool item in e.NewItems)
                {
                    item.NotifyParty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPools", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPool item in e.OldItems)
                {
                    if (ReferenceEquals(item.NotifyParty, this))
                    {
                        item.NotifyParty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPools", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPools1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPool item in e.NewItems)
                {
                    item.Shipper = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPools1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Shipper, this))
                    {
                        item.Shipper = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPools1", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPools2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPool item in e.NewItems)
                {
                    item.ShippingParty = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPools2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPool item in e.OldItems)
                {
                    if (ReferenceEquals(item.ShippingParty, this))
                    {
                        item.ShippingParty = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPools2", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPools3(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPool item in e.NewItems)
                {
                    item.WarehouseProvider = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPools3", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPool item in e.OldItems)
                {
                    if (ReferenceEquals(item.WarehouseProvider, this))
                    {
                        item.WarehouseProvider = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPools3", item);
                    }
                }
            }
        }
    
        private void FixupLCAllocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LCAllocation item in e.NewItems)
                {
                    item.BusinessPartner = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LCAllocations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LCAllocation item in e.OldItems)
                {
                    if (ReferenceEquals(item.BusinessPartner, this))
                    {
                        item.BusinessPartner = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LCAllocations", item);
                    }
                }
            }
        }
    
        private void FixupLCAllocations1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LCAllocation item in e.NewItems)
                {
                    item.InternalCustomer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LCAllocations1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LCAllocation item in e.OldItems)
                {
                    if (ReferenceEquals(item.InternalCustomer, this))
                    {
                        item.InternalCustomer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LCAllocations1", item);
                    }
                }
            }
        }

        #endregion

    }
}
