//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(WarehouseOutLine))]
    [KnownType(typeof(DeliveryLine))]
    public partial class WarehouseOutDeliveryPerson: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<int> WarehouseOutLineId
        {
            get { return _warehouseOutLineId; }
            set
            {
                if (_warehouseOutLineId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseOutLineId", _warehouseOutLineId);
                    if (!IsDeserializing)
                    {
                        if (WarehouseOutLine != null && WarehouseOutLine.Id != value)
                        {
                            WarehouseOutLine = null;
                        }
                    }
                    _warehouseOutLineId = value;
                    OnPropertyChanged("WarehouseOutLineId");
                }
            }
        }
        private Nullable<int> _warehouseOutLineId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string IdentityCard
        {
            get { return _identityCard; }
            set
            {
                if (_identityCard != value)
                {
                    _identityCard = value;
                    OnPropertyChanged("IdentityCard");
                }
            }
        }
        private string _identityCard;
    
        [DataMember]
        public string VehicleNo
        {
            get { return _vehicleNo; }
            set
            {
                if (_vehicleNo != value)
                {
                    _vehicleNo = value;
                    OnPropertyChanged("VehicleNo");
                }
            }
        }
        private string _vehicleNo;
    
        [DataMember]
        public Nullable<decimal> DeliveryQuantity
        {
            get { return _deliveryQuantity; }
            set
            {
                if (_deliveryQuantity != value)
                {
                    _deliveryQuantity = value;
                    OnPropertyChanged("DeliveryQuantity");
                }
            }
        }
        private Nullable<decimal> _deliveryQuantity;
    
        [DataMember]
        public Nullable<int> DeliveryLineId
        {
            get { return _deliveryLineId; }
            set
            {
                if (_deliveryLineId != value)
                {
                    ChangeTracker.RecordOriginalValue("DeliveryLineId", _deliveryLineId);
                    if (!IsDeserializing)
                    {
                        if (DeliveryLine != null && DeliveryLine.Id != value)
                        {
                            DeliveryLine = null;
                        }
                    }
                    _deliveryLineId = value;
                    OnPropertyChanged("DeliveryLineId");
                }
            }
        }
        private Nullable<int> _deliveryLineId;
    
        [DataMember]
        public string Tel
        {
            get { return _tel; }
            set
            {
                if (_tel != value)
                {
                    _tel = value;
                    OnPropertyChanged("Tel");
                }
            }
        }
        private string _tel;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public WarehouseOutLine WarehouseOutLine
        {
            get { return _warehouseOutLine; }
            set
            {
                if (!ReferenceEquals(_warehouseOutLine, value))
                {
                    var previousValue = _warehouseOutLine;
                    _warehouseOutLine = value;
                    FixupWarehouseOutLine(previousValue);
                    OnNavigationPropertyChanged("WarehouseOutLine");
                }
            }
        }
        private WarehouseOutLine _warehouseOutLine;
    
        [DataMember]
        public DeliveryLine DeliveryLine
        {
            get { return _deliveryLine; }
            set
            {
                if (!ReferenceEquals(_deliveryLine, value))
                {
                    var previousValue = _deliveryLine;
                    _deliveryLine = value;
                    FixupDeliveryLine(previousValue);
                    OnNavigationPropertyChanged("DeliveryLine");
                }
            }
        }
        private DeliveryLine _deliveryLine;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            WarehouseOutLine = null;
            DeliveryLine = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupWarehouseOutLine(WarehouseOutLine previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOutDeliveryPersons.Contains(this))
            {
                previousValue.WarehouseOutDeliveryPersons.Remove(this);
            }
    
            if (WarehouseOutLine != null)
            {
                if (!WarehouseOutLine.WarehouseOutDeliveryPersons.Contains(this))
                {
                    WarehouseOutLine.WarehouseOutDeliveryPersons.Add(this);
                }
    
                WarehouseOutLineId = WarehouseOutLine.Id;
            }
            else if (!skipKeys)
            {
                WarehouseOutLineId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WarehouseOutLine")
                    && (ChangeTracker.OriginalValues["WarehouseOutLine"] == WarehouseOutLine))
                {
                    ChangeTracker.OriginalValues.Remove("WarehouseOutLine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WarehouseOutLine", previousValue);
                }
                if (WarehouseOutLine != null && !WarehouseOutLine.ChangeTracker.ChangeTrackingEnabled)
                {
                    WarehouseOutLine.StartTracking();
                }
            }
        }
    
        private void FixupDeliveryLine(DeliveryLine previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOutDeliveryPersons.Contains(this))
            {
                previousValue.WarehouseOutDeliveryPersons.Remove(this);
            }
    
            if (DeliveryLine != null)
            {
                if (!DeliveryLine.WarehouseOutDeliveryPersons.Contains(this))
                {
                    DeliveryLine.WarehouseOutDeliveryPersons.Add(this);
                }
    
                DeliveryLineId = DeliveryLine.Id;
            }
            else if (!skipKeys)
            {
                DeliveryLineId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DeliveryLine")
                    && (ChangeTracker.OriginalValues["DeliveryLine"] == DeliveryLine))
                {
                    ChangeTracker.OriginalValues.Remove("DeliveryLine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DeliveryLine", previousValue);
                }
                if (DeliveryLine != null && !DeliveryLine.ChangeTracker.ChangeTrackingEnabled)
                {
                    DeliveryLine.StartTracking();
                }
            }
        }

        #endregion

    }
}
