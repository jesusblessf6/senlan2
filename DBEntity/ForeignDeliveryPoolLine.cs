//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(CommodityType))]
    [KnownType(typeof(Country))]
    [KnownType(typeof(ForeignDeliveryPool))]
    [KnownType(typeof(Specification))]
    [KnownType(typeof(DeliveryLine))]
    public partial class ForeignDeliveryPoolLine: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CommodityTypeId
        {
            get { return _commodityTypeId; }
            set
            {
                if (_commodityTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityTypeId", _commodityTypeId);
                    if (!IsDeserializing)
                    {
                        if (CommodityType != null && CommodityType.Id != value)
                        {
                            CommodityType = null;
                        }
                    }
                    _commodityTypeId = value;
                    OnPropertyChanged("CommodityTypeId");
                }
            }
        }
        private Nullable<int> _commodityTypeId;
    
        [DataMember]
        public Nullable<int> SpecificationId
        {
            get { return _specificationId; }
            set
            {
                if (_specificationId != value)
                {
                    ChangeTracker.RecordOriginalValue("SpecificationId", _specificationId);
                    if (!IsDeserializing)
                    {
                        if (Specification != null && Specification.Id != value)
                        {
                            Specification = null;
                        }
                    }
                    _specificationId = value;
                    OnPropertyChanged("SpecificationId");
                }
            }
        }
        private Nullable<int> _specificationId;
    
        [DataMember]
        public Nullable<int> OriginCountryId
        {
            get { return _originCountryId; }
            set
            {
                if (_originCountryId != value)
                {
                    ChangeTracker.RecordOriginalValue("OriginCountryId", _originCountryId);
                    if (!IsDeserializing)
                    {
                        if (OriginCountry != null && OriginCountry.Id != value)
                        {
                            OriginCountry = null;
                        }
                    }
                    _originCountryId = value;
                    OnPropertyChanged("OriginCountryId");
                }
            }
        }
        private Nullable<int> _originCountryId;
    
        [DataMember]
        public Nullable<decimal> NetWeight
        {
            get { return _netWeight; }
            set
            {
                if (_netWeight != value)
                {
                    _netWeight = value;
                    OnPropertyChanged("NetWeight");
                }
            }
        }
        private Nullable<decimal> _netWeight;
    
        [DataMember]
        public Nullable<decimal> GrossWeight
        {
            get { return _grossWeight; }
            set
            {
                if (_grossWeight != value)
                {
                    _grossWeight = value;
                    OnPropertyChanged("GrossWeight");
                }
            }
        }
        private Nullable<decimal> _grossWeight;
    
        [DataMember]
        public int ForeignDeliveryPoolId
        {
            get { return _foreignDeliveryPoolId; }
            set
            {
                if (_foreignDeliveryPoolId != value)
                {
                    ChangeTracker.RecordOriginalValue("ForeignDeliveryPoolId", _foreignDeliveryPoolId);
                    if (!IsDeserializing)
                    {
                        if (ForeignDeliveryPool != null && ForeignDeliveryPool.Id != value)
                        {
                            ForeignDeliveryPool = null;
                        }
                    }
                    _foreignDeliveryPoolId = value;
                    OnPropertyChanged("ForeignDeliveryPoolId");
                }
            }
        }
        private int _foreignDeliveryPoolId;
    
        [DataMember]
        public Nullable<decimal> PackingQuantity
        {
            get { return _packingQuantity; }
            set
            {
                if (_packingQuantity != value)
                {
                    _packingQuantity = value;
                    OnPropertyChanged("PackingQuantity");
                }
            }
        }
        private Nullable<decimal> _packingQuantity;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<int> BrandId
        {
            get { return _brandId; }
            set
            {
                if (_brandId != value)
                {
                    ChangeTracker.RecordOriginalValue("BrandId", _brandId);
                    if (!IsDeserializing)
                    {
                        if (Brand != null && Brand.Id != value)
                        {
                            Brand = null;
                        }
                    }
                    _brandId = value;
                    OnPropertyChanged("BrandId");
                }
            }
        }
        private Nullable<int> _brandId;
    
        [DataMember]
        public string PBNo
        {
            get { return _pBNo; }
            set
            {
                if (_pBNo != value)
                {
                    _pBNo = value;
                    OnPropertyChanged("PBNo");
                }
            }
        }
        private string _pBNo;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Brand Brand
        {
            get { return _brand; }
            set
            {
                if (!ReferenceEquals(_brand, value))
                {
                    var previousValue = _brand;
                    _brand = value;
                    FixupBrand(previousValue);
                    OnNavigationPropertyChanged("Brand");
                }
            }
        }
        private Brand _brand;
    
        [DataMember]
        public CommodityType CommodityType
        {
            get { return _commodityType; }
            set
            {
                if (!ReferenceEquals(_commodityType, value))
                {
                    var previousValue = _commodityType;
                    _commodityType = value;
                    FixupCommodityType(previousValue);
                    OnNavigationPropertyChanged("CommodityType");
                }
            }
        }
        private CommodityType _commodityType;
    
        [DataMember]
        public Country OriginCountry
        {
            get { return _originCountry; }
            set
            {
                if (!ReferenceEquals(_originCountry, value))
                {
                    var previousValue = _originCountry;
                    _originCountry = value;
                    FixupOriginCountry(previousValue);
                    OnNavigationPropertyChanged("OriginCountry");
                }
            }
        }
        private Country _originCountry;
    
        [DataMember]
        public ForeignDeliveryPool ForeignDeliveryPool
        {
            get { return _foreignDeliveryPool; }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPool, value))
                {
                    var previousValue = _foreignDeliveryPool;
                    _foreignDeliveryPool = value;
                    FixupForeignDeliveryPool(previousValue);
                    OnNavigationPropertyChanged("ForeignDeliveryPool");
                }
            }
        }
        private ForeignDeliveryPool _foreignDeliveryPool;
    
        [DataMember]
        public Specification Specification
        {
            get { return _specification; }
            set
            {
                if (!ReferenceEquals(_specification, value))
                {
                    var previousValue = _specification;
                    _specification = value;
                    FixupSpecification(previousValue);
                    OnNavigationPropertyChanged("Specification");
                }
            }
        }
        private Specification _specification;
    
        [DataMember]
        public TrackableCollection<DeliveryLine> DeliveryLines
        {
            get
            {
                if (_deliveryLines == null)
                {
                    _deliveryLines = new TrackableCollection<DeliveryLine>();
                    _deliveryLines.CollectionChanged += FixupDeliveryLines;
                }
                return _deliveryLines;
            }
            set
            {
                if (!ReferenceEquals(_deliveryLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveryLines != null)
                    {
                        _deliveryLines.CollectionChanged -= FixupDeliveryLines;
                    }
                    _deliveryLines = value;
                    if (_deliveryLines != null)
                    {
                        _deliveryLines.CollectionChanged += FixupDeliveryLines;
                    }
                    OnNavigationPropertyChanged("DeliveryLines");
                }
            }
        }
        private TrackableCollection<DeliveryLine> _deliveryLines;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Brand = null;
            CommodityType = null;
            OriginCountry = null;
            ForeignDeliveryPool = null;
            Specification = null;
            DeliveryLines.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupBrand(Brand previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPoolLines.Contains(this))
            {
                previousValue.ForeignDeliveryPoolLines.Remove(this);
            }
    
            if (Brand != null)
            {
                if (!Brand.ForeignDeliveryPoolLines.Contains(this))
                {
                    Brand.ForeignDeliveryPoolLines.Add(this);
                }
    
                BrandId = Brand.Id;
            }
            else if (!skipKeys)
            {
                BrandId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Brand")
                    && (ChangeTracker.OriginalValues["Brand"] == Brand))
                {
                    ChangeTracker.OriginalValues.Remove("Brand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Brand", previousValue);
                }
                if (Brand != null && !Brand.ChangeTracker.ChangeTrackingEnabled)
                {
                    Brand.StartTracking();
                }
            }
        }
    
        private void FixupCommodityType(CommodityType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPoolLines.Contains(this))
            {
                previousValue.ForeignDeliveryPoolLines.Remove(this);
            }
    
            if (CommodityType != null)
            {
                if (!CommodityType.ForeignDeliveryPoolLines.Contains(this))
                {
                    CommodityType.ForeignDeliveryPoolLines.Add(this);
                }
    
                CommodityTypeId = CommodityType.Id;
            }
            else if (!skipKeys)
            {
                CommodityTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CommodityType")
                    && (ChangeTracker.OriginalValues["CommodityType"] == CommodityType))
                {
                    ChangeTracker.OriginalValues.Remove("CommodityType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CommodityType", previousValue);
                }
                if (CommodityType != null && !CommodityType.ChangeTracker.ChangeTrackingEnabled)
                {
                    CommodityType.StartTracking();
                }
            }
        }
    
        private void FixupOriginCountry(Country previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPoolLines.Contains(this))
            {
                previousValue.ForeignDeliveryPoolLines.Remove(this);
            }
    
            if (OriginCountry != null)
            {
                if (!OriginCountry.ForeignDeliveryPoolLines.Contains(this))
                {
                    OriginCountry.ForeignDeliveryPoolLines.Add(this);
                }
    
                OriginCountryId = OriginCountry.Id;
            }
            else if (!skipKeys)
            {
                OriginCountryId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OriginCountry")
                    && (ChangeTracker.OriginalValues["OriginCountry"] == OriginCountry))
                {
                    ChangeTracker.OriginalValues.Remove("OriginCountry");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OriginCountry", previousValue);
                }
                if (OriginCountry != null && !OriginCountry.ChangeTracker.ChangeTrackingEnabled)
                {
                    OriginCountry.StartTracking();
                }
            }
        }
    
        private void FixupForeignDeliveryPool(ForeignDeliveryPool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPoolLines.Contains(this))
            {
                previousValue.ForeignDeliveryPoolLines.Remove(this);
            }
    
            if (ForeignDeliveryPool != null)
            {
                if (!ForeignDeliveryPool.ForeignDeliveryPoolLines.Contains(this))
                {
                    ForeignDeliveryPool.ForeignDeliveryPoolLines.Add(this);
                }
    
                ForeignDeliveryPoolId = ForeignDeliveryPool.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ForeignDeliveryPool")
                    && (ChangeTracker.OriginalValues["ForeignDeliveryPool"] == ForeignDeliveryPool))
                {
                    ChangeTracker.OriginalValues.Remove("ForeignDeliveryPool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ForeignDeliveryPool", previousValue);
                }
                if (ForeignDeliveryPool != null && !ForeignDeliveryPool.ChangeTracker.ChangeTrackingEnabled)
                {
                    ForeignDeliveryPool.StartTracking();
                }
            }
        }
    
        private void FixupSpecification(Specification previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPoolLines.Contains(this))
            {
                previousValue.ForeignDeliveryPoolLines.Remove(this);
            }
    
            if (Specification != null)
            {
                if (!Specification.ForeignDeliveryPoolLines.Contains(this))
                {
                    Specification.ForeignDeliveryPoolLines.Add(this);
                }
    
                SpecificationId = Specification.Id;
            }
            else if (!skipKeys)
            {
                SpecificationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Specification")
                    && (ChangeTracker.OriginalValues["Specification"] == Specification))
                {
                    ChangeTracker.OriginalValues.Remove("Specification");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Specification", previousValue);
                }
                if (Specification != null && !Specification.ChangeTracker.ChangeTrackingEnabled)
                {
                    Specification.StartTracking();
                }
            }
        }
    
        private void FixupDeliveryLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DeliveryLine item in e.NewItems)
                {
                    item.ForeignDeliveryPoolLine = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DeliveryLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.ForeignDeliveryPoolLine, this))
                    {
                        item.ForeignDeliveryPoolLine = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DeliveryLines", item);
                    }
                }
            }
        }

        #endregion

    }
}
