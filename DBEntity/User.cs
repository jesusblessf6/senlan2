//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Role))]
    [KnownType(typeof(UserICLink))]
    [KnownType(typeof(UserCommodityLink))]
    [KnownType(typeof(ApprovalStage))]
    [KnownType(typeof(Log))]
    [KnownType(typeof(PaymentRequest))]
    [KnownType(typeof(LogMessage))]
    [KnownType(typeof(LogRegistration))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(VATInvoiceRequestLine))]
    [KnownType(typeof(LCAllocation))]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(Contract))]
    [KnownType(typeof(WeixinAlert))]
    public partial class User: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string LoginName
        {
            get { return _loginName; }
            set
            {
                if (_loginName != value)
                {
                    _loginName = value;
                    OnPropertyChanged("LoginName");
                }
            }
        }
        private string _loginName;
    
        [DataMember]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<int> RoleId
        {
            get { return _roleId; }
            set
            {
                if (_roleId != value)
                {
                    ChangeTracker.RecordOriginalValue("RoleId", _roleId);
                    if (!IsDeserializing)
                    {
                        if (Role != null && Role.Id != value)
                        {
                            Role = null;
                        }
                    }
                    _roleId = value;
                    OnPropertyChanged("RoleId");
                }
            }
        }
        private Nullable<int> _roleId;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public Nullable<bool> IsSales
        {
            get { return _isSales; }
            set
            {
                if (_isSales != value)
                {
                    _isSales = value;
                    OnPropertyChanged("IsSales");
                }
            }
        }
        private Nullable<bool> _isSales;
    
        [DataMember]
        public string WeixinOpenId
        {
            get { return _weixinOpenId; }
            set
            {
                if (_weixinOpenId != value)
                {
                    _weixinOpenId = value;
                    OnPropertyChanged("WeixinOpenId");
                }
            }
        }
        private string _weixinOpenId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Role Role
        {
            get { return _role; }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role;
                    _role = value;
                    FixupRole(previousValue);
                    OnNavigationPropertyChanged("Role");
                }
            }
        }
        private Role _role;
    
        [DataMember]
        public TrackableCollection<UserICLink> UserICLinks
        {
            get
            {
                if (_userICLinks == null)
                {
                    _userICLinks = new TrackableCollection<UserICLink>();
                    _userICLinks.CollectionChanged += FixupUserICLinks;
                }
                return _userICLinks;
            }
            set
            {
                if (!ReferenceEquals(_userICLinks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userICLinks != null)
                    {
                        _userICLinks.CollectionChanged -= FixupUserICLinks;
                    }
                    _userICLinks = value;
                    if (_userICLinks != null)
                    {
                        _userICLinks.CollectionChanged += FixupUserICLinks;
                    }
                    OnNavigationPropertyChanged("UserICLinks");
                }
            }
        }
        private TrackableCollection<UserICLink> _userICLinks;
    
        [DataMember]
        public TrackableCollection<UserCommodityLink> UserCommodityLinks
        {
            get
            {
                if (_userCommodityLinks == null)
                {
                    _userCommodityLinks = new TrackableCollection<UserCommodityLink>();
                    _userCommodityLinks.CollectionChanged += FixupUserCommodityLinks;
                }
                return _userCommodityLinks;
            }
            set
            {
                if (!ReferenceEquals(_userCommodityLinks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userCommodityLinks != null)
                    {
                        _userCommodityLinks.CollectionChanged -= FixupUserCommodityLinks;
                    }
                    _userCommodityLinks = value;
                    if (_userCommodityLinks != null)
                    {
                        _userCommodityLinks.CollectionChanged += FixupUserCommodityLinks;
                    }
                    OnNavigationPropertyChanged("UserCommodityLinks");
                }
            }
        }
        private TrackableCollection<UserCommodityLink> _userCommodityLinks;
    
        [DataMember]
        public TrackableCollection<ApprovalStage> ApprovalStages
        {
            get
            {
                if (_approvalStages == null)
                {
                    _approvalStages = new TrackableCollection<ApprovalStage>();
                    _approvalStages.CollectionChanged += FixupApprovalStages;
                }
                return _approvalStages;
            }
            set
            {
                if (!ReferenceEquals(_approvalStages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_approvalStages != null)
                    {
                        _approvalStages.CollectionChanged -= FixupApprovalStages;
                    }
                    _approvalStages = value;
                    if (_approvalStages != null)
                    {
                        _approvalStages.CollectionChanged += FixupApprovalStages;
                    }
                    OnNavigationPropertyChanged("ApprovalStages");
                }
            }
        }
        private TrackableCollection<ApprovalStage> _approvalStages;
    
        [DataMember]
        public TrackableCollection<Log> Logs
        {
            get
            {
                if (_logs == null)
                {
                    _logs = new TrackableCollection<Log>();
                    _logs.CollectionChanged += FixupLogs;
                }
                return _logs;
            }
            set
            {
                if (!ReferenceEquals(_logs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_logs != null)
                    {
                        _logs.CollectionChanged -= FixupLogs;
                    }
                    _logs = value;
                    if (_logs != null)
                    {
                        _logs.CollectionChanged += FixupLogs;
                    }
                    OnNavigationPropertyChanged("Logs");
                }
            }
        }
        private TrackableCollection<Log> _logs;
    
        [DataMember]
        public TrackableCollection<PaymentRequest> PaymentRequests
        {
            get
            {
                if (_paymentRequests == null)
                {
                    _paymentRequests = new TrackableCollection<PaymentRequest>();
                    _paymentRequests.CollectionChanged += FixupPaymentRequests;
                }
                return _paymentRequests;
            }
            set
            {
                if (!ReferenceEquals(_paymentRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged -= FixupPaymentRequests;
                    }
                    _paymentRequests = value;
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged += FixupPaymentRequests;
                    }
                    OnNavigationPropertyChanged("PaymentRequests");
                }
            }
        }
        private TrackableCollection<PaymentRequest> _paymentRequests;
    
        [DataMember]
        public TrackableCollection<LogMessage> LogMessages
        {
            get
            {
                if (_logMessages == null)
                {
                    _logMessages = new TrackableCollection<LogMessage>();
                    _logMessages.CollectionChanged += FixupLogMessages;
                }
                return _logMessages;
            }
            set
            {
                if (!ReferenceEquals(_logMessages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_logMessages != null)
                    {
                        _logMessages.CollectionChanged -= FixupLogMessages;
                    }
                    _logMessages = value;
                    if (_logMessages != null)
                    {
                        _logMessages.CollectionChanged += FixupLogMessages;
                    }
                    OnNavigationPropertyChanged("LogMessages");
                }
            }
        }
        private TrackableCollection<LogMessage> _logMessages;
    
        [DataMember]
        public TrackableCollection<LogRegistration> LogRegistrations
        {
            get
            {
                if (_logRegistrations == null)
                {
                    _logRegistrations = new TrackableCollection<LogRegistration>();
                    _logRegistrations.CollectionChanged += FixupLogRegistrations;
                }
                return _logRegistrations;
            }
            set
            {
                if (!ReferenceEquals(_logRegistrations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_logRegistrations != null)
                    {
                        _logRegistrations.CollectionChanged -= FixupLogRegistrations;
                    }
                    _logRegistrations = value;
                    if (_logRegistrations != null)
                    {
                        _logRegistrations.CollectionChanged += FixupLogRegistrations;
                    }
                    OnNavigationPropertyChanged("LogRegistrations");
                }
            }
        }
        private TrackableCollection<LogRegistration> _logRegistrations;
    
        [DataMember]
        public TrackableCollection<Quota> Quotas
        {
            get
            {
                if (_quotas == null)
                {
                    _quotas = new TrackableCollection<Quota>();
                    _quotas.CollectionChanged += FixupQuotas;
                }
                return _quotas;
            }
            set
            {
                if (!ReferenceEquals(_quotas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged -= FixupQuotas;
                    }
                    _quotas = value;
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged += FixupQuotas;
                    }
                    OnNavigationPropertyChanged("Quotas");
                }
            }
        }
        private TrackableCollection<Quota> _quotas;
    
        [DataMember]
        public TrackableCollection<VATInvoiceRequestLine> VATInvoiceRequestLines
        {
            get
            {
                if (_vATInvoiceRequestLines == null)
                {
                    _vATInvoiceRequestLines = new TrackableCollection<VATInvoiceRequestLine>();
                    _vATInvoiceRequestLines.CollectionChanged += FixupVATInvoiceRequestLines;
                }
                return _vATInvoiceRequestLines;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoiceRequestLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoiceRequestLines != null)
                    {
                        _vATInvoiceRequestLines.CollectionChanged -= FixupVATInvoiceRequestLines;
                    }
                    _vATInvoiceRequestLines = value;
                    if (_vATInvoiceRequestLines != null)
                    {
                        _vATInvoiceRequestLines.CollectionChanged += FixupVATInvoiceRequestLines;
                    }
                    OnNavigationPropertyChanged("VATInvoiceRequestLines");
                }
            }
        }
        private TrackableCollection<VATInvoiceRequestLine> _vATInvoiceRequestLines;
    
        [DataMember]
        public TrackableCollection<LCAllocation> LCAllocations
        {
            get
            {
                if (_lCAllocations == null)
                {
                    _lCAllocations = new TrackableCollection<LCAllocation>();
                    _lCAllocations.CollectionChanged += FixupLCAllocations;
                }
                return _lCAllocations;
            }
            set
            {
                if (!ReferenceEquals(_lCAllocations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lCAllocations != null)
                    {
                        _lCAllocations.CollectionChanged -= FixupLCAllocations;
                    }
                    _lCAllocations = value;
                    if (_lCAllocations != null)
                    {
                        _lCAllocations.CollectionChanged += FixupLCAllocations;
                    }
                    OnNavigationPropertyChanged("LCAllocations");
                }
            }
        }
        private TrackableCollection<LCAllocation> _lCAllocations;
    
        [DataMember]
        public TrackableCollection<BusinessPartner> BusinessPartners
        {
            get
            {
                if (_businessPartners == null)
                {
                    _businessPartners = new TrackableCollection<BusinessPartner>();
                    _businessPartners.CollectionChanged += FixupBusinessPartners;
                }
                return _businessPartners;
            }
            set
            {
                if (!ReferenceEquals(_businessPartners, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_businessPartners != null)
                    {
                        _businessPartners.CollectionChanged -= FixupBusinessPartners;
                    }
                    _businessPartners = value;
                    if (_businessPartners != null)
                    {
                        _businessPartners.CollectionChanged += FixupBusinessPartners;
                    }
                    OnNavigationPropertyChanged("BusinessPartners");
                }
            }
        }
        private TrackableCollection<BusinessPartner> _businessPartners;
    
        [DataMember]
        public TrackableCollection<Contract> Contracts
        {
            get
            {
                if (_contracts == null)
                {
                    _contracts = new TrackableCollection<Contract>();
                    _contracts.CollectionChanged += FixupContracts;
                }
                return _contracts;
            }
            set
            {
                if (!ReferenceEquals(_contracts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_contracts != null)
                    {
                        _contracts.CollectionChanged -= FixupContracts;
                    }
                    _contracts = value;
                    if (_contracts != null)
                    {
                        _contracts.CollectionChanged += FixupContracts;
                    }
                    OnNavigationPropertyChanged("Contracts");
                }
            }
        }
        private TrackableCollection<Contract> _contracts;
    
        [DataMember]
        public TrackableCollection<WeixinAlert> WeixinAlerts
        {
            get
            {
                if (_weixinAlerts == null)
                {
                    _weixinAlerts = new TrackableCollection<WeixinAlert>();
                    _weixinAlerts.CollectionChanged += FixupWeixinAlerts;
                }
                return _weixinAlerts;
            }
            set
            {
                if (!ReferenceEquals(_weixinAlerts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_weixinAlerts != null)
                    {
                        _weixinAlerts.CollectionChanged -= FixupWeixinAlerts;
                    }
                    _weixinAlerts = value;
                    if (_weixinAlerts != null)
                    {
                        _weixinAlerts.CollectionChanged += FixupWeixinAlerts;
                    }
                    OnNavigationPropertyChanged("WeixinAlerts");
                }
            }
        }
        private TrackableCollection<WeixinAlert> _weixinAlerts;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Role = null;
            UserICLinks.Clear();
            UserCommodityLinks.Clear();
            ApprovalStages.Clear();
            Logs.Clear();
            PaymentRequests.Clear();
            LogMessages.Clear();
            LogRegistrations.Clear();
            Quotas.Clear();
            VATInvoiceRequestLines.Clear();
            LCAllocations.Clear();
            BusinessPartners.Clear();
            Contracts.Clear();
            WeixinAlerts.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupRole(Role previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Role != null)
            {
                if (!Role.Users.Contains(this))
                {
                    Role.Users.Add(this);
                }
    
                RoleId = Role.Id;
            }
            else if (!skipKeys)
            {
                RoleId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Role")
                    && (ChangeTracker.OriginalValues["Role"] == Role))
                {
                    ChangeTracker.OriginalValues.Remove("Role");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Role", previousValue);
                }
                if (Role != null && !Role.ChangeTracker.ChangeTrackingEnabled)
                {
                    Role.StartTracking();
                }
            }
        }
    
        private void FixupUserICLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserICLink item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserICLinks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserICLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserICLinks", item);
                    }
                }
            }
        }
    
        private void FixupUserCommodityLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserCommodityLink item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserCommodityLinks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserCommodityLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserCommodityLinks", item);
                    }
                }
            }
        }
    
        private void FixupApprovalStages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ApprovalStage item in e.NewItems)
                {
                    item.ApprovalUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ApprovalStages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ApprovalStage item in e.OldItems)
                {
                    if (ReferenceEquals(item.ApprovalUser, this))
                    {
                        item.ApprovalUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ApprovalStages", item);
                    }
                }
            }
        }
    
        private void FixupLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Log item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Logs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Log item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Logs", item);
                    }
                }
            }
        }
    
        private void FixupPaymentRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentRequest item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentRequests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentRequests", item);
                    }
                }
            }
        }
    
        private void FixupLogMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LogMessage item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LogMessages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LogMessage item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LogMessages", item);
                    }
                }
            }
        }
    
        private void FixupLogRegistrations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LogRegistration item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LogRegistrations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LogRegistration item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LogRegistrations", item);
                    }
                }
            }
        }
    
        private void FixupQuotas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Quota item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Quotas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Quota item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Quotas", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoiceRequestLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoiceRequestLine item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoiceRequestLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoiceRequestLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoiceRequestLines", item);
                    }
                }
            }
        }
    
        private void FixupLCAllocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LCAllocation item in e.NewItems)
                {
                    item.Responsor = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LCAllocations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LCAllocation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Responsor, this))
                    {
                        item.Responsor = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LCAllocations", item);
                    }
                }
            }
        }
    
        private void FixupBusinessPartners(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BusinessPartner item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BusinessPartners", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BusinessPartner item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BusinessPartners", item);
                    }
                }
            }
        }
    
        private void FixupContracts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Contract item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Contracts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Contract item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Contracts", item);
                    }
                }
            }
        }
    
        private void FixupWeixinAlerts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WeixinAlert item in e.NewItems)
                {
                    item.User = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WeixinAlerts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WeixinAlert item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WeixinAlerts", item);
                    }
                }
            }
        }

        #endregion

    }
}
