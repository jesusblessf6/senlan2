//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BankAccount))]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(PaymentMean))]
    [KnownType(typeof(PaymentUsage))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(User))]
    [KnownType(typeof(FundFlow))]
    [KnownType(typeof(Approval))]
    [KnownType(typeof(Document))]
    [KnownType(typeof(LetterOfCredit))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(Bank))]
    [KnownType(typeof(CommercialInvoice))]
    public partial class PaymentRequest: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedBy", _createdBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                    }
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<int> QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private Nullable<int> _quotaId;
    
        [DataMember]
        public Nullable<System.DateTime> RequestDate
        {
            get { return _requestDate; }
            set
            {
                if (_requestDate != value)
                {
                    _requestDate = value;
                    OnPropertyChanged("RequestDate");
                }
            }
        }
        private Nullable<System.DateTime> _requestDate;
    
        [DataMember]
        public Nullable<decimal> RequestAmount
        {
            get { return _requestAmount; }
            set
            {
                if (_requestAmount != value)
                {
                    _requestAmount = value;
                    OnPropertyChanged("RequestAmount");
                }
            }
        }
        private Nullable<decimal> _requestAmount;
    
        [DataMember]
        public Nullable<int> CurrencyId
        {
            get { return _currencyId; }
            set
            {
                if (_currencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CurrencyId", _currencyId);
                    if (!IsDeserializing)
                    {
                        if (Currency != null && Currency.Id != value)
                        {
                            Currency = null;
                        }
                    }
                    _currencyId = value;
                    OnPropertyChanged("CurrencyId");
                }
            }
        }
        private Nullable<int> _currencyId;
    
        [DataMember]
        public int PayBPId
        {
            get { return _payBPId; }
            set
            {
                if (_payBPId != value)
                {
                    ChangeTracker.RecordOriginalValue("PayBPId", _payBPId);
                    if (!IsDeserializing)
                    {
                        if (PayBusinessPartner != null && PayBusinessPartner.Id != value)
                        {
                            PayBusinessPartner = null;
                        }
                    }
                    _payBPId = value;
                    OnPropertyChanged("PayBPId");
                }
            }
        }
        private int _payBPId;
    
        [DataMember]
        public int ReceiveBPId
        {
            get { return _receiveBPId; }
            set
            {
                if (_receiveBPId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReceiveBPId", _receiveBPId);
                    if (!IsDeserializing)
                    {
                        if (ReceiveBusinessPartner != null && ReceiveBusinessPartner.Id != value)
                        {
                            ReceiveBusinessPartner = null;
                        }
                    }
                    _receiveBPId = value;
                    OnPropertyChanged("ReceiveBPId");
                }
            }
        }
        private int _receiveBPId;
    
        [DataMember]
        public Nullable<int> PayBankAccountId
        {
            get { return _payBankAccountId; }
            set
            {
                if (_payBankAccountId != value)
                {
                    ChangeTracker.RecordOriginalValue("PayBankAccountId", _payBankAccountId);
                    if (!IsDeserializing)
                    {
                        if (PayBankAccount != null && PayBankAccount.Id != value)
                        {
                            PayBankAccount = null;
                        }
                    }
                    _payBankAccountId = value;
                    OnPropertyChanged("PayBankAccountId");
                }
            }
        }
        private Nullable<int> _payBankAccountId;
    
        [DataMember]
        public Nullable<int> ReceiveBankAccountId
        {
            get { return _receiveBankAccountId; }
            set
            {
                if (_receiveBankAccountId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReceiveBankAccountId", _receiveBankAccountId);
                    if (!IsDeserializing)
                    {
                        if (ReceiveBankAccount != null && ReceiveBankAccount.Id != value)
                        {
                            ReceiveBankAccount = null;
                        }
                    }
                    _receiveBankAccountId = value;
                    OnPropertyChanged("ReceiveBankAccountId");
                }
            }
        }
        private Nullable<int> _receiveBankAccountId;
    
        [DataMember]
        public Nullable<int> PaymentMeanId
        {
            get { return _paymentMeanId; }
            set
            {
                if (_paymentMeanId != value)
                {
                    ChangeTracker.RecordOriginalValue("PaymentMeanId", _paymentMeanId);
                    if (!IsDeserializing)
                    {
                        if (PaymentMean != null && PaymentMean.Id != value)
                        {
                            PaymentMean = null;
                        }
                    }
                    _paymentMeanId = value;
                    OnPropertyChanged("PaymentMeanId");
                }
            }
        }
        private Nullable<int> _paymentMeanId;
    
        [DataMember]
        public Nullable<int> PaymentUsageId
        {
            get { return _paymentUsageId; }
            set
            {
                if (_paymentUsageId != value)
                {
                    ChangeTracker.RecordOriginalValue("PaymentUsageId", _paymentUsageId);
                    if (!IsDeserializing)
                    {
                        if (PaymentUsage != null && PaymentUsage.Id != value)
                        {
                            PaymentUsage = null;
                        }
                    }
                    _paymentUsageId = value;
                    OnPropertyChanged("PaymentUsageId");
                }
            }
        }
        private Nullable<int> _paymentUsageId;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public bool IsPaid
        {
            get { return _isPaid; }
            set
            {
                if (_isPaid != value)
                {
                    _isPaid = value;
                    OnPropertyChanged("IsPaid");
                }
            }
        }
        private bool _isPaid;
    
        [DataMember]
        public Nullable<int> ApproveStatus
        {
            get { return _approveStatus; }
            set
            {
                if (_approveStatus != value)
                {
                    _approveStatus = value;
                    OnPropertyChanged("ApproveStatus");
                }
            }
        }
        private Nullable<int> _approveStatus;
    
        [DataMember]
        public Nullable<int> ApprovalId
        {
            get { return _approvalId; }
            set
            {
                if (_approvalId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalId", _approvalId);
                    if (!IsDeserializing)
                    {
                        if (Approval != null && Approval.Id != value)
                        {
                            Approval = null;
                        }
                    }
                    _approvalId = value;
                    OnPropertyChanged("ApprovalId");
                }
            }
        }
        private Nullable<int> _approvalId;
    
        [DataMember]
        public Nullable<int> ApprovalStageIndex
        {
            get { return _approvalStageIndex; }
            set
            {
                if (_approvalStageIndex != value)
                {
                    _approvalStageIndex = value;
                    OnPropertyChanged("ApprovalStageIndex");
                }
            }
        }
        private Nullable<int> _approvalStageIndex;
    
        [DataMember]
        public Nullable<int> DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentId", _documentId);
                    if (!IsDeserializing)
                    {
                        if (Document != null && Document.Id != value)
                        {
                            Document = null;
                        }
                    }
                    _documentId = value;
                    OnPropertyChanged("DocumentId");
                }
            }
        }
        private Nullable<int> _documentId;
    
        [DataMember]
        public string RejectReason
        {
            get { return _rejectReason; }
            set
            {
                if (_rejectReason != value)
                {
                    _rejectReason = value;
                    OnPropertyChanged("RejectReason");
                }
            }
        }
        private string _rejectReason;
    
        [DataMember]
        public Nullable<int> IntermediaryBankId
        {
            get { return _intermediaryBankId; }
            set
            {
                if (_intermediaryBankId != value)
                {
                    ChangeTracker.RecordOriginalValue("IntermediaryBankId", _intermediaryBankId);
                    if (!IsDeserializing)
                    {
                        if (Bank != null && Bank.Id != value)
                        {
                            Bank = null;
                        }
                    }
                    _intermediaryBankId = value;
                    OnPropertyChanged("IntermediaryBankId");
                }
            }
        }
        private Nullable<int> _intermediaryBankId;
    
        [DataMember]
        public Nullable<int> InvoiceId
        {
            get { return _invoiceId; }
            set
            {
                if (_invoiceId != value)
                {
                    ChangeTracker.RecordOriginalValue("InvoiceId", _invoiceId);
                    if (!IsDeserializing)
                    {
                        if (CommercialInvoice != null && CommercialInvoice.Id != value)
                        {
                            CommercialInvoice = null;
                        }
                    }
                    _invoiceId = value;
                    OnPropertyChanged("InvoiceId");
                }
            }
        }
        private Nullable<int> _invoiceId;
    
        [DataMember]
        public string PaymentRequestNo
        {
            get { return _paymentRequestNo; }
            set
            {
                if (_paymentRequestNo != value)
                {
                    _paymentRequestNo = value;
                    OnPropertyChanged("PaymentRequestNo");
                }
            }
        }
        private string _paymentRequestNo;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BankAccount PayBankAccount
        {
            get { return _payBankAccount; }
            set
            {
                if (!ReferenceEquals(_payBankAccount, value))
                {
                    var previousValue = _payBankAccount;
                    _payBankAccount = value;
                    FixupPayBankAccount(previousValue);
                    OnNavigationPropertyChanged("PayBankAccount");
                }
            }
        }
        private BankAccount _payBankAccount;
    
        [DataMember]
        public BankAccount ReceiveBankAccount
        {
            get { return _receiveBankAccount; }
            set
            {
                if (!ReferenceEquals(_receiveBankAccount, value))
                {
                    var previousValue = _receiveBankAccount;
                    _receiveBankAccount = value;
                    FixupReceiveBankAccount(previousValue);
                    OnNavigationPropertyChanged("ReceiveBankAccount");
                }
            }
        }
        private BankAccount _receiveBankAccount;
    
        [DataMember]
        public BusinessPartner PayBusinessPartner
        {
            get { return _payBusinessPartner; }
            set
            {
                if (!ReferenceEquals(_payBusinessPartner, value))
                {
                    var previousValue = _payBusinessPartner;
                    _payBusinessPartner = value;
                    FixupPayBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("PayBusinessPartner");
                }
            }
        }
        private BusinessPartner _payBusinessPartner;
    
        [DataMember]
        public BusinessPartner ReceiveBusinessPartner
        {
            get { return _receiveBusinessPartner; }
            set
            {
                if (!ReferenceEquals(_receiveBusinessPartner, value))
                {
                    var previousValue = _receiveBusinessPartner;
                    _receiveBusinessPartner = value;
                    FixupReceiveBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("ReceiveBusinessPartner");
                }
            }
        }
        private BusinessPartner _receiveBusinessPartner;
    
        [DataMember]
        public Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                    OnNavigationPropertyChanged("Currency");
                }
            }
        }
        private Currency _currency;
    
        [DataMember]
        public PaymentMean PaymentMean
        {
            get { return _paymentMean; }
            set
            {
                if (!ReferenceEquals(_paymentMean, value))
                {
                    var previousValue = _paymentMean;
                    _paymentMean = value;
                    FixupPaymentMean(previousValue);
                    OnNavigationPropertyChanged("PaymentMean");
                }
            }
        }
        private PaymentMean _paymentMean;
    
        [DataMember]
        public PaymentUsage PaymentUsage
        {
            get { return _paymentUsage; }
            set
            {
                if (!ReferenceEquals(_paymentUsage, value))
                {
                    var previousValue = _paymentUsage;
                    _paymentUsage = value;
                    FixupPaymentUsage(previousValue);
                    OnNavigationPropertyChanged("PaymentUsage");
                }
            }
        }
        private PaymentUsage _paymentUsage;
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TrackableCollection<FundFlow> FundFlows
        {
            get
            {
                if (_fundFlows == null)
                {
                    _fundFlows = new TrackableCollection<FundFlow>();
                    _fundFlows.CollectionChanged += FixupFundFlows;
                }
                return _fundFlows;
            }
            set
            {
                if (!ReferenceEquals(_fundFlows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged -= FixupFundFlows;
                    }
                    _fundFlows = value;
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged += FixupFundFlows;
                    }
                    OnNavigationPropertyChanged("FundFlows");
                }
            }
        }
        private TrackableCollection<FundFlow> _fundFlows;
    
        [DataMember]
        public Approval Approval
        {
            get { return _approval; }
            set
            {
                if (!ReferenceEquals(_approval, value))
                {
                    var previousValue = _approval;
                    _approval = value;
                    FixupApproval(previousValue);
                    OnNavigationPropertyChanged("Approval");
                }
            }
        }
        private Approval _approval;
    
        [DataMember]
        public Document Document
        {
            get { return _document; }
            set
            {
                if (!ReferenceEquals(_document, value))
                {
                    var previousValue = _document;
                    _document = value;
                    FixupDocument(previousValue);
                    OnNavigationPropertyChanged("Document");
                }
            }
        }
        private Document _document;
    
        [DataMember]
        public TrackableCollection<LetterOfCredit> LetterOfCredits
        {
            get
            {
                if (_letterOfCredits == null)
                {
                    _letterOfCredits = new TrackableCollection<LetterOfCredit>();
                    _letterOfCredits.CollectionChanged += FixupLetterOfCredits;
                }
                return _letterOfCredits;
            }
            set
            {
                if (!ReferenceEquals(_letterOfCredits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_letterOfCredits != null)
                    {
                        _letterOfCredits.CollectionChanged -= FixupLetterOfCredits;
                    }
                    _letterOfCredits = value;
                    if (_letterOfCredits != null)
                    {
                        _letterOfCredits.CollectionChanged += FixupLetterOfCredits;
                    }
                    OnNavigationPropertyChanged("LetterOfCredits");
                }
            }
        }
        private TrackableCollection<LetterOfCredit> _letterOfCredits;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries
        {
            get
            {
                if (_deliveries == null)
                {
                    _deliveries = new TrackableCollection<Delivery>();
                    _deliveries.CollectionChanged += FixupDeliveries;
                }
                return _deliveries;
            }
            set
            {
                if (!ReferenceEquals(_deliveries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged -= FixupDeliveries;
                    }
                    _deliveries = value;
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged += FixupDeliveries;
                    }
                    OnNavigationPropertyChanged("Deliveries");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries;
    
        [DataMember]
        public Bank Bank
        {
            get { return _bank; }
            set
            {
                if (!ReferenceEquals(_bank, value))
                {
                    var previousValue = _bank;
                    _bank = value;
                    FixupBank(previousValue);
                    OnNavigationPropertyChanged("Bank");
                }
            }
        }
        private Bank _bank;
    
        [DataMember]
        public CommercialInvoice CommercialInvoice
        {
            get { return _commercialInvoice; }
            set
            {
                if (!ReferenceEquals(_commercialInvoice, value))
                {
                    var previousValue = _commercialInvoice;
                    _commercialInvoice = value;
                    FixupCommercialInvoice(previousValue);
                    OnNavigationPropertyChanged("CommercialInvoice");
                }
            }
        }
        private CommercialInvoice _commercialInvoice;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PayBankAccount = null;
            ReceiveBankAccount = null;
            PayBusinessPartner = null;
            ReceiveBusinessPartner = null;
            Currency = null;
            PaymentMean = null;
            PaymentUsage = null;
            Quota = null;
            User = null;
            FundFlows.Clear();
            Approval = null;
            Document = null;
            LetterOfCredits.Clear();
            Deliveries.Clear();
            Bank = null;
            CommercialInvoice = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPayBankAccount(BankAccount previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PayPaymentRequests.Contains(this))
            {
                previousValue.PayPaymentRequests.Remove(this);
            }
    
            if (PayBankAccount != null)
            {
                if (!PayBankAccount.PayPaymentRequests.Contains(this))
                {
                    PayBankAccount.PayPaymentRequests.Add(this);
                }
    
                PayBankAccountId = PayBankAccount.Id;
            }
            else if (!skipKeys)
            {
                PayBankAccountId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PayBankAccount")
                    && (ChangeTracker.OriginalValues["PayBankAccount"] == PayBankAccount))
                {
                    ChangeTracker.OriginalValues.Remove("PayBankAccount");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PayBankAccount", previousValue);
                }
                if (PayBankAccount != null && !PayBankAccount.ChangeTracker.ChangeTrackingEnabled)
                {
                    PayBankAccount.StartTracking();
                }
            }
        }
    
        private void FixupReceiveBankAccount(BankAccount previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ReceivePaymentRequests.Contains(this))
            {
                previousValue.ReceivePaymentRequests.Remove(this);
            }
    
            if (ReceiveBankAccount != null)
            {
                if (!ReceiveBankAccount.ReceivePaymentRequests.Contains(this))
                {
                    ReceiveBankAccount.ReceivePaymentRequests.Add(this);
                }
    
                ReceiveBankAccountId = ReceiveBankAccount.Id;
            }
            else if (!skipKeys)
            {
                ReceiveBankAccountId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ReceiveBankAccount")
                    && (ChangeTracker.OriginalValues["ReceiveBankAccount"] == ReceiveBankAccount))
                {
                    ChangeTracker.OriginalValues.Remove("ReceiveBankAccount");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ReceiveBankAccount", previousValue);
                }
                if (ReceiveBankAccount != null && !ReceiveBankAccount.ChangeTracker.ChangeTrackingEnabled)
                {
                    ReceiveBankAccount.StartTracking();
                }
            }
        }
    
        private void FixupPayBusinessPartner(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (PayBusinessPartner != null)
            {
                if (!PayBusinessPartner.PaymentRequests.Contains(this))
                {
                    PayBusinessPartner.PaymentRequests.Add(this);
                }
    
                PayBPId = PayBusinessPartner.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PayBusinessPartner")
                    && (ChangeTracker.OriginalValues["PayBusinessPartner"] == PayBusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("PayBusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PayBusinessPartner", previousValue);
                }
                if (PayBusinessPartner != null && !PayBusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    PayBusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupReceiveBusinessPartner(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests1.Contains(this))
            {
                previousValue.PaymentRequests1.Remove(this);
            }
    
            if (ReceiveBusinessPartner != null)
            {
                if (!ReceiveBusinessPartner.PaymentRequests1.Contains(this))
                {
                    ReceiveBusinessPartner.PaymentRequests1.Add(this);
                }
    
                ReceiveBPId = ReceiveBusinessPartner.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ReceiveBusinessPartner")
                    && (ChangeTracker.OriginalValues["ReceiveBusinessPartner"] == ReceiveBusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("ReceiveBusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ReceiveBusinessPartner", previousValue);
                }
                if (ReceiveBusinessPartner != null && !ReceiveBusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    ReceiveBusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupCurrency(Currency previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.PaymentRequests.Contains(this))
                {
                    Currency.PaymentRequests.Add(this);
                }
    
                CurrencyId = Currency.Id;
            }
            else if (!skipKeys)
            {
                CurrencyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Currency")
                    && (ChangeTracker.OriginalValues["Currency"] == Currency))
                {
                    ChangeTracker.OriginalValues.Remove("Currency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Currency", previousValue);
                }
                if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
                {
                    Currency.StartTracking();
                }
            }
        }
    
        private void FixupPaymentMean(PaymentMean previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (PaymentMean != null)
            {
                if (!PaymentMean.PaymentRequests.Contains(this))
                {
                    PaymentMean.PaymentRequests.Add(this);
                }
    
                PaymentMeanId = PaymentMean.Id;
            }
            else if (!skipKeys)
            {
                PaymentMeanId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentMean")
                    && (ChangeTracker.OriginalValues["PaymentMean"] == PaymentMean))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentMean");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentMean", previousValue);
                }
                if (PaymentMean != null && !PaymentMean.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentMean.StartTracking();
                }
            }
        }
    
        private void FixupPaymentUsage(PaymentUsage previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (PaymentUsage != null)
            {
                if (!PaymentUsage.PaymentRequests.Contains(this))
                {
                    PaymentUsage.PaymentRequests.Add(this);
                }
    
                PaymentUsageId = PaymentUsage.Id;
            }
            else if (!skipKeys)
            {
                PaymentUsageId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentUsage")
                    && (ChangeTracker.OriginalValues["PaymentUsage"] == PaymentUsage))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentUsage");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentUsage", previousValue);
                }
                if (PaymentUsage != null && !PaymentUsage.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentUsage.StartTracking();
                }
            }
        }
    
        private void FixupQuota(Quota previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.PaymentRequests.Contains(this))
                {
                    Quota.PaymentRequests.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            else if (!skipKeys)
            {
                QuotaId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.PaymentRequests.Contains(this))
                {
                    User.PaymentRequests.Add(this);
                }
    
                CreatedBy = User.Id;
            }
            else if (!skipKeys)
            {
                CreatedBy = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupApproval(Approval previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (Approval != null)
            {
                if (!Approval.PaymentRequests.Contains(this))
                {
                    Approval.PaymentRequests.Add(this);
                }
    
                ApprovalId = Approval.Id;
            }
            else if (!skipKeys)
            {
                ApprovalId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Approval")
                    && (ChangeTracker.OriginalValues["Approval"] == Approval))
                {
                    ChangeTracker.OriginalValues.Remove("Approval");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Approval", previousValue);
                }
                if (Approval != null && !Approval.ChangeTracker.ChangeTrackingEnabled)
                {
                    Approval.StartTracking();
                }
            }
        }
    
        private void FixupDocument(Document previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (Document != null)
            {
                if (!Document.PaymentRequests.Contains(this))
                {
                    Document.PaymentRequests.Add(this);
                }
    
                DocumentId = Document.Id;
            }
            else if (!skipKeys)
            {
                DocumentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Document")
                    && (ChangeTracker.OriginalValues["Document"] == Document))
                {
                    ChangeTracker.OriginalValues.Remove("Document");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Document", previousValue);
                }
                if (Document != null && !Document.ChangeTracker.ChangeTrackingEnabled)
                {
                    Document.StartTracking();
                }
            }
        }
    
        private void FixupBank(Bank previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (Bank != null)
            {
                if (!Bank.PaymentRequests.Contains(this))
                {
                    Bank.PaymentRequests.Add(this);
                }
    
                IntermediaryBankId = Bank.Id;
            }
            else if (!skipKeys)
            {
                IntermediaryBankId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Bank")
                    && (ChangeTracker.OriginalValues["Bank"] == Bank))
                {
                    ChangeTracker.OriginalValues.Remove("Bank");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Bank", previousValue);
                }
                if (Bank != null && !Bank.ChangeTracker.ChangeTrackingEnabled)
                {
                    Bank.StartTracking();
                }
            }
        }
    
        private void FixupCommercialInvoice(CommercialInvoice previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PaymentRequests.Contains(this))
            {
                previousValue.PaymentRequests.Remove(this);
            }
    
            if (CommercialInvoice != null)
            {
                if (!CommercialInvoice.PaymentRequests.Contains(this))
                {
                    CommercialInvoice.PaymentRequests.Add(this);
                }
    
                InvoiceId = CommercialInvoice.Id;
            }
            else if (!skipKeys)
            {
                InvoiceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CommercialInvoice")
                    && (ChangeTracker.OriginalValues["CommercialInvoice"] == CommercialInvoice))
                {
                    ChangeTracker.OriginalValues.Remove("CommercialInvoice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CommercialInvoice", previousValue);
                }
                if (CommercialInvoice != null && !CommercialInvoice.ChangeTracker.ChangeTrackingEnabled)
                {
                    CommercialInvoice.StartTracking();
                }
            }
        }
    
        private void FixupFundFlows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FundFlow item in e.NewItems)
                {
                    item.PaymentRequest = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FundFlows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FundFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.PaymentRequest, this))
                    {
                        item.PaymentRequest = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FundFlows", item);
                    }
                }
            }
        }
    
        private void FixupLetterOfCredits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LetterOfCredit item in e.NewItems)
                {
                    item.PaymentRequest = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LetterOfCredits", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LetterOfCredit item in e.OldItems)
                {
                    if (ReferenceEquals(item.PaymentRequest, this))
                    {
                        item.PaymentRequest = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LetterOfCredits", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.PaymentRequest = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.PaymentRequest, this))
                    {
                        item.PaymentRequest = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries", item);
                    }
                }
            }
        }

        #endregion

    }
}
