//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(WarehouseInLine))]
    [KnownType(typeof(WarehouseOut))]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(CommodityType))]
    [KnownType(typeof(Specification))]
    [KnownType(typeof(WarehouseOutDeliveryPerson))]
    public partial class WarehouseOutLine: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public int WarehouseOutId
        {
            get { return _warehouseOutId; }
            set
            {
                if (_warehouseOutId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseOutId", _warehouseOutId);
                    if (!IsDeserializing)
                    {
                        if (WarehouseOut != null && WarehouseOut.Id != value)
                        {
                            WarehouseOut = null;
                        }
                    }
                    _warehouseOutId = value;
                    OnPropertyChanged("WarehouseOutId");
                }
            }
        }
        private int _warehouseOutId;
    
        [DataMember]
        public int WarehouseInLineId
        {
            get { return _warehouseInLineId; }
            set
            {
                if (_warehouseInLineId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseInLineId", _warehouseInLineId);
                    if (!IsDeserializing)
                    {
                        if (WarehouseInLine != null && WarehouseInLine.Id != value)
                        {
                            WarehouseInLine = null;
                        }
                    }
                    _warehouseInLineId = value;
                    OnPropertyChanged("WarehouseInLineId");
                }
            }
        }
        private int _warehouseInLineId;
    
        [DataMember]
        public Nullable<decimal> Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private Nullable<decimal> _quantity;
    
        [DataMember]
        public Nullable<decimal> VerifiedQuantity
        {
            get { return _verifiedQuantity; }
            set
            {
                if (_verifiedQuantity != value)
                {
                    _verifiedQuantity = value;
                    OnPropertyChanged("VerifiedQuantity");
                }
            }
        }
        private Nullable<decimal> _verifiedQuantity;
    
        [DataMember]
        public Nullable<bool> IsVerified
        {
            get { return _isVerified; }
            set
            {
                if (_isVerified != value)
                {
                    _isVerified = value;
                    OnPropertyChanged("IsVerified");
                }
            }
        }
        private Nullable<bool> _isVerified;
    
        [DataMember]
        public Nullable<decimal> PackingQuantity
        {
            get { return _packingQuantity; }
            set
            {
                if (_packingQuantity != value)
                {
                    _packingQuantity = value;
                    OnPropertyChanged("PackingQuantity");
                }
            }
        }
        private Nullable<decimal> _packingQuantity;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public int CommodityTypeId
        {
            get { return _commodityTypeId; }
            set
            {
                if (_commodityTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityTypeId", _commodityTypeId);
                    if (!IsDeserializing)
                    {
                        if (CommodityType != null && CommodityType.Id != value)
                        {
                            CommodityType = null;
                        }
                    }
                    _commodityTypeId = value;
                    OnPropertyChanged("CommodityTypeId");
                }
            }
        }
        private int _commodityTypeId;
    
        [DataMember]
        public int BrandId
        {
            get { return _brandId; }
            set
            {
                if (_brandId != value)
                {
                    ChangeTracker.RecordOriginalValue("BrandId", _brandId);
                    if (!IsDeserializing)
                    {
                        if (Brand != null && Brand.Id != value)
                        {
                            Brand = null;
                        }
                    }
                    _brandId = value;
                    OnPropertyChanged("BrandId");
                }
            }
        }
        private int _brandId;
    
        [DataMember]
        public int SpecificationId
        {
            get { return _specificationId; }
            set
            {
                if (_specificationId != value)
                {
                    ChangeTracker.RecordOriginalValue("SpecificationId", _specificationId);
                    if (!IsDeserializing)
                    {
                        if (Specification != null && Specification.Id != value)
                        {
                            Specification = null;
                        }
                    }
                    _specificationId = value;
                    OnPropertyChanged("SpecificationId");
                }
            }
        }
        private int _specificationId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public WarehouseInLine WarehouseInLine
        {
            get { return _warehouseInLine; }
            set
            {
                if (!ReferenceEquals(_warehouseInLine, value))
                {
                    var previousValue = _warehouseInLine;
                    _warehouseInLine = value;
                    FixupWarehouseInLine(previousValue);
                    OnNavigationPropertyChanged("WarehouseInLine");
                }
            }
        }
        private WarehouseInLine _warehouseInLine;
    
        [DataMember]
        public WarehouseOut WarehouseOut
        {
            get { return _warehouseOut; }
            set
            {
                if (!ReferenceEquals(_warehouseOut, value))
                {
                    var previousValue = _warehouseOut;
                    _warehouseOut = value;
                    FixupWarehouseOut(previousValue);
                    OnNavigationPropertyChanged("WarehouseOut");
                }
            }
        }
        private WarehouseOut _warehouseOut;
    
        [DataMember]
        public Brand Brand
        {
            get { return _brand; }
            set
            {
                if (!ReferenceEquals(_brand, value))
                {
                    var previousValue = _brand;
                    _brand = value;
                    FixupBrand(previousValue);
                    OnNavigationPropertyChanged("Brand");
                }
            }
        }
        private Brand _brand;
    
        [DataMember]
        public CommodityType CommodityType
        {
            get { return _commodityType; }
            set
            {
                if (!ReferenceEquals(_commodityType, value))
                {
                    var previousValue = _commodityType;
                    _commodityType = value;
                    FixupCommodityType(previousValue);
                    OnNavigationPropertyChanged("CommodityType");
                }
            }
        }
        private CommodityType _commodityType;
    
        [DataMember]
        public Specification Specification
        {
            get { return _specification; }
            set
            {
                if (!ReferenceEquals(_specification, value))
                {
                    var previousValue = _specification;
                    _specification = value;
                    FixupSpecification(previousValue);
                    OnNavigationPropertyChanged("Specification");
                }
            }
        }
        private Specification _specification;
    
        [DataMember]
        public TrackableCollection<WarehouseOutDeliveryPerson> WarehouseOutDeliveryPersons
        {
            get
            {
                if (_warehouseOutDeliveryPersons == null)
                {
                    _warehouseOutDeliveryPersons = new TrackableCollection<WarehouseOutDeliveryPerson>();
                    _warehouseOutDeliveryPersons.CollectionChanged += FixupWarehouseOutDeliveryPersons;
                }
                return _warehouseOutDeliveryPersons;
            }
            set
            {
                if (!ReferenceEquals(_warehouseOutDeliveryPersons, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseOutDeliveryPersons != null)
                    {
                        _warehouseOutDeliveryPersons.CollectionChanged -= FixupWarehouseOutDeliveryPersons;
                    }
                    _warehouseOutDeliveryPersons = value;
                    if (_warehouseOutDeliveryPersons != null)
                    {
                        _warehouseOutDeliveryPersons.CollectionChanged += FixupWarehouseOutDeliveryPersons;
                    }
                    OnNavigationPropertyChanged("WarehouseOutDeliveryPersons");
                }
            }
        }
        private TrackableCollection<WarehouseOutDeliveryPerson> _warehouseOutDeliveryPersons;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            WarehouseInLine = null;
            WarehouseOut = null;
            Brand = null;
            CommodityType = null;
            Specification = null;
            WarehouseOutDeliveryPersons.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupWarehouseInLine(WarehouseInLine previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOutLines.Contains(this))
            {
                previousValue.WarehouseOutLines.Remove(this);
            }
    
            if (WarehouseInLine != null)
            {
                if (!WarehouseInLine.WarehouseOutLines.Contains(this))
                {
                    WarehouseInLine.WarehouseOutLines.Add(this);
                }
    
                WarehouseInLineId = WarehouseInLine.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WarehouseInLine")
                    && (ChangeTracker.OriginalValues["WarehouseInLine"] == WarehouseInLine))
                {
                    ChangeTracker.OriginalValues.Remove("WarehouseInLine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WarehouseInLine", previousValue);
                }
                if (WarehouseInLine != null && !WarehouseInLine.ChangeTracker.ChangeTrackingEnabled)
                {
                    WarehouseInLine.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseOut(WarehouseOut previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOutLines.Contains(this))
            {
                previousValue.WarehouseOutLines.Remove(this);
            }
    
            if (WarehouseOut != null)
            {
                if (!WarehouseOut.WarehouseOutLines.Contains(this))
                {
                    WarehouseOut.WarehouseOutLines.Add(this);
                }
    
                WarehouseOutId = WarehouseOut.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WarehouseOut")
                    && (ChangeTracker.OriginalValues["WarehouseOut"] == WarehouseOut))
                {
                    ChangeTracker.OriginalValues.Remove("WarehouseOut");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WarehouseOut", previousValue);
                }
                if (WarehouseOut != null && !WarehouseOut.ChangeTracker.ChangeTrackingEnabled)
                {
                    WarehouseOut.StartTracking();
                }
            }
        }
    
        private void FixupBrand(Brand previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOutLines.Contains(this))
            {
                previousValue.WarehouseOutLines.Remove(this);
            }
    
            if (Brand != null)
            {
                if (!Brand.WarehouseOutLines.Contains(this))
                {
                    Brand.WarehouseOutLines.Add(this);
                }
    
                BrandId = Brand.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Brand")
                    && (ChangeTracker.OriginalValues["Brand"] == Brand))
                {
                    ChangeTracker.OriginalValues.Remove("Brand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Brand", previousValue);
                }
                if (Brand != null && !Brand.ChangeTracker.ChangeTrackingEnabled)
                {
                    Brand.StartTracking();
                }
            }
        }
    
        private void FixupCommodityType(CommodityType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOutLines.Contains(this))
            {
                previousValue.WarehouseOutLines.Remove(this);
            }
    
            if (CommodityType != null)
            {
                if (!CommodityType.WarehouseOutLines.Contains(this))
                {
                    CommodityType.WarehouseOutLines.Add(this);
                }
    
                CommodityTypeId = CommodityType.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CommodityType")
                    && (ChangeTracker.OriginalValues["CommodityType"] == CommodityType))
                {
                    ChangeTracker.OriginalValues.Remove("CommodityType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CommodityType", previousValue);
                }
                if (CommodityType != null && !CommodityType.ChangeTracker.ChangeTrackingEnabled)
                {
                    CommodityType.StartTracking();
                }
            }
        }
    
        private void FixupSpecification(Specification previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOutLines.Contains(this))
            {
                previousValue.WarehouseOutLines.Remove(this);
            }
    
            if (Specification != null)
            {
                if (!Specification.WarehouseOutLines.Contains(this))
                {
                    Specification.WarehouseOutLines.Add(this);
                }
    
                SpecificationId = Specification.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Specification")
                    && (ChangeTracker.OriginalValues["Specification"] == Specification))
                {
                    ChangeTracker.OriginalValues.Remove("Specification");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Specification", previousValue);
                }
                if (Specification != null && !Specification.ChangeTracker.ChangeTrackingEnabled)
                {
                    Specification.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseOutDeliveryPersons(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseOutDeliveryPerson item in e.NewItems)
                {
                    item.WarehouseOutLine = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseOutDeliveryPersons", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseOutDeliveryPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.WarehouseOutLine, this))
                    {
                        item.WarehouseOutLine = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseOutDeliveryPersons", item);
                    }
                }
            }
        }

        #endregion

    }
}
