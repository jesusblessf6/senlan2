//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CommodityType))]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(Specification))]
    [KnownType(typeof(UserCommodityLink))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(Inventory))]
    [KnownType(typeof(CommissionLine))]
    [KnownType(typeof(SHFEHoldingPosition))]
    [KnownType(typeof(SHFEPosition))]
    [KnownType(typeof(LMEPosition))]
    [KnownType(typeof(TDHoldingPosition))]
    [KnownType(typeof(TDPosition))]
    [KnownType(typeof(StorageFeeRule))]
    [KnownType(typeof(ForeignDeliveryPool))]
    [KnownType(typeof(LCAllocation))]
    [KnownType(typeof(WarehouseIn))]
    public partial class Commodity: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public string SHFEUnit
        {
            get { return _sHFEUnit; }
            set
            {
                if (_sHFEUnit != value)
                {
                    _sHFEUnit = value;
                    OnPropertyChanged("SHFEUnit");
                }
            }
        }
        private string _sHFEUnit;
    
        [DataMember]
        public string SGEUnit
        {
            get { return _sGEUnit; }
            set
            {
                if (_sGEUnit != value)
                {
                    _sGEUnit = value;
                    OnPropertyChanged("SGEUnit");
                }
            }
        }
        private string _sGEUnit;
    
        [DataMember]
        public string LMEUnit
        {
            get { return _lMEUnit; }
            set
            {
                if (_lMEUnit != value)
                {
                    _lMEUnit = value;
                    OnPropertyChanged("LMEUnit");
                }
            }
        }
        private string _lMEUnit;
    
        [DataMember]
        public Nullable<int> SHFEQtyPerHand
        {
            get { return _sHFEQtyPerHand; }
            set
            {
                if (_sHFEQtyPerHand != value)
                {
                    _sHFEQtyPerHand = value;
                    OnPropertyChanged("SHFEQtyPerHand");
                }
            }
        }
        private Nullable<int> _sHFEQtyPerHand;
    
        [DataMember]
        public Nullable<int> SGEQtyPerHand
        {
            get { return _sGEQtyPerHand; }
            set
            {
                if (_sGEQtyPerHand != value)
                {
                    _sGEQtyPerHand = value;
                    OnPropertyChanged("SGEQtyPerHand");
                }
            }
        }
        private Nullable<int> _sGEQtyPerHand;
    
        [DataMember]
        public Nullable<int> LMEQtyPerHand
        {
            get { return _lMEQtyPerHand; }
            set
            {
                if (_lMEQtyPerHand != value)
                {
                    _lMEQtyPerHand = value;
                    OnPropertyChanged("LMEQtyPerHand");
                }
            }
        }
        private Nullable<int> _lMEQtyPerHand;
    
        [DataMember]
        public Nullable<int> SHFEQtyForDel
        {
            get { return _sHFEQtyForDel; }
            set
            {
                if (_sHFEQtyForDel != value)
                {
                    _sHFEQtyForDel = value;
                    OnPropertyChanged("SHFEQtyForDel");
                }
            }
        }
        private Nullable<int> _sHFEQtyForDel;
    
        [DataMember]
        public Nullable<int> SGEQtyForDel
        {
            get { return _sGEQtyForDel; }
            set
            {
                if (_sGEQtyForDel != value)
                {
                    _sGEQtyForDel = value;
                    OnPropertyChanged("SGEQtyForDel");
                }
            }
        }
        private Nullable<int> _sGEQtyForDel;
    
        [DataMember]
        public Nullable<int> LMEQtyForDel
        {
            get { return _lMEQtyForDel; }
            set
            {
                if (_lMEQtyForDel != value)
                {
                    _lMEQtyForDel = value;
                    OnPropertyChanged("LMEQtyForDel");
                }
            }
        }
        private Nullable<int> _lMEQtyForDel;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CommodityType> CommodityTypes
        {
            get
            {
                if (_commodityTypes == null)
                {
                    _commodityTypes = new TrackableCollection<CommodityType>();
                    _commodityTypes.CollectionChanged += FixupCommodityTypes;
                }
                return _commodityTypes;
            }
            set
            {
                if (!ReferenceEquals(_commodityTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commodityTypes != null)
                    {
                        _commodityTypes.CollectionChanged -= FixupCommodityTypes;
                    }
                    _commodityTypes = value;
                    if (_commodityTypes != null)
                    {
                        _commodityTypes.CollectionChanged += FixupCommodityTypes;
                    }
                    OnNavigationPropertyChanged("CommodityTypes");
                }
            }
        }
        private TrackableCollection<CommodityType> _commodityTypes;
    
        [DataMember]
        public TrackableCollection<Brand> Brands
        {
            get
            {
                if (_brands == null)
                {
                    _brands = new TrackableCollection<Brand>();
                    _brands.CollectionChanged += FixupBrands;
                }
                return _brands;
            }
            set
            {
                if (!ReferenceEquals(_brands, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_brands != null)
                    {
                        _brands.CollectionChanged -= FixupBrands;
                    }
                    _brands = value;
                    if (_brands != null)
                    {
                        _brands.CollectionChanged += FixupBrands;
                    }
                    OnNavigationPropertyChanged("Brands");
                }
            }
        }
        private TrackableCollection<Brand> _brands;
    
        [DataMember]
        public TrackableCollection<Specification> Specifications
        {
            get
            {
                if (_specifications == null)
                {
                    _specifications = new TrackableCollection<Specification>();
                    _specifications.CollectionChanged += FixupSpecifications;
                }
                return _specifications;
            }
            set
            {
                if (!ReferenceEquals(_specifications, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_specifications != null)
                    {
                        _specifications.CollectionChanged -= FixupSpecifications;
                    }
                    _specifications = value;
                    if (_specifications != null)
                    {
                        _specifications.CollectionChanged += FixupSpecifications;
                    }
                    OnNavigationPropertyChanged("Specifications");
                }
            }
        }
        private TrackableCollection<Specification> _specifications;
    
        [DataMember]
        public TrackableCollection<UserCommodityLink> UserCommodityLinks
        {
            get
            {
                if (_userCommodityLinks == null)
                {
                    _userCommodityLinks = new TrackableCollection<UserCommodityLink>();
                    _userCommodityLinks.CollectionChanged += FixupUserCommodityLinks;
                }
                return _userCommodityLinks;
            }
            set
            {
                if (!ReferenceEquals(_userCommodityLinks, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_userCommodityLinks != null)
                    {
                        _userCommodityLinks.CollectionChanged -= FixupUserCommodityLinks;
                    }
                    _userCommodityLinks = value;
                    if (_userCommodityLinks != null)
                    {
                        _userCommodityLinks.CollectionChanged += FixupUserCommodityLinks;
                    }
                    OnNavigationPropertyChanged("UserCommodityLinks");
                }
            }
        }
        private TrackableCollection<UserCommodityLink> _userCommodityLinks;
    
        [DataMember]
        public TrackableCollection<Quota> Quotas
        {
            get
            {
                if (_quotas == null)
                {
                    _quotas = new TrackableCollection<Quota>();
                    _quotas.CollectionChanged += FixupQuotas;
                }
                return _quotas;
            }
            set
            {
                if (!ReferenceEquals(_quotas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged -= FixupQuotas;
                    }
                    _quotas = value;
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged += FixupQuotas;
                    }
                    OnNavigationPropertyChanged("Quotas");
                }
            }
        }
        private TrackableCollection<Quota> _quotas;
    
        [DataMember]
        public TrackableCollection<Inventory> Inventories
        {
            get
            {
                if (_inventories == null)
                {
                    _inventories = new TrackableCollection<Inventory>();
                    _inventories.CollectionChanged += FixupInventories;
                }
                return _inventories;
            }
            set
            {
                if (!ReferenceEquals(_inventories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_inventories != null)
                    {
                        _inventories.CollectionChanged -= FixupInventories;
                    }
                    _inventories = value;
                    if (_inventories != null)
                    {
                        _inventories.CollectionChanged += FixupInventories;
                    }
                    OnNavigationPropertyChanged("Inventories");
                }
            }
        }
        private TrackableCollection<Inventory> _inventories;
    
        [DataMember]
        public TrackableCollection<CommissionLine> CommissionLines
        {
            get
            {
                if (_commissionLines == null)
                {
                    _commissionLines = new TrackableCollection<CommissionLine>();
                    _commissionLines.CollectionChanged += FixupCommissionLines;
                }
                return _commissionLines;
            }
            set
            {
                if (!ReferenceEquals(_commissionLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commissionLines != null)
                    {
                        _commissionLines.CollectionChanged -= FixupCommissionLines;
                    }
                    _commissionLines = value;
                    if (_commissionLines != null)
                    {
                        _commissionLines.CollectionChanged += FixupCommissionLines;
                    }
                    OnNavigationPropertyChanged("CommissionLines");
                }
            }
        }
        private TrackableCollection<CommissionLine> _commissionLines;
    
        [DataMember]
        public TrackableCollection<SHFEHoldingPosition> SHFEHoldingPositions
        {
            get
            {
                if (_sHFEHoldingPositions == null)
                {
                    _sHFEHoldingPositions = new TrackableCollection<SHFEHoldingPosition>();
                    _sHFEHoldingPositions.CollectionChanged += FixupSHFEHoldingPositions;
                }
                return _sHFEHoldingPositions;
            }
            set
            {
                if (!ReferenceEquals(_sHFEHoldingPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sHFEHoldingPositions != null)
                    {
                        _sHFEHoldingPositions.CollectionChanged -= FixupSHFEHoldingPositions;
                    }
                    _sHFEHoldingPositions = value;
                    if (_sHFEHoldingPositions != null)
                    {
                        _sHFEHoldingPositions.CollectionChanged += FixupSHFEHoldingPositions;
                    }
                    OnNavigationPropertyChanged("SHFEHoldingPositions");
                }
            }
        }
        private TrackableCollection<SHFEHoldingPosition> _sHFEHoldingPositions;
    
        [DataMember]
        public TrackableCollection<SHFEPosition> SHFEPositions
        {
            get
            {
                if (_sHFEPositions == null)
                {
                    _sHFEPositions = new TrackableCollection<SHFEPosition>();
                    _sHFEPositions.CollectionChanged += FixupSHFEPositions;
                }
                return _sHFEPositions;
            }
            set
            {
                if (!ReferenceEquals(_sHFEPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sHFEPositions != null)
                    {
                        _sHFEPositions.CollectionChanged -= FixupSHFEPositions;
                    }
                    _sHFEPositions = value;
                    if (_sHFEPositions != null)
                    {
                        _sHFEPositions.CollectionChanged += FixupSHFEPositions;
                    }
                    OnNavigationPropertyChanged("SHFEPositions");
                }
            }
        }
        private TrackableCollection<SHFEPosition> _sHFEPositions;
    
        [DataMember]
        public TrackableCollection<LMEPosition> LMEPositions
        {
            get
            {
                if (_lMEPositions == null)
                {
                    _lMEPositions = new TrackableCollection<LMEPosition>();
                    _lMEPositions.CollectionChanged += FixupLMEPositions;
                }
                return _lMEPositions;
            }
            set
            {
                if (!ReferenceEquals(_lMEPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lMEPositions != null)
                    {
                        _lMEPositions.CollectionChanged -= FixupLMEPositions;
                    }
                    _lMEPositions = value;
                    if (_lMEPositions != null)
                    {
                        _lMEPositions.CollectionChanged += FixupLMEPositions;
                    }
                    OnNavigationPropertyChanged("LMEPositions");
                }
            }
        }
        private TrackableCollection<LMEPosition> _lMEPositions;
    
        [DataMember]
        public TrackableCollection<TDHoldingPosition> TDHoldingPositions
        {
            get
            {
                if (_tDHoldingPositions == null)
                {
                    _tDHoldingPositions = new TrackableCollection<TDHoldingPosition>();
                    _tDHoldingPositions.CollectionChanged += FixupTDHoldingPositions;
                }
                return _tDHoldingPositions;
            }
            set
            {
                if (!ReferenceEquals(_tDHoldingPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tDHoldingPositions != null)
                    {
                        _tDHoldingPositions.CollectionChanged -= FixupTDHoldingPositions;
                    }
                    _tDHoldingPositions = value;
                    if (_tDHoldingPositions != null)
                    {
                        _tDHoldingPositions.CollectionChanged += FixupTDHoldingPositions;
                    }
                    OnNavigationPropertyChanged("TDHoldingPositions");
                }
            }
        }
        private TrackableCollection<TDHoldingPosition> _tDHoldingPositions;
    
        [DataMember]
        public TrackableCollection<TDPosition> TDPositions
        {
            get
            {
                if (_tDPositions == null)
                {
                    _tDPositions = new TrackableCollection<TDPosition>();
                    _tDPositions.CollectionChanged += FixupTDPositions;
                }
                return _tDPositions;
            }
            set
            {
                if (!ReferenceEquals(_tDPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tDPositions != null)
                    {
                        _tDPositions.CollectionChanged -= FixupTDPositions;
                    }
                    _tDPositions = value;
                    if (_tDPositions != null)
                    {
                        _tDPositions.CollectionChanged += FixupTDPositions;
                    }
                    OnNavigationPropertyChanged("TDPositions");
                }
            }
        }
        private TrackableCollection<TDPosition> _tDPositions;
    
        [DataMember]
        public TrackableCollection<StorageFeeRule> StorageFeeRules
        {
            get
            {
                if (_storageFeeRules == null)
                {
                    _storageFeeRules = new TrackableCollection<StorageFeeRule>();
                    _storageFeeRules.CollectionChanged += FixupStorageFeeRules;
                }
                return _storageFeeRules;
            }
            set
            {
                if (!ReferenceEquals(_storageFeeRules, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_storageFeeRules != null)
                    {
                        _storageFeeRules.CollectionChanged -= FixupStorageFeeRules;
                    }
                    _storageFeeRules = value;
                    if (_storageFeeRules != null)
                    {
                        _storageFeeRules.CollectionChanged += FixupStorageFeeRules;
                    }
                    OnNavigationPropertyChanged("StorageFeeRules");
                }
            }
        }
        private TrackableCollection<StorageFeeRule> _storageFeeRules;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPool> ForeignDeliveryPools
        {
            get
            {
                if (_foreignDeliveryPools == null)
                {
                    _foreignDeliveryPools = new TrackableCollection<ForeignDeliveryPool>();
                    _foreignDeliveryPools.CollectionChanged += FixupForeignDeliveryPools;
                }
                return _foreignDeliveryPools;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPools, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPools != null)
                    {
                        _foreignDeliveryPools.CollectionChanged -= FixupForeignDeliveryPools;
                    }
                    _foreignDeliveryPools = value;
                    if (_foreignDeliveryPools != null)
                    {
                        _foreignDeliveryPools.CollectionChanged += FixupForeignDeliveryPools;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPools");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPool> _foreignDeliveryPools;
    
        [DataMember]
        public TrackableCollection<LCAllocation> LCAllocations
        {
            get
            {
                if (_lCAllocations == null)
                {
                    _lCAllocations = new TrackableCollection<LCAllocation>();
                    _lCAllocations.CollectionChanged += FixupLCAllocations;
                }
                return _lCAllocations;
            }
            set
            {
                if (!ReferenceEquals(_lCAllocations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lCAllocations != null)
                    {
                        _lCAllocations.CollectionChanged -= FixupLCAllocations;
                    }
                    _lCAllocations = value;
                    if (_lCAllocations != null)
                    {
                        _lCAllocations.CollectionChanged += FixupLCAllocations;
                    }
                    OnNavigationPropertyChanged("LCAllocations");
                }
            }
        }
        private TrackableCollection<LCAllocation> _lCAllocations;
    
        [DataMember]
        public TrackableCollection<WarehouseIn> WarehouseIns
        {
            get
            {
                if (_warehouseIns == null)
                {
                    _warehouseIns = new TrackableCollection<WarehouseIn>();
                    _warehouseIns.CollectionChanged += FixupWarehouseIns;
                }
                return _warehouseIns;
            }
            set
            {
                if (!ReferenceEquals(_warehouseIns, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseIns != null)
                    {
                        _warehouseIns.CollectionChanged -= FixupWarehouseIns;
                    }
                    _warehouseIns = value;
                    if (_warehouseIns != null)
                    {
                        _warehouseIns.CollectionChanged += FixupWarehouseIns;
                    }
                    OnNavigationPropertyChanged("WarehouseIns");
                }
            }
        }
        private TrackableCollection<WarehouseIn> _warehouseIns;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CommodityTypes.Clear();
            Brands.Clear();
            Specifications.Clear();
            UserCommodityLinks.Clear();
            Quotas.Clear();
            Inventories.Clear();
            CommissionLines.Clear();
            SHFEHoldingPositions.Clear();
            SHFEPositions.Clear();
            LMEPositions.Clear();
            TDHoldingPositions.Clear();
            TDPositions.Clear();
            StorageFeeRules.Clear();
            ForeignDeliveryPools.Clear();
            LCAllocations.Clear();
            WarehouseIns.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCommodityTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CommodityType item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CommodityTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommodityType item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CommodityTypes", item);
                    }
                }
            }
        }
    
        private void FixupBrands(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Brand item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Brands", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Brand item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Brands", item);
                    }
                }
            }
        }
    
        private void FixupSpecifications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Specification item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Specifications", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Specification item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Specifications", item);
                    }
                }
            }
        }
    
        private void FixupUserCommodityLinks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserCommodityLink item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UserCommodityLinks", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserCommodityLink item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UserCommodityLinks", item);
                    }
                }
            }
        }
    
        private void FixupQuotas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Quota item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Quotas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Quota item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Quotas", item);
                    }
                }
            }
        }
    
        private void FixupInventories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Inventory item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Inventories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Inventory item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Inventories", item);
                    }
                }
            }
        }
    
        private void FixupCommissionLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CommissionLine item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CommissionLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommissionLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CommissionLines", item);
                    }
                }
            }
        }
    
        private void FixupSHFEHoldingPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SHFEHoldingPosition item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SHFEHoldingPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SHFEHoldingPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SHFEHoldingPositions", item);
                    }
                }
            }
        }
    
        private void FixupSHFEPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SHFEPosition item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SHFEPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SHFEPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SHFEPositions", item);
                    }
                }
            }
        }
    
        private void FixupLMEPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LMEPosition item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LMEPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LMEPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LMEPositions", item);
                    }
                }
            }
        }
    
        private void FixupTDHoldingPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TDHoldingPosition item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TDHoldingPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TDHoldingPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TDHoldingPositions", item);
                    }
                }
            }
        }
    
        private void FixupTDPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TDPosition item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TDPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TDPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TDPositions", item);
                    }
                }
            }
        }
    
        private void FixupStorageFeeRules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (StorageFeeRule item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("StorageFeeRules", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StorageFeeRule item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("StorageFeeRules", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPools(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPool item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPools", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPools", item);
                    }
                }
            }
        }
    
        private void FixupLCAllocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LCAllocation item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LCAllocations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LCAllocation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LCAllocations", item);
                    }
                }
            }
        }
    
        private void FixupWarehouseIns(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseIn item in e.NewItems)
                {
                    item.Commodity = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseIns", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseIn item in e.OldItems)
                {
                    if (ReferenceEquals(item.Commodity, this))
                    {
                        item.Commodity = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseIns", item);
                    }
                }
            }
        }

        #endregion

    }
}
