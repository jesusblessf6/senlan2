//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Rate))]
    [KnownType(typeof(ApprovalCondition))]
    [KnownType(typeof(BankAccount))]
    [KnownType(typeof(FundFlow))]
    [KnownType(typeof(PaymentRequest))]
    [KnownType(typeof(Pricing))]
    [KnownType(typeof(CommercialInvoice))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(HedgeGroup))]
    [KnownType(typeof(LetterOfCredit))]
    [KnownType(typeof(Warehouse))]
    [KnownType(typeof(LCAllocation))]
    public partial class Currency: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsSystem
        {
            get { return _isSystem; }
            set
            {
                if (_isSystem != value)
                {
                    _isSystem = value;
                    OnPropertyChanged("IsSystem");
                }
            }
        }
        private bool _isSystem;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Rate> Rates
        {
            get
            {
                if (_rates == null)
                {
                    _rates = new TrackableCollection<Rate>();
                    _rates.CollectionChanged += FixupRates;
                }
                return _rates;
            }
            set
            {
                if (!ReferenceEquals(_rates, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_rates != null)
                    {
                        _rates.CollectionChanged -= FixupRates;
                    }
                    _rates = value;
                    if (_rates != null)
                    {
                        _rates.CollectionChanged += FixupRates;
                    }
                    OnNavigationPropertyChanged("Rates");
                }
            }
        }
        private TrackableCollection<Rate> _rates;
    
        [DataMember]
        public TrackableCollection<ApprovalCondition> ApprovalConditions
        {
            get
            {
                if (_approvalConditions == null)
                {
                    _approvalConditions = new TrackableCollection<ApprovalCondition>();
                    _approvalConditions.CollectionChanged += FixupApprovalConditions;
                }
                return _approvalConditions;
            }
            set
            {
                if (!ReferenceEquals(_approvalConditions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_approvalConditions != null)
                    {
                        _approvalConditions.CollectionChanged -= FixupApprovalConditions;
                    }
                    _approvalConditions = value;
                    if (_approvalConditions != null)
                    {
                        _approvalConditions.CollectionChanged += FixupApprovalConditions;
                    }
                    OnNavigationPropertyChanged("ApprovalConditions");
                }
            }
        }
        private TrackableCollection<ApprovalCondition> _approvalConditions;
    
        [DataMember]
        public TrackableCollection<BankAccount> BankAccounts
        {
            get
            {
                if (_bankAccounts == null)
                {
                    _bankAccounts = new TrackableCollection<BankAccount>();
                    _bankAccounts.CollectionChanged += FixupBankAccounts;
                }
                return _bankAccounts;
            }
            set
            {
                if (!ReferenceEquals(_bankAccounts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bankAccounts != null)
                    {
                        _bankAccounts.CollectionChanged -= FixupBankAccounts;
                    }
                    _bankAccounts = value;
                    if (_bankAccounts != null)
                    {
                        _bankAccounts.CollectionChanged += FixupBankAccounts;
                    }
                    OnNavigationPropertyChanged("BankAccounts");
                }
            }
        }
        private TrackableCollection<BankAccount> _bankAccounts;
    
        [DataMember]
        public TrackableCollection<FundFlow> FundFlows
        {
            get
            {
                if (_fundFlows == null)
                {
                    _fundFlows = new TrackableCollection<FundFlow>();
                    _fundFlows.CollectionChanged += FixupFundFlows;
                }
                return _fundFlows;
            }
            set
            {
                if (!ReferenceEquals(_fundFlows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged -= FixupFundFlows;
                    }
                    _fundFlows = value;
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged += FixupFundFlows;
                    }
                    OnNavigationPropertyChanged("FundFlows");
                }
            }
        }
        private TrackableCollection<FundFlow> _fundFlows;
    
        [DataMember]
        public TrackableCollection<PaymentRequest> PaymentRequests
        {
            get
            {
                if (_paymentRequests == null)
                {
                    _paymentRequests = new TrackableCollection<PaymentRequest>();
                    _paymentRequests.CollectionChanged += FixupPaymentRequests;
                }
                return _paymentRequests;
            }
            set
            {
                if (!ReferenceEquals(_paymentRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged -= FixupPaymentRequests;
                    }
                    _paymentRequests = value;
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged += FixupPaymentRequests;
                    }
                    OnNavigationPropertyChanged("PaymentRequests");
                }
            }
        }
        private TrackableCollection<PaymentRequest> _paymentRequests;
    
        [DataMember]
        public TrackableCollection<Pricing> Pricings
        {
            get
            {
                if (_pricings == null)
                {
                    _pricings = new TrackableCollection<Pricing>();
                    _pricings.CollectionChanged += FixupPricings;
                }
                return _pricings;
            }
            set
            {
                if (!ReferenceEquals(_pricings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pricings != null)
                    {
                        _pricings.CollectionChanged -= FixupPricings;
                    }
                    _pricings = value;
                    if (_pricings != null)
                    {
                        _pricings.CollectionChanged += FixupPricings;
                    }
                    OnNavigationPropertyChanged("Pricings");
                }
            }
        }
        private TrackableCollection<Pricing> _pricings;
    
        [DataMember]
        public TrackableCollection<CommercialInvoice> CommercialInvoices
        {
            get
            {
                if (_commercialInvoices == null)
                {
                    _commercialInvoices = new TrackableCollection<CommercialInvoice>();
                    _commercialInvoices.CollectionChanged += FixupCommercialInvoices;
                }
                return _commercialInvoices;
            }
            set
            {
                if (!ReferenceEquals(_commercialInvoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commercialInvoices != null)
                    {
                        _commercialInvoices.CollectionChanged -= FixupCommercialInvoices;
                    }
                    _commercialInvoices = value;
                    if (_commercialInvoices != null)
                    {
                        _commercialInvoices.CollectionChanged += FixupCommercialInvoices;
                    }
                    OnNavigationPropertyChanged("CommercialInvoices");
                }
            }
        }
        private TrackableCollection<CommercialInvoice> _commercialInvoices;
    
        [DataMember]
        public TrackableCollection<Quota> Quotas
        {
            get
            {
                if (_quotas == null)
                {
                    _quotas = new TrackableCollection<Quota>();
                    _quotas.CollectionChanged += FixupQuotas;
                }
                return _quotas;
            }
            set
            {
                if (!ReferenceEquals(_quotas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged -= FixupQuotas;
                    }
                    _quotas = value;
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged += FixupQuotas;
                    }
                    OnNavigationPropertyChanged("Quotas");
                }
            }
        }
        private TrackableCollection<Quota> _quotas;
    
        [DataMember]
        public TrackableCollection<HedgeGroup> HedgeGroups
        {
            get
            {
                if (_hedgeGroups == null)
                {
                    _hedgeGroups = new TrackableCollection<HedgeGroup>();
                    _hedgeGroups.CollectionChanged += FixupHedgeGroups;
                }
                return _hedgeGroups;
            }
            set
            {
                if (!ReferenceEquals(_hedgeGroups, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hedgeGroups != null)
                    {
                        _hedgeGroups.CollectionChanged -= FixupHedgeGroups;
                    }
                    _hedgeGroups = value;
                    if (_hedgeGroups != null)
                    {
                        _hedgeGroups.CollectionChanged += FixupHedgeGroups;
                    }
                    OnNavigationPropertyChanged("HedgeGroups");
                }
            }
        }
        private TrackableCollection<HedgeGroup> _hedgeGroups;
    
        [DataMember]
        public TrackableCollection<LetterOfCredit> LetterOfCredits
        {
            get
            {
                if (_letterOfCredits == null)
                {
                    _letterOfCredits = new TrackableCollection<LetterOfCredit>();
                    _letterOfCredits.CollectionChanged += FixupLetterOfCredits;
                }
                return _letterOfCredits;
            }
            set
            {
                if (!ReferenceEquals(_letterOfCredits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_letterOfCredits != null)
                    {
                        _letterOfCredits.CollectionChanged -= FixupLetterOfCredits;
                    }
                    _letterOfCredits = value;
                    if (_letterOfCredits != null)
                    {
                        _letterOfCredits.CollectionChanged += FixupLetterOfCredits;
                    }
                    OnNavigationPropertyChanged("LetterOfCredits");
                }
            }
        }
        private TrackableCollection<LetterOfCredit> _letterOfCredits;
    
        [DataMember]
        public TrackableCollection<Warehouse> Warehouses
        {
            get
            {
                if (_warehouses == null)
                {
                    _warehouses = new TrackableCollection<Warehouse>();
                    _warehouses.CollectionChanged += FixupWarehouses;
                }
                return _warehouses;
            }
            set
            {
                if (!ReferenceEquals(_warehouses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouses != null)
                    {
                        _warehouses.CollectionChanged -= FixupWarehouses;
                    }
                    _warehouses = value;
                    if (_warehouses != null)
                    {
                        _warehouses.CollectionChanged += FixupWarehouses;
                    }
                    OnNavigationPropertyChanged("Warehouses");
                }
            }
        }
        private TrackableCollection<Warehouse> _warehouses;
    
        [DataMember]
        public TrackableCollection<LCAllocation> LCAllocations
        {
            get
            {
                if (_lCAllocations == null)
                {
                    _lCAllocations = new TrackableCollection<LCAllocation>();
                    _lCAllocations.CollectionChanged += FixupLCAllocations;
                }
                return _lCAllocations;
            }
            set
            {
                if (!ReferenceEquals(_lCAllocations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lCAllocations != null)
                    {
                        _lCAllocations.CollectionChanged -= FixupLCAllocations;
                    }
                    _lCAllocations = value;
                    if (_lCAllocations != null)
                    {
                        _lCAllocations.CollectionChanged += FixupLCAllocations;
                    }
                    OnNavigationPropertyChanged("LCAllocations");
                }
            }
        }
        private TrackableCollection<LCAllocation> _lCAllocations;
    
        [DataMember]
        public TrackableCollection<CommercialInvoice> CommercialInvoices1
        {
            get
            {
                if (_commercialInvoices1 == null)
                {
                    _commercialInvoices1 = new TrackableCollection<CommercialInvoice>();
                    _commercialInvoices1.CollectionChanged += FixupCommercialInvoices1;
                }
                return _commercialInvoices1;
            }
            set
            {
                if (!ReferenceEquals(_commercialInvoices1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commercialInvoices1 != null)
                    {
                        _commercialInvoices1.CollectionChanged -= FixupCommercialInvoices1;
                    }
                    _commercialInvoices1 = value;
                    if (_commercialInvoices1 != null)
                    {
                        _commercialInvoices1.CollectionChanged += FixupCommercialInvoices1;
                    }
                    OnNavigationPropertyChanged("CommercialInvoices1");
                }
            }
        }
        private TrackableCollection<CommercialInvoice> _commercialInvoices1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Rates.Clear();
            ApprovalConditions.Clear();
            BankAccounts.Clear();
            FundFlows.Clear();
            PaymentRequests.Clear();
            Pricings.Clear();
            CommercialInvoices.Clear();
            Quotas.Clear();
            HedgeGroups.Clear();
            LetterOfCredits.Clear();
            Warehouses.Clear();
            LCAllocations.Clear();
            CommercialInvoices1.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupRates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Rate item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Rates", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Rates", item);
                    }
                }
            }
        }
    
        private void FixupApprovalConditions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ApprovalCondition item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ApprovalConditions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ApprovalCondition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ApprovalConditions", item);
                    }
                }
            }
        }
    
        private void FixupBankAccounts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BankAccount item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BankAccounts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BankAccount item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BankAccounts", item);
                    }
                }
            }
        }
    
        private void FixupFundFlows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FundFlow item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FundFlows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FundFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FundFlows", item);
                    }
                }
            }
        }
    
        private void FixupPaymentRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentRequest item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentRequests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentRequests", item);
                    }
                }
            }
        }
    
        private void FixupPricings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Pricing item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Pricings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pricing item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Pricings", item);
                    }
                }
            }
        }
    
        private void FixupCommercialInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CommercialInvoice item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CommercialInvoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommercialInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CommercialInvoices", item);
                    }
                }
            }
        }
    
        private void FixupQuotas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Quota item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Quotas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Quota item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Quotas", item);
                    }
                }
            }
        }
    
        private void FixupHedgeGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HedgeGroup item in e.NewItems)
                {
                    item.PLCurrency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HedgeGroups", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HedgeGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.PLCurrency, this))
                    {
                        item.PLCurrency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HedgeGroups", item);
                    }
                }
            }
        }
    
        private void FixupLetterOfCredits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LetterOfCredit item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LetterOfCredits", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LetterOfCredit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LetterOfCredits", item);
                    }
                }
            }
        }
    
        private void FixupWarehouses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Warehouse item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Warehouses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Warehouse item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Warehouses", item);
                    }
                }
            }
        }
    
        private void FixupLCAllocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LCAllocation item in e.NewItems)
                {
                    item.Currency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LCAllocations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LCAllocation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Currency, this))
                    {
                        item.Currency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LCAllocations", item);
                    }
                }
            }
        }
    
        private void FixupCommercialInvoices1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CommercialInvoice item in e.NewItems)
                {
                    item.ClearBalanceCurrency = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CommercialInvoices1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommercialInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.ClearBalanceCurrency, this))
                    {
                        item.ClearBalanceCurrency = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CommercialInvoices1", item);
                    }
                }
            }
        }

        #endregion

    }
}
