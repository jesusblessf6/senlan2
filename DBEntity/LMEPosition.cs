//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(Commodity))]
    [KnownType(typeof(LMEPosition))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(HedgeLineLMEPosition))]
    public partial class LMEPosition: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<int> CommodityId
        {
            get { return _commodityId; }
            set
            {
                if (_commodityId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityId", _commodityId);
                    if (!IsDeserializing)
                    {
                        if (Commodity != null && Commodity.Id != value)
                        {
                            Commodity = null;
                        }
                    }
                    _commodityId = value;
                    OnPropertyChanged("CommodityId");
                }
            }
        }
        private Nullable<int> _commodityId;
    
        [DataMember]
        public Nullable<decimal> LotAmount
        {
            get { return _lotAmount; }
            set
            {
                if (_lotAmount != value)
                {
                    _lotAmount = value;
                    OnPropertyChanged("LotAmount");
                }
            }
        }
        private Nullable<decimal> _lotAmount;
    
        [DataMember]
        public Nullable<System.DateTime> TradeDate
        {
            get { return _tradeDate; }
            set
            {
                if (_tradeDate != value)
                {
                    _tradeDate = value;
                    OnPropertyChanged("TradeDate");
                }
            }
        }
        private Nullable<System.DateTime> _tradeDate;
    
        [DataMember]
        public Nullable<System.DateTime> PromptDate
        {
            get { return _promptDate; }
            set
            {
                if (_promptDate != value)
                {
                    _promptDate = value;
                    OnPropertyChanged("PromptDate");
                }
            }
        }
        private Nullable<System.DateTime> _promptDate;
    
        [DataMember]
        public Nullable<int> TradeDirection
        {
            get { return _tradeDirection; }
            set
            {
                if (_tradeDirection != value)
                {
                    _tradeDirection = value;
                    OnPropertyChanged("TradeDirection");
                }
            }
        }
        private Nullable<int> _tradeDirection;
    
        [DataMember]
        public Nullable<int> PositionType
        {
            get { return _positionType; }
            set
            {
                if (_positionType != value)
                {
                    _positionType = value;
                    OnPropertyChanged("PositionType");
                }
            }
        }
        private Nullable<int> _positionType;
    
        [DataMember]
        public Nullable<int> InternalBPId
        {
            get { return _internalBPId; }
            set
            {
                if (_internalBPId != value)
                {
                    ChangeTracker.RecordOriginalValue("InternalBPId", _internalBPId);
                    if (!IsDeserializing)
                    {
                        if (InternalBP != null && InternalBP.Id != value)
                        {
                            InternalBP = null;
                        }
                    }
                    _internalBPId = value;
                    OnPropertyChanged("InternalBPId");
                }
            }
        }
        private Nullable<int> _internalBPId;
    
        [DataMember]
        public Nullable<int> QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private Nullable<int> _quotaId;
    
        [DataMember]
        public Nullable<int> AgentId
        {
            get { return _agentId; }
            set
            {
                if (_agentId != value)
                {
                    ChangeTracker.RecordOriginalValue("AgentId", _agentId);
                    if (!IsDeserializing)
                    {
                        if (Agent != null && Agent.Id != value)
                        {
                            Agent = null;
                        }
                    }
                    _agentId = value;
                    OnPropertyChanged("AgentId");
                }
            }
        }
        private Nullable<int> _agentId;
    
        [DataMember]
        public Nullable<int> ClientId
        {
            get { return _clientId; }
            set
            {
                if (_clientId != value)
                {
                    ChangeTracker.RecordOriginalValue("ClientId", _clientId);
                    if (!IsDeserializing)
                    {
                        if (Client != null && Client.Id != value)
                        {
                            Client = null;
                        }
                    }
                    _clientId = value;
                    OnPropertyChanged("ClientId");
                }
            }
        }
        private Nullable<int> _clientId;
    
        [DataMember]
        public Nullable<decimal> AgentPrice
        {
            get { return _agentPrice; }
            set
            {
                if (_agentPrice != value)
                {
                    _agentPrice = value;
                    OnPropertyChanged("AgentPrice");
                }
            }
        }
        private Nullable<decimal> _agentPrice;
    
        [DataMember]
        public Nullable<decimal> ClientPrice
        {
            get { return _clientPrice; }
            set
            {
                if (_clientPrice != value)
                {
                    _clientPrice = value;
                    OnPropertyChanged("ClientPrice");
                }
            }
        }
        private Nullable<decimal> _clientPrice;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<int> CarryPositionId
        {
            get { return _carryPositionId; }
            set
            {
                if (_carryPositionId != value)
                {
                    ChangeTracker.RecordOriginalValue("CarryPositionId", _carryPositionId);
                    if (!IsDeserializing)
                    {
                        if (CarryPosition != null && CarryPosition.Id != value)
                        {
                            CarryPosition = null;
                        }
                    }
                    _carryPositionId = value;
                    OnPropertyChanged("CarryPositionId");
                }
            }
        }
        private Nullable<int> _carryPositionId;
    
        [DataMember]
        public Nullable<decimal> ClientCommission
        {
            get { return _clientCommission; }
            set
            {
                if (_clientCommission != value)
                {
                    _clientCommission = value;
                    OnPropertyChanged("ClientCommission");
                }
            }
        }
        private Nullable<decimal> _clientCommission;
    
        [DataMember]
        public Nullable<decimal> AgentCommission
        {
            get { return _agentCommission; }
            set
            {
                if (_agentCommission != value)
                {
                    _agentCommission = value;
                    OnPropertyChanged("AgentCommission");
                }
            }
        }
        private Nullable<decimal> _agentCommission;
    
        [DataMember]
        public Nullable<decimal> HedgedLotQuantity
        {
            get { return _hedgedLotQuantity; }
            set
            {
                if (_hedgedLotQuantity != value)
                {
                    _hedgedLotQuantity = value;
                    OnPropertyChanged("HedgedLotQuantity");
                }
            }
        }
        private Nullable<decimal> _hedgedLotQuantity = 0m;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BusinessPartner Agent
        {
            get { return _agent; }
            set
            {
                if (!ReferenceEquals(_agent, value))
                {
                    var previousValue = _agent;
                    _agent = value;
                    FixupAgent(previousValue);
                    OnNavigationPropertyChanged("Agent");
                }
            }
        }
        private BusinessPartner _agent;
    
        [DataMember]
        public BusinessPartner Client
        {
            get { return _client; }
            set
            {
                if (!ReferenceEquals(_client, value))
                {
                    var previousValue = _client;
                    _client = value;
                    FixupClient(previousValue);
                    OnNavigationPropertyChanged("Client");
                }
            }
        }
        private BusinessPartner _client;
    
        [DataMember]
        public BusinessPartner InternalBP
        {
            get { return _internalBP; }
            set
            {
                if (!ReferenceEquals(_internalBP, value))
                {
                    var previousValue = _internalBP;
                    _internalBP = value;
                    FixupInternalBP(previousValue);
                    OnNavigationPropertyChanged("InternalBP");
                }
            }
        }
        private BusinessPartner _internalBP;
    
        [DataMember]
        public Commodity Commodity
        {
            get { return _commodity; }
            set
            {
                if (!ReferenceEquals(_commodity, value))
                {
                    var previousValue = _commodity;
                    _commodity = value;
                    FixupCommodity(previousValue);
                    OnNavigationPropertyChanged("Commodity");
                }
            }
        }
        private Commodity _commodity;
    
        [DataMember]
        public TrackableCollection<LMEPosition> CurrentPosition
        {
            get
            {
                if (_currentPosition == null)
                {
                    _currentPosition = new TrackableCollection<LMEPosition>();
                    _currentPosition.CollectionChanged += FixupCurrentPosition;
                }
                return _currentPosition;
            }
            set
            {
                if (!ReferenceEquals(_currentPosition, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_currentPosition != null)
                    {
                        _currentPosition.CollectionChanged -= FixupCurrentPosition;
                    }
                    _currentPosition = value;
                    if (_currentPosition != null)
                    {
                        _currentPosition.CollectionChanged += FixupCurrentPosition;
                    }
                    OnNavigationPropertyChanged("CurrentPosition");
                }
            }
        }
        private TrackableCollection<LMEPosition> _currentPosition;
    
        [DataMember]
        public LMEPosition CarryPosition
        {
            get { return _carryPosition; }
            set
            {
                if (!ReferenceEquals(_carryPosition, value))
                {
                    var previousValue = _carryPosition;
                    _carryPosition = value;
                    FixupCarryPosition(previousValue);
                    OnNavigationPropertyChanged("CarryPosition");
                }
            }
        }
        private LMEPosition _carryPosition;
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public TrackableCollection<HedgeLineLMEPosition> HedgeLineLMEPositions
        {
            get
            {
                if (_hedgeLineLMEPositions == null)
                {
                    _hedgeLineLMEPositions = new TrackableCollection<HedgeLineLMEPosition>();
                    _hedgeLineLMEPositions.CollectionChanged += FixupHedgeLineLMEPositions;
                }
                return _hedgeLineLMEPositions;
            }
            set
            {
                if (!ReferenceEquals(_hedgeLineLMEPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hedgeLineLMEPositions != null)
                    {
                        _hedgeLineLMEPositions.CollectionChanged -= FixupHedgeLineLMEPositions;
                    }
                    _hedgeLineLMEPositions = value;
                    if (_hedgeLineLMEPositions != null)
                    {
                        _hedgeLineLMEPositions.CollectionChanged += FixupHedgeLineLMEPositions;
                    }
                    OnNavigationPropertyChanged("HedgeLineLMEPositions");
                }
            }
        }
        private TrackableCollection<HedgeLineLMEPosition> _hedgeLineLMEPositions;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Agent = null;
            Client = null;
            InternalBP = null;
            Commodity = null;
            CurrentPosition.Clear();
            CarryPosition = null;
            Quota = null;
            HedgeLineLMEPositions.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupAgent(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LMEPositions.Contains(this))
            {
                previousValue.LMEPositions.Remove(this);
            }
    
            if (Agent != null)
            {
                if (!Agent.LMEPositions.Contains(this))
                {
                    Agent.LMEPositions.Add(this);
                }
    
                AgentId = Agent.Id;
            }
            else if (!skipKeys)
            {
                AgentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Agent")
                    && (ChangeTracker.OriginalValues["Agent"] == Agent))
                {
                    ChangeTracker.OriginalValues.Remove("Agent");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Agent", previousValue);
                }
                if (Agent != null && !Agent.ChangeTracker.ChangeTrackingEnabled)
                {
                    Agent.StartTracking();
                }
            }
        }
    
        private void FixupClient(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LMEPositions1.Contains(this))
            {
                previousValue.LMEPositions1.Remove(this);
            }
    
            if (Client != null)
            {
                if (!Client.LMEPositions1.Contains(this))
                {
                    Client.LMEPositions1.Add(this);
                }
    
                ClientId = Client.Id;
            }
            else if (!skipKeys)
            {
                ClientId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Client")
                    && (ChangeTracker.OriginalValues["Client"] == Client))
                {
                    ChangeTracker.OriginalValues.Remove("Client");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Client", previousValue);
                }
                if (Client != null && !Client.ChangeTracker.ChangeTrackingEnabled)
                {
                    Client.StartTracking();
                }
            }
        }
    
        private void FixupInternalBP(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LMEPositions2.Contains(this))
            {
                previousValue.LMEPositions2.Remove(this);
            }
    
            if (InternalBP != null)
            {
                if (!InternalBP.LMEPositions2.Contains(this))
                {
                    InternalBP.LMEPositions2.Add(this);
                }
    
                InternalBPId = InternalBP.Id;
            }
            else if (!skipKeys)
            {
                InternalBPId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InternalBP")
                    && (ChangeTracker.OriginalValues["InternalBP"] == InternalBP))
                {
                    ChangeTracker.OriginalValues.Remove("InternalBP");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InternalBP", previousValue);
                }
                if (InternalBP != null && !InternalBP.ChangeTracker.ChangeTrackingEnabled)
                {
                    InternalBP.StartTracking();
                }
            }
        }
    
        private void FixupCommodity(Commodity previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LMEPositions.Contains(this))
            {
                previousValue.LMEPositions.Remove(this);
            }
    
            if (Commodity != null)
            {
                if (!Commodity.LMEPositions.Contains(this))
                {
                    Commodity.LMEPositions.Add(this);
                }
    
                CommodityId = Commodity.Id;
            }
            else if (!skipKeys)
            {
                CommodityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Commodity")
                    && (ChangeTracker.OriginalValues["Commodity"] == Commodity))
                {
                    ChangeTracker.OriginalValues.Remove("Commodity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Commodity", previousValue);
                }
                if (Commodity != null && !Commodity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Commodity.StartTracking();
                }
            }
        }
    
        private void FixupCarryPosition(LMEPosition previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CurrentPosition.Contains(this))
            {
                previousValue.CurrentPosition.Remove(this);
            }
    
            if (CarryPosition != null)
            {
                if (!CarryPosition.CurrentPosition.Contains(this))
                {
                    CarryPosition.CurrentPosition.Add(this);
                }
    
                CarryPositionId = CarryPosition.Id;
            }
            else if (!skipKeys)
            {
                CarryPositionId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CarryPosition")
                    && (ChangeTracker.OriginalValues["CarryPosition"] == CarryPosition))
                {
                    ChangeTracker.OriginalValues.Remove("CarryPosition");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CarryPosition", previousValue);
                }
                if (CarryPosition != null && !CarryPosition.ChangeTracker.ChangeTrackingEnabled)
                {
                    CarryPosition.StartTracking();
                }
            }
        }
    
        private void FixupQuota(Quota previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LMEPositions.Contains(this))
            {
                previousValue.LMEPositions.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.LMEPositions.Contains(this))
                {
                    Quota.LMEPositions.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            else if (!skipKeys)
            {
                QuotaId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupCurrentPosition(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LMEPosition item in e.NewItems)
                {
                    item.CarryPosition = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CurrentPosition", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LMEPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.CarryPosition, this))
                    {
                        item.CarryPosition = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CurrentPosition", item);
                    }
                }
            }
        }
    
        private void FixupHedgeLineLMEPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HedgeLineLMEPosition item in e.NewItems)
                {
                    item.LMEPosition = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HedgeLineLMEPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HedgeLineLMEPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.LMEPosition, this))
                    {
                        item.LMEPosition = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HedgeLineLMEPositions", item);
                    }
                }
            }
        }

        #endregion

    }
}
