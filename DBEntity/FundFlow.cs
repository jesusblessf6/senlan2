//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BankAccount))]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(FinancialAccount))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(PaymentRequest))]
    [KnownType(typeof(PaymentMean))]
    [KnownType(typeof(FundFlow))]
    public partial class FundFlow: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public int BPId
        {
            get { return _bPId; }
            set
            {
                if (_bPId != value)
                {
                    ChangeTracker.RecordOriginalValue("BPId", _bPId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner != null && BusinessPartner.Id != value)
                        {
                            BusinessPartner = null;
                        }
                    }
                    _bPId = value;
                    OnPropertyChanged("BPId");
                }
            }
        }
        private int _bPId;
    
        [DataMember]
        public int InternalBPId
        {
            get { return _internalBPId; }
            set
            {
                if (_internalBPId != value)
                {
                    ChangeTracker.RecordOriginalValue("InternalBPId", _internalBPId);
                    if (!IsDeserializing)
                    {
                        if (InternalCustomer != null && InternalCustomer.Id != value)
                        {
                            InternalCustomer = null;
                        }
                    }
                    _internalBPId = value;
                    OnPropertyChanged("InternalBPId");
                }
            }
        }
        private int _internalBPId;
    
        [DataMember]
        public Nullable<int> QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private Nullable<int> _quotaId;
    
        [DataMember]
        public Nullable<System.DateTime> TradeDate
        {
            get { return _tradeDate; }
            set
            {
                if (_tradeDate != value)
                {
                    _tradeDate = value;
                    OnPropertyChanged("TradeDate");
                }
            }
        }
        private Nullable<System.DateTime> _tradeDate;
    
        [DataMember]
        public Nullable<decimal> Amount
        {
            get { return _amount; }
            set
            {
                if (_amount != value)
                {
                    _amount = value;
                    OnPropertyChanged("Amount");
                }
            }
        }
        private Nullable<decimal> _amount;
    
        [DataMember]
        public int CurrencyId
        {
            get { return _currencyId; }
            set
            {
                if (_currencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CurrencyId", _currencyId);
                    if (!IsDeserializing)
                    {
                        if (Currency != null && Currency.Id != value)
                        {
                            Currency = null;
                        }
                    }
                    _currencyId = value;
                    OnPropertyChanged("CurrencyId");
                }
            }
        }
        private int _currencyId;
    
        [DataMember]
        public decimal Rate
        {
            get { return _rate; }
            set
            {
                if (_rate != value)
                {
                    _rate = value;
                    OnPropertyChanged("Rate");
                }
            }
        }
        private decimal _rate;
    
        [DataMember]
        public int FinancialAccountId
        {
            get { return _financialAccountId; }
            set
            {
                if (_financialAccountId != value)
                {
                    ChangeTracker.RecordOriginalValue("FinancialAccountId", _financialAccountId);
                    if (!IsDeserializing)
                    {
                        if (FinancialAccount != null && FinancialAccount.Id != value)
                        {
                            FinancialAccount = null;
                        }
                    }
                    _financialAccountId = value;
                    OnPropertyChanged("FinancialAccountId");
                }
            }
        }
        private int _financialAccountId;
    
        [DataMember]
        public int BankAccountId
        {
            get { return _bankAccountId; }
            set
            {
                if (_bankAccountId != value)
                {
                    ChangeTracker.RecordOriginalValue("BankAccountId", _bankAccountId);
                    if (!IsDeserializing)
                    {
                        if (BankAccount != null && BankAccount.Id != value)
                        {
                            BankAccount = null;
                        }
                    }
                    _bankAccountId = value;
                    OnPropertyChanged("BankAccountId");
                }
            }
        }
        private int _bankAccountId;
    
        [DataMember]
        public int RorP
        {
            get { return _rorP; }
            set
            {
                if (_rorP != value)
                {
                    _rorP = value;
                    OnPropertyChanged("RorP");
                }
            }
        }
        private int _rorP;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> PaymentRequestId
        {
            get { return _paymentRequestId; }
            set
            {
                if (_paymentRequestId != value)
                {
                    ChangeTracker.RecordOriginalValue("PaymentRequestId", _paymentRequestId);
                    if (!IsDeserializing)
                    {
                        if (PaymentRequest != null && PaymentRequest.Id != value)
                        {
                            PaymentRequest = null;
                        }
                    }
                    _paymentRequestId = value;
                    OnPropertyChanged("PaymentRequestId");
                }
            }
        }
        private Nullable<int> _paymentRequestId;
    
        [DataMember]
        public Nullable<int> PaymentMeanId
        {
            get { return _paymentMeanId; }
            set
            {
                if (_paymentMeanId != value)
                {
                    ChangeTracker.RecordOriginalValue("PaymentMeanId", _paymentMeanId);
                    if (!IsDeserializing)
                    {
                        if (PaymentMean != null && PaymentMean.Id != value)
                        {
                            PaymentMean = null;
                        }
                    }
                    _paymentMeanId = value;
                    OnPropertyChanged("PaymentMeanId");
                }
            }
        }
        private Nullable<int> _paymentMeanId;
    
        [DataMember]
        public Nullable<int> FundFlowId
        {
            get { return _fundFlowId; }
            set
            {
                if (_fundFlowId != value)
                {
                    ChangeTracker.RecordOriginalValue("FundFlowId", _fundFlowId);
                    if (!IsDeserializing)
                    {
                        if (FundFlow2 != null && FundFlow2.Id != value)
                        {
                            FundFlow2 = null;
                        }
                    }
                    _fundFlowId = value;
                    OnPropertyChanged("FundFlowId");
                }
            }
        }
        private Nullable<int> _fundFlowId;
    
        [DataMember]
        public bool IsAutoGenerated
        {
            get { return _isAutoGenerated; }
            set
            {
                if (_isAutoGenerated != value)
                {
                    _isAutoGenerated = value;
                    OnPropertyChanged("IsAutoGenerated");
                }
            }
        }
        private bool _isAutoGenerated;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BankAccount BankAccount
        {
            get { return _bankAccount; }
            set
            {
                if (!ReferenceEquals(_bankAccount, value))
                {
                    var previousValue = _bankAccount;
                    _bankAccount = value;
                    FixupBankAccount(previousValue);
                    OnNavigationPropertyChanged("BankAccount");
                }
            }
        }
        private BankAccount _bankAccount;
    
        [DataMember]
        public BusinessPartner BusinessPartner
        {
            get { return _businessPartner; }
            set
            {
                if (!ReferenceEquals(_businessPartner, value))
                {
                    var previousValue = _businessPartner;
                    _businessPartner = value;
                    FixupBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner");
                }
            }
        }
        private BusinessPartner _businessPartner;
    
        [DataMember]
        public BusinessPartner InternalCustomer
        {
            get { return _internalCustomer; }
            set
            {
                if (!ReferenceEquals(_internalCustomer, value))
                {
                    var previousValue = _internalCustomer;
                    _internalCustomer = value;
                    FixupInternalCustomer(previousValue);
                    OnNavigationPropertyChanged("InternalCustomer");
                }
            }
        }
        private BusinessPartner _internalCustomer;
    
        [DataMember]
        public Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                    OnNavigationPropertyChanged("Currency");
                }
            }
        }
        private Currency _currency;
    
        [DataMember]
        public FinancialAccount FinancialAccount
        {
            get { return _financialAccount; }
            set
            {
                if (!ReferenceEquals(_financialAccount, value))
                {
                    var previousValue = _financialAccount;
                    _financialAccount = value;
                    FixupFinancialAccount(previousValue);
                    OnNavigationPropertyChanged("FinancialAccount");
                }
            }
        }
        private FinancialAccount _financialAccount;
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public PaymentRequest PaymentRequest
        {
            get { return _paymentRequest; }
            set
            {
                if (!ReferenceEquals(_paymentRequest, value))
                {
                    var previousValue = _paymentRequest;
                    _paymentRequest = value;
                    FixupPaymentRequest(previousValue);
                    OnNavigationPropertyChanged("PaymentRequest");
                }
            }
        }
        private PaymentRequest _paymentRequest;
    
        [DataMember]
        public PaymentMean PaymentMean
        {
            get { return _paymentMean; }
            set
            {
                if (!ReferenceEquals(_paymentMean, value))
                {
                    var previousValue = _paymentMean;
                    _paymentMean = value;
                    FixupPaymentMean(previousValue);
                    OnNavigationPropertyChanged("PaymentMean");
                }
            }
        }
        private PaymentMean _paymentMean;
    
        [DataMember]
        public TrackableCollection<FundFlow> FundFlow1
        {
            get
            {
                if (_fundFlow1 == null)
                {
                    _fundFlow1 = new TrackableCollection<FundFlow>();
                    _fundFlow1.CollectionChanged += FixupFundFlow1;
                }
                return _fundFlow1;
            }
            set
            {
                if (!ReferenceEquals(_fundFlow1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fundFlow1 != null)
                    {
                        _fundFlow1.CollectionChanged -= FixupFundFlow1;
                    }
                    _fundFlow1 = value;
                    if (_fundFlow1 != null)
                    {
                        _fundFlow1.CollectionChanged += FixupFundFlow1;
                    }
                    OnNavigationPropertyChanged("FundFlow1");
                }
            }
        }
        private TrackableCollection<FundFlow> _fundFlow1;
    
        [DataMember]
        public FundFlow FundFlow2
        {
            get { return _fundFlow2; }
            set
            {
                if (!ReferenceEquals(_fundFlow2, value))
                {
                    var previousValue = _fundFlow2;
                    _fundFlow2 = value;
                    FixupFundFlow2(previousValue);
                    OnNavigationPropertyChanged("FundFlow2");
                }
            }
        }
        private FundFlow _fundFlow2;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BankAccount = null;
            BusinessPartner = null;
            InternalCustomer = null;
            Currency = null;
            FinancialAccount = null;
            Quota = null;
            PaymentRequest = null;
            PaymentMean = null;
            FundFlow1.Clear();
            FundFlow2 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBankAccount(BankAccount previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlows.Contains(this))
            {
                previousValue.FundFlows.Remove(this);
            }
    
            if (BankAccount != null)
            {
                if (!BankAccount.FundFlows.Contains(this))
                {
                    BankAccount.FundFlows.Add(this);
                }
    
                BankAccountId = BankAccount.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BankAccount")
                    && (ChangeTracker.OriginalValues["BankAccount"] == BankAccount))
                {
                    ChangeTracker.OriginalValues.Remove("BankAccount");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BankAccount", previousValue);
                }
                if (BankAccount != null && !BankAccount.ChangeTracker.ChangeTrackingEnabled)
                {
                    BankAccount.StartTracking();
                }
            }
        }
    
        private void FixupBusinessPartner(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlows.Contains(this))
            {
                previousValue.FundFlows.Remove(this);
            }
    
            if (BusinessPartner != null)
            {
                if (!BusinessPartner.FundFlows.Contains(this))
                {
                    BusinessPartner.FundFlows.Add(this);
                }
    
                BPId = BusinessPartner.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner")
                    && (ChangeTracker.OriginalValues["BusinessPartner"] == BusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner", previousValue);
                }
                if (BusinessPartner != null && !BusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupInternalCustomer(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlows1.Contains(this))
            {
                previousValue.FundFlows1.Remove(this);
            }
    
            if (InternalCustomer != null)
            {
                if (!InternalCustomer.FundFlows1.Contains(this))
                {
                    InternalCustomer.FundFlows1.Add(this);
                }
    
                InternalBPId = InternalCustomer.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InternalCustomer")
                    && (ChangeTracker.OriginalValues["InternalCustomer"] == InternalCustomer))
                {
                    ChangeTracker.OriginalValues.Remove("InternalCustomer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InternalCustomer", previousValue);
                }
                if (InternalCustomer != null && !InternalCustomer.ChangeTracker.ChangeTrackingEnabled)
                {
                    InternalCustomer.StartTracking();
                }
            }
        }
    
        private void FixupCurrency(Currency previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlows.Contains(this))
            {
                previousValue.FundFlows.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.FundFlows.Contains(this))
                {
                    Currency.FundFlows.Add(this);
                }
    
                CurrencyId = Currency.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Currency")
                    && (ChangeTracker.OriginalValues["Currency"] == Currency))
                {
                    ChangeTracker.OriginalValues.Remove("Currency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Currency", previousValue);
                }
                if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
                {
                    Currency.StartTracking();
                }
            }
        }
    
        private void FixupFinancialAccount(FinancialAccount previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlows.Contains(this))
            {
                previousValue.FundFlows.Remove(this);
            }
    
            if (FinancialAccount != null)
            {
                if (!FinancialAccount.FundFlows.Contains(this))
                {
                    FinancialAccount.FundFlows.Add(this);
                }
    
                FinancialAccountId = FinancialAccount.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FinancialAccount")
                    && (ChangeTracker.OriginalValues["FinancialAccount"] == FinancialAccount))
                {
                    ChangeTracker.OriginalValues.Remove("FinancialAccount");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FinancialAccount", previousValue);
                }
                if (FinancialAccount != null && !FinancialAccount.ChangeTracker.ChangeTrackingEnabled)
                {
                    FinancialAccount.StartTracking();
                }
            }
        }
    
        private void FixupQuota(Quota previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlows.Contains(this))
            {
                previousValue.FundFlows.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.FundFlows.Contains(this))
                {
                    Quota.FundFlows.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            else if (!skipKeys)
            {
                QuotaId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupPaymentRequest(PaymentRequest previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlows.Contains(this))
            {
                previousValue.FundFlows.Remove(this);
            }
    
            if (PaymentRequest != null)
            {
                if (!PaymentRequest.FundFlows.Contains(this))
                {
                    PaymentRequest.FundFlows.Add(this);
                }
    
                PaymentRequestId = PaymentRequest.Id;
            }
            else if (!skipKeys)
            {
                PaymentRequestId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentRequest")
                    && (ChangeTracker.OriginalValues["PaymentRequest"] == PaymentRequest))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentRequest");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentRequest", previousValue);
                }
                if (PaymentRequest != null && !PaymentRequest.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentRequest.StartTracking();
                }
            }
        }
    
        private void FixupPaymentMean(PaymentMean previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlows.Contains(this))
            {
                previousValue.FundFlows.Remove(this);
            }
    
            if (PaymentMean != null)
            {
                if (!PaymentMean.FundFlows.Contains(this))
                {
                    PaymentMean.FundFlows.Add(this);
                }
    
                PaymentMeanId = PaymentMean.Id;
            }
            else if (!skipKeys)
            {
                PaymentMeanId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentMean")
                    && (ChangeTracker.OriginalValues["PaymentMean"] == PaymentMean))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentMean");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentMean", previousValue);
                }
                if (PaymentMean != null && !PaymentMean.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentMean.StartTracking();
                }
            }
        }
    
        private void FixupFundFlow2(FundFlow previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FundFlow1.Contains(this))
            {
                previousValue.FundFlow1.Remove(this);
            }
    
            if (FundFlow2 != null)
            {
                if (!FundFlow2.FundFlow1.Contains(this))
                {
                    FundFlow2.FundFlow1.Add(this);
                }
    
                FundFlowId = FundFlow2.Id;
            }
            else if (!skipKeys)
            {
                FundFlowId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FundFlow2")
                    && (ChangeTracker.OriginalValues["FundFlow2"] == FundFlow2))
                {
                    ChangeTracker.OriginalValues.Remove("FundFlow2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FundFlow2", previousValue);
                }
                if (FundFlow2 != null && !FundFlow2.ChangeTracker.ChangeTrackingEnabled)
                {
                    FundFlow2.StartTracking();
                }
            }
        }
    
        private void FixupFundFlow1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FundFlow item in e.NewItems)
                {
                    item.FundFlow2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FundFlow1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FundFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.FundFlow2, this))
                    {
                        item.FundFlow2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FundFlow1", item);
                    }
                }
            }
        }

        #endregion

    }
}
