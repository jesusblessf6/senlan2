//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Approval))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Log))]
    public partial class ApprovalStage: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public int ApprovalId
        {
            get { return _approvalId; }
            set
            {
                if (_approvalId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalId", _approvalId);
                    if (!IsDeserializing)
                    {
                        if (Approval != null && Approval.Id != value)
                        {
                            Approval = null;
                        }
                    }
                    _approvalId = value;
                    OnPropertyChanged("ApprovalId");
                }
            }
        }
        private int _approvalId;
    
        [DataMember]
        public Nullable<int> StageIndex
        {
            get { return _stageIndex; }
            set
            {
                if (_stageIndex != value)
                {
                    _stageIndex = value;
                    OnPropertyChanged("StageIndex");
                }
            }
        }
        private Nullable<int> _stageIndex;
    
        [DataMember]
        public int ApprovalUserId
        {
            get { return _approvalUserId; }
            set
            {
                if (_approvalUserId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalUserId", _approvalUserId);
                    if (!IsDeserializing)
                    {
                        if (ApprovalUser != null && ApprovalUser.Id != value)
                        {
                            ApprovalUser = null;
                        }
                    }
                    _approvalUserId = value;
                    OnPropertyChanged("ApprovalUserId");
                }
            }
        }
        private int _approvalUserId;
    
        [DataMember]
        public Nullable<int> OriginStageId
        {
            get { return _originStageId; }
            set
            {
                if (_originStageId != value)
                {
                    _originStageId = value;
                    OnPropertyChanged("OriginStageId");
                }
            }
        }
        private Nullable<int> _originStageId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Approval Approval
        {
            get { return _approval; }
            set
            {
                if (!ReferenceEquals(_approval, value))
                {
                    var previousValue = _approval;
                    _approval = value;
                    FixupApproval(previousValue);
                    OnNavigationPropertyChanged("Approval");
                }
            }
        }
        private Approval _approval;
    
        [DataMember]
        public User ApprovalUser
        {
            get { return _approvalUser; }
            set
            {
                if (!ReferenceEquals(_approvalUser, value))
                {
                    var previousValue = _approvalUser;
                    _approvalUser = value;
                    FixupApprovalUser(previousValue);
                    OnNavigationPropertyChanged("ApprovalUser");
                }
            }
        }
        private User _approvalUser;
    
        [DataMember]
        public TrackableCollection<Log> Logs
        {
            get
            {
                if (_logs == null)
                {
                    _logs = new TrackableCollection<Log>();
                    _logs.CollectionChanged += FixupLogs;
                }
                return _logs;
            }
            set
            {
                if (!ReferenceEquals(_logs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_logs != null)
                    {
                        _logs.CollectionChanged -= FixupLogs;
                    }
                    _logs = value;
                    if (_logs != null)
                    {
                        _logs.CollectionChanged += FixupLogs;
                    }
                    OnNavigationPropertyChanged("Logs");
                }
            }
        }
        private TrackableCollection<Log> _logs;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Approval = null;
            ApprovalUser = null;
            Logs.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupApproval(Approval previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ApprovalStages.Contains(this))
            {
                previousValue.ApprovalStages.Remove(this);
            }
    
            if (Approval != null)
            {
                if (!Approval.ApprovalStages.Contains(this))
                {
                    Approval.ApprovalStages.Add(this);
                }
    
                ApprovalId = Approval.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Approval")
                    && (ChangeTracker.OriginalValues["Approval"] == Approval))
                {
                    ChangeTracker.OriginalValues.Remove("Approval");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Approval", previousValue);
                }
                if (Approval != null && !Approval.ChangeTracker.ChangeTrackingEnabled)
                {
                    Approval.StartTracking();
                }
            }
        }
    
        private void FixupApprovalUser(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ApprovalStages.Contains(this))
            {
                previousValue.ApprovalStages.Remove(this);
            }
    
            if (ApprovalUser != null)
            {
                if (!ApprovalUser.ApprovalStages.Contains(this))
                {
                    ApprovalUser.ApprovalStages.Add(this);
                }
    
                ApprovalUserId = ApprovalUser.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ApprovalUser")
                    && (ChangeTracker.OriginalValues["ApprovalUser"] == ApprovalUser))
                {
                    ChangeTracker.OriginalValues.Remove("ApprovalUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ApprovalUser", previousValue);
                }
                if (ApprovalUser != null && !ApprovalUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    ApprovalUser.StartTracking();
                }
            }
        }
    
        private void FixupLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Log item in e.NewItems)
                {
                    item.ApprovalStage = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Logs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Log item in e.OldItems)
                {
                    if (ReferenceEquals(item.ApprovalStage, this))
                    {
                        item.ApprovalStage = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Logs", item);
                    }
                }
            }
        }

        #endregion

    }
}
