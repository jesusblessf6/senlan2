//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(ContractUDF))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(BankAccount))]
    [KnownType(typeof(User))]
    public partial class Contract: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string ContractNo
        {
            get { return _contractNo; }
            set
            {
                if (_contractNo != value)
                {
                    _contractNo = value;
                    OnPropertyChanged("ContractNo");
                }
            }
        }
        private string _contractNo;
    
        [DataMember]
        public Nullable<System.DateTime> SignDate
        {
            get { return _signDate; }
            set
            {
                if (_signDate != value)
                {
                    _signDate = value;
                    OnPropertyChanged("SignDate");
                }
            }
        }
        private Nullable<System.DateTime> _signDate;
    
        [DataMember]
        public Nullable<int> BPId
        {
            get { return _bPId; }
            set
            {
                if (_bPId != value)
                {
                    ChangeTracker.RecordOriginalValue("BPId", _bPId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner != null && BusinessPartner.Id != value)
                        {
                            BusinessPartner = null;
                        }
                    }
                    _bPId = value;
                    OnPropertyChanged("BPId");
                }
            }
        }
        private Nullable<int> _bPId;
    
        [DataMember]
        public Nullable<int> InternalCustomerId
        {
            get { return _internalCustomerId; }
            set
            {
                if (_internalCustomerId != value)
                {
                    ChangeTracker.RecordOriginalValue("InternalCustomerId", _internalCustomerId);
                    if (!IsDeserializing)
                    {
                        if (InternalCustomer != null && InternalCustomer.Id != value)
                        {
                            InternalCustomer = null;
                        }
                    }
                    _internalCustomerId = value;
                    OnPropertyChanged("InternalCustomerId");
                }
            }
        }
        private Nullable<int> _internalCustomerId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public int TradeType
        {
            get { return _tradeType; }
            set
            {
                if (_tradeType != value)
                {
                    _tradeType = value;
                    OnPropertyChanged("TradeType");
                }
            }
        }
        private int _tradeType;
    
        [DataMember]
        public int ContractType
        {
            get { return _contractType; }
            set
            {
                if (_contractType != value)
                {
                    _contractType = value;
                    OnPropertyChanged("ContractType");
                }
            }
        }
        private int _contractType;
    
        [DataMember]
        public Nullable<int> UDFId
        {
            get { return _uDFId; }
            set
            {
                if (_uDFId != value)
                {
                    ChangeTracker.RecordOriginalValue("UDFId", _uDFId);
                    if (!IsDeserializing)
                    {
                        if (ContractUDF != null && ContractUDF.Id != value)
                        {
                            ContractUDF = null;
                        }
                    }
                    _uDFId = value;
                    OnPropertyChanged("UDFId");
                }
            }
        }
        private Nullable<int> _uDFId;
    
        [DataMember]
        public string ExContractNo
        {
            get { return _exContractNo; }
            set
            {
                if (_exContractNo != value)
                {
                    _exContractNo = value;
                    OnPropertyChanged("ExContractNo");
                }
            }
        }
        private string _exContractNo;
    
        [DataMember]
        public Nullable<int> QtyLimit
        {
            get { return _qtyLimit; }
            set
            {
                if (_qtyLimit != value)
                {
                    _qtyLimit = value;
                    OnPropertyChanged("QtyLimit");
                }
            }
        }
        private Nullable<int> _qtyLimit;
    
        [DataMember]
        public Nullable<bool> IsNeedAutoGenerated
        {
            get { return _isNeedAutoGenerated; }
            set
            {
                if (_isNeedAutoGenerated != value)
                {
                    _isNeedAutoGenerated = value;
                    OnPropertyChanged("IsNeedAutoGenerated");
                }
            }
        }
        private Nullable<bool> _isNeedAutoGenerated;
    
        [DataMember]
        public Nullable<int> BankAccountId
        {
            get { return _bankAccountId; }
            set
            {
                if (_bankAccountId != value)
                {
                    ChangeTracker.RecordOriginalValue("BankAccountId", _bankAccountId);
                    if (!IsDeserializing)
                    {
                        if (BankAccount != null && BankAccount.Id != value)
                        {
                            BankAccount = null;
                        }
                    }
                    _bankAccountId = value;
                    OnPropertyChanged("BankAccountId");
                }
            }
        }
        private Nullable<int> _bankAccountId;
    
        [DataMember]
        public Nullable<int> Sales
        {
            get { return _sales; }
            set
            {
                if (_sales != value)
                {
                    ChangeTracker.RecordOriginalValue("Sales", _sales);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                    }
                    _sales = value;
                    OnPropertyChanged("Sales");
                }
            }
        }
        private Nullable<int> _sales;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BusinessPartner BusinessPartner
        {
            get { return _businessPartner; }
            set
            {
                if (!ReferenceEquals(_businessPartner, value))
                {
                    var previousValue = _businessPartner;
                    _businessPartner = value;
                    FixupBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner");
                }
            }
        }
        private BusinessPartner _businessPartner;
    
        [DataMember]
        public BusinessPartner InternalCustomer
        {
            get { return _internalCustomer; }
            set
            {
                if (!ReferenceEquals(_internalCustomer, value))
                {
                    var previousValue = _internalCustomer;
                    _internalCustomer = value;
                    FixupInternalCustomer(previousValue);
                    OnNavigationPropertyChanged("InternalCustomer");
                }
            }
        }
        private BusinessPartner _internalCustomer;
    
        [DataMember]
        public ContractUDF ContractUDF
        {
            get { return _contractUDF; }
            set
            {
                if (!ReferenceEquals(_contractUDF, value))
                {
                    var previousValue = _contractUDF;
                    _contractUDF = value;
                    FixupContractUDF(previousValue);
                    OnNavigationPropertyChanged("ContractUDF");
                }
            }
        }
        private ContractUDF _contractUDF;
    
        [DataMember]
        public TrackableCollection<Quota> Quotas
        {
            get
            {
                if (_quotas == null)
                {
                    _quotas = new TrackableCollection<Quota>();
                    _quotas.CollectionChanged += FixupQuotas;
                }
                return _quotas;
            }
            set
            {
                if (!ReferenceEquals(_quotas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged -= FixupQuotas;
                    }
                    _quotas = value;
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged += FixupQuotas;
                    }
                    OnNavigationPropertyChanged("Quotas");
                }
            }
        }
        private TrackableCollection<Quota> _quotas;
    
        [DataMember]
        public BankAccount BankAccount
        {
            get { return _bankAccount; }
            set
            {
                if (!ReferenceEquals(_bankAccount, value))
                {
                    var previousValue = _bankAccount;
                    _bankAccount = value;
                    FixupBankAccount(previousValue);
                    OnNavigationPropertyChanged("BankAccount");
                }
            }
        }
        private BankAccount _bankAccount;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BusinessPartner = null;
            InternalCustomer = null;
            ContractUDF = null;
            Quotas.Clear();
            BankAccount = null;
            User = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBusinessPartner(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Contracts.Contains(this))
            {
                previousValue.Contracts.Remove(this);
            }
    
            if (BusinessPartner != null)
            {
                if (!BusinessPartner.Contracts.Contains(this))
                {
                    BusinessPartner.Contracts.Add(this);
                }
    
                BPId = BusinessPartner.Id;
            }
            else if (!skipKeys)
            {
                BPId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner")
                    && (ChangeTracker.OriginalValues["BusinessPartner"] == BusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner", previousValue);
                }
                if (BusinessPartner != null && !BusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupInternalCustomer(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Contracts1.Contains(this))
            {
                previousValue.Contracts1.Remove(this);
            }
    
            if (InternalCustomer != null)
            {
                if (!InternalCustomer.Contracts1.Contains(this))
                {
                    InternalCustomer.Contracts1.Add(this);
                }
    
                InternalCustomerId = InternalCustomer.Id;
            }
            else if (!skipKeys)
            {
                InternalCustomerId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InternalCustomer")
                    && (ChangeTracker.OriginalValues["InternalCustomer"] == InternalCustomer))
                {
                    ChangeTracker.OriginalValues.Remove("InternalCustomer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InternalCustomer", previousValue);
                }
                if (InternalCustomer != null && !InternalCustomer.ChangeTracker.ChangeTrackingEnabled)
                {
                    InternalCustomer.StartTracking();
                }
            }
        }
    
        private void FixupContractUDF(ContractUDF previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Contracts.Contains(this))
            {
                previousValue.Contracts.Remove(this);
            }
    
            if (ContractUDF != null)
            {
                if (!ContractUDF.Contracts.Contains(this))
                {
                    ContractUDF.Contracts.Add(this);
                }
    
                UDFId = ContractUDF.Id;
            }
            else if (!skipKeys)
            {
                UDFId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ContractUDF")
                    && (ChangeTracker.OriginalValues["ContractUDF"] == ContractUDF))
                {
                    ChangeTracker.OriginalValues.Remove("ContractUDF");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ContractUDF", previousValue);
                }
                if (ContractUDF != null && !ContractUDF.ChangeTracker.ChangeTrackingEnabled)
                {
                    ContractUDF.StartTracking();
                }
            }
        }
    
        private void FixupBankAccount(BankAccount previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Contracts.Contains(this))
            {
                previousValue.Contracts.Remove(this);
            }
    
            if (BankAccount != null)
            {
                if (!BankAccount.Contracts.Contains(this))
                {
                    BankAccount.Contracts.Add(this);
                }
    
                BankAccountId = BankAccount.Id;
            }
            else if (!skipKeys)
            {
                BankAccountId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BankAccount")
                    && (ChangeTracker.OriginalValues["BankAccount"] == BankAccount))
                {
                    ChangeTracker.OriginalValues.Remove("BankAccount");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BankAccount", previousValue);
                }
                if (BankAccount != null && !BankAccount.ChangeTracker.ChangeTrackingEnabled)
                {
                    BankAccount.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Contracts.Contains(this))
            {
                previousValue.Contracts.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Contracts.Contains(this))
                {
                    User.Contracts.Add(this);
                }
    
                Sales = User.Id;
            }
            else if (!skipKeys)
            {
                Sales = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupQuotas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Quota item in e.NewItems)
                {
                    item.Contract = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Quotas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Quota item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contract, this))
                    {
                        item.Contract = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Quotas", item);
                    }
                }
            }
        }

        #endregion

    }
}
