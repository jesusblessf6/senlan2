//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(VATInvoiceLine))]
    [KnownType(typeof(VATInvoiceRequest))]
    [KnownType(typeof(Approval))]
    [KnownType(typeof(Document))]
    [KnownType(typeof(User))]
    public partial class VATInvoiceRequestLine: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedBy", _createdBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                    }
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public int QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private int _quotaId;
    
        [DataMember]
        public Nullable<decimal> RequestQuantity
        {
            get { return _requestQuantity; }
            set
            {
                if (_requestQuantity != value)
                {
                    _requestQuantity = value;
                    OnPropertyChanged("RequestQuantity");
                }
            }
        }
        private Nullable<decimal> _requestQuantity;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public int VATInvoiceRequestId
        {
            get { return _vATInvoiceRequestId; }
            set
            {
                if (_vATInvoiceRequestId != value)
                {
                    ChangeTracker.RecordOriginalValue("VATInvoiceRequestId", _vATInvoiceRequestId);
                    if (!IsDeserializing)
                    {
                        if (VATInvoiceRequest != null && VATInvoiceRequest.Id != value)
                        {
                            VATInvoiceRequest = null;
                        }
                    }
                    _vATInvoiceRequestId = value;
                    OnPropertyChanged("VATInvoiceRequestId");
                }
            }
        }
        private int _vATInvoiceRequestId;
    
        [DataMember]
        public Nullable<decimal> RequestAmount
        {
            get { return _requestAmount; }
            set
            {
                if (_requestAmount != value)
                {
                    _requestAmount = value;
                    OnPropertyChanged("RequestAmount");
                }
            }
        }
        private Nullable<decimal> _requestAmount;
    
        [DataMember]
        public Nullable<int> ApprovalId
        {
            get { return _approvalId; }
            set
            {
                if (_approvalId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalId", _approvalId);
                    if (!IsDeserializing)
                    {
                        if (Approval != null && Approval.Id != value)
                        {
                            Approval = null;
                        }
                    }
                    _approvalId = value;
                    OnPropertyChanged("ApprovalId");
                }
            }
        }
        private Nullable<int> _approvalId;
    
        [DataMember]
        public Nullable<int> ApprovalStageIndex
        {
            get { return _approvalStageIndex; }
            set
            {
                if (_approvalStageIndex != value)
                {
                    _approvalStageIndex = value;
                    OnPropertyChanged("ApprovalStageIndex");
                }
            }
        }
        private Nullable<int> _approvalStageIndex;
    
        [DataMember]
        public Nullable<int> DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentId", _documentId);
                    if (!IsDeserializing)
                    {
                        if (Document != null && Document.Id != value)
                        {
                            Document = null;
                        }
                    }
                    _documentId = value;
                    OnPropertyChanged("DocumentId");
                }
            }
        }
        private Nullable<int> _documentId;
    
        [DataMember]
        public Nullable<int> ApproveStatus
        {
            get { return _approveStatus; }
            set
            {
                if (_approveStatus != value)
                {
                    _approveStatus = value;
                    OnPropertyChanged("ApproveStatus");
                }
            }
        }
        private Nullable<int> _approveStatus;
    
        [DataMember]
        public string RejectReason
        {
            get { return _rejectReason; }
            set
            {
                if (_rejectReason != value)
                {
                    _rejectReason = value;
                    OnPropertyChanged("RejectReason");
                }
            }
        }
        private string _rejectReason;
    
        [DataMember]
        public Nullable<decimal> RequestPrice
        {
            get { return _requestPrice; }
            set
            {
                if (_requestPrice != value)
                {
                    _requestPrice = value;
                    OnPropertyChanged("RequestPrice");
                }
            }
        }
        private Nullable<decimal> _requestPrice;
    
        [DataMember]
        public Nullable<int> VATStatus
        {
            get { return _vATStatus; }
            set
            {
                if (_vATStatus != value)
                {
                    _vATStatus = value;
                    OnPropertyChanged("VATStatus");
                }
            }
        }
        private Nullable<int> _vATStatus;
    
        [DataMember]
        public Nullable<decimal> VATInvoicedQuantity
        {
            get { return _vATInvoicedQuantity; }
            set
            {
                if (_vATInvoicedQuantity != value)
                {
                    _vATInvoicedQuantity = value;
                    OnPropertyChanged("VATInvoicedQuantity");
                }
            }
        }
        private Nullable<decimal> _vATInvoicedQuantity;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public TrackableCollection<VATInvoiceLine> VATInvoiceLines
        {
            get
            {
                if (_vATInvoiceLines == null)
                {
                    _vATInvoiceLines = new TrackableCollection<VATInvoiceLine>();
                    _vATInvoiceLines.CollectionChanged += FixupVATInvoiceLines;
                }
                return _vATInvoiceLines;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoiceLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoiceLines != null)
                    {
                        _vATInvoiceLines.CollectionChanged -= FixupVATInvoiceLines;
                    }
                    _vATInvoiceLines = value;
                    if (_vATInvoiceLines != null)
                    {
                        _vATInvoiceLines.CollectionChanged += FixupVATInvoiceLines;
                    }
                    OnNavigationPropertyChanged("VATInvoiceLines");
                }
            }
        }
        private TrackableCollection<VATInvoiceLine> _vATInvoiceLines;
    
        [DataMember]
        public VATInvoiceRequest VATInvoiceRequest
        {
            get { return _vATInvoiceRequest; }
            set
            {
                if (!ReferenceEquals(_vATInvoiceRequest, value))
                {
                    var previousValue = _vATInvoiceRequest;
                    _vATInvoiceRequest = value;
                    FixupVATInvoiceRequest(previousValue);
                    OnNavigationPropertyChanged("VATInvoiceRequest");
                }
            }
        }
        private VATInvoiceRequest _vATInvoiceRequest;
    
        [DataMember]
        public Approval Approval
        {
            get { return _approval; }
            set
            {
                if (!ReferenceEquals(_approval, value))
                {
                    var previousValue = _approval;
                    _approval = value;
                    FixupApproval(previousValue);
                    OnNavigationPropertyChanged("Approval");
                }
            }
        }
        private Approval _approval;
    
        [DataMember]
        public Document Document
        {
            get { return _document; }
            set
            {
                if (!ReferenceEquals(_document, value))
                {
                    var previousValue = _document;
                    _document = value;
                    FixupDocument(previousValue);
                    OnNavigationPropertyChanged("Document");
                }
            }
        }
        private Document _document;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Quota = null;
            VATInvoiceLines.Clear();
            VATInvoiceRequest = null;
            Approval = null;
            Document = null;
            User = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupQuota(Quota previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VATInvoiceRequestLines.Contains(this))
            {
                previousValue.VATInvoiceRequestLines.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.VATInvoiceRequestLines.Contains(this))
                {
                    Quota.VATInvoiceRequestLines.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupVATInvoiceRequest(VATInvoiceRequest previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VATInvoiceRequestLines.Contains(this))
            {
                previousValue.VATInvoiceRequestLines.Remove(this);
            }
    
            if (VATInvoiceRequest != null)
            {
                if (!VATInvoiceRequest.VATInvoiceRequestLines.Contains(this))
                {
                    VATInvoiceRequest.VATInvoiceRequestLines.Add(this);
                }
    
                VATInvoiceRequestId = VATInvoiceRequest.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VATInvoiceRequest")
                    && (ChangeTracker.OriginalValues["VATInvoiceRequest"] == VATInvoiceRequest))
                {
                    ChangeTracker.OriginalValues.Remove("VATInvoiceRequest");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VATInvoiceRequest", previousValue);
                }
                if (VATInvoiceRequest != null && !VATInvoiceRequest.ChangeTracker.ChangeTrackingEnabled)
                {
                    VATInvoiceRequest.StartTracking();
                }
            }
        }
    
        private void FixupApproval(Approval previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VATInvoiceRequestLines.Contains(this))
            {
                previousValue.VATInvoiceRequestLines.Remove(this);
            }
    
            if (Approval != null)
            {
                if (!Approval.VATInvoiceRequestLines.Contains(this))
                {
                    Approval.VATInvoiceRequestLines.Add(this);
                }
    
                ApprovalId = Approval.Id;
            }
            else if (!skipKeys)
            {
                ApprovalId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Approval")
                    && (ChangeTracker.OriginalValues["Approval"] == Approval))
                {
                    ChangeTracker.OriginalValues.Remove("Approval");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Approval", previousValue);
                }
                if (Approval != null && !Approval.ChangeTracker.ChangeTrackingEnabled)
                {
                    Approval.StartTracking();
                }
            }
        }
    
        private void FixupDocument(Document previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VATInvoiceRequestLines.Contains(this))
            {
                previousValue.VATInvoiceRequestLines.Remove(this);
            }
    
            if (Document != null)
            {
                if (!Document.VATInvoiceRequestLines.Contains(this))
                {
                    Document.VATInvoiceRequestLines.Add(this);
                }
    
                DocumentId = Document.Id;
            }
            else if (!skipKeys)
            {
                DocumentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Document")
                    && (ChangeTracker.OriginalValues["Document"] == Document))
                {
                    ChangeTracker.OriginalValues.Remove("Document");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Document", previousValue);
                }
                if (Document != null && !Document.ChangeTracker.ChangeTrackingEnabled)
                {
                    Document.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VATInvoiceRequestLines.Contains(this))
            {
                previousValue.VATInvoiceRequestLines.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.VATInvoiceRequestLines.Contains(this))
                {
                    User.VATInvoiceRequestLines.Add(this);
                }
    
                CreatedBy = User.Id;
            }
            else if (!skipKeys)
            {
                CreatedBy = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupVATInvoiceLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoiceLine item in e.NewItems)
                {
                    item.VATInvoiceRequestLine = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoiceLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoiceLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.VATInvoiceRequestLine, this))
                    {
                        item.VATInvoiceRequestLine = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoiceLines", item);
                    }
                }
            }
        }

        #endregion

    }
}
