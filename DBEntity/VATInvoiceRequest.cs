//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(VATInvoice))]
    [KnownType(typeof(VATInvoiceRequestLine))]
    public partial class VATInvoiceRequest: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public int BPId
        {
            get { return _bPId; }
            set
            {
                if (_bPId != value)
                {
                    ChangeTracker.RecordOriginalValue("BPId", _bPId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner != null && BusinessPartner.Id != value)
                        {
                            BusinessPartner = null;
                        }
                    }
                    _bPId = value;
                    OnPropertyChanged("BPId");
                }
            }
        }
        private int _bPId;
    
        [DataMember]
        public int InternalBPId
        {
            get { return _internalBPId; }
            set
            {
                if (_internalBPId != value)
                {
                    ChangeTracker.RecordOriginalValue("InternalBPId", _internalBPId);
                    if (!IsDeserializing)
                    {
                        if (InternalCustomer != null && InternalCustomer.Id != value)
                        {
                            InternalCustomer = null;
                        }
                    }
                    _internalBPId = value;
                    OnPropertyChanged("InternalBPId");
                }
            }
        }
        private int _internalBPId;
    
        [DataMember]
        public Nullable<System.DateTime> RequestDate
        {
            get { return _requestDate; }
            set
            {
                if (_requestDate != value)
                {
                    _requestDate = value;
                    OnPropertyChanged("RequestDate");
                }
            }
        }
        private Nullable<System.DateTime> _requestDate;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BusinessPartner BusinessPartner
        {
            get { return _businessPartner; }
            set
            {
                if (!ReferenceEquals(_businessPartner, value))
                {
                    var previousValue = _businessPartner;
                    _businessPartner = value;
                    FixupBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner");
                }
            }
        }
        private BusinessPartner _businessPartner;
    
        [DataMember]
        public BusinessPartner InternalCustomer
        {
            get { return _internalCustomer; }
            set
            {
                if (!ReferenceEquals(_internalCustomer, value))
                {
                    var previousValue = _internalCustomer;
                    _internalCustomer = value;
                    FixupInternalCustomer(previousValue);
                    OnNavigationPropertyChanged("InternalCustomer");
                }
            }
        }
        private BusinessPartner _internalCustomer;
    
        [DataMember]
        public TrackableCollection<VATInvoice> VATInvoices
        {
            get
            {
                if (_vATInvoices == null)
                {
                    _vATInvoices = new TrackableCollection<VATInvoice>();
                    _vATInvoices.CollectionChanged += FixupVATInvoices;
                }
                return _vATInvoices;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoices != null)
                    {
                        _vATInvoices.CollectionChanged -= FixupVATInvoices;
                    }
                    _vATInvoices = value;
                    if (_vATInvoices != null)
                    {
                        _vATInvoices.CollectionChanged += FixupVATInvoices;
                    }
                    OnNavigationPropertyChanged("VATInvoices");
                }
            }
        }
        private TrackableCollection<VATInvoice> _vATInvoices;
    
        [DataMember]
        public TrackableCollection<VATInvoiceRequestLine> VATInvoiceRequestLines
        {
            get
            {
                if (_vATInvoiceRequestLines == null)
                {
                    _vATInvoiceRequestLines = new TrackableCollection<VATInvoiceRequestLine>();
                    _vATInvoiceRequestLines.CollectionChanged += FixupVATInvoiceRequestLines;
                }
                return _vATInvoiceRequestLines;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoiceRequestLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoiceRequestLines != null)
                    {
                        _vATInvoiceRequestLines.CollectionChanged -= FixupVATInvoiceRequestLines;
                    }
                    _vATInvoiceRequestLines = value;
                    if (_vATInvoiceRequestLines != null)
                    {
                        _vATInvoiceRequestLines.CollectionChanged += FixupVATInvoiceRequestLines;
                    }
                    OnNavigationPropertyChanged("VATInvoiceRequestLines");
                }
            }
        }
        private TrackableCollection<VATInvoiceRequestLine> _vATInvoiceRequestLines;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BusinessPartner = null;
            InternalCustomer = null;
            VATInvoices.Clear();
            VATInvoiceRequestLines.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupBusinessPartner(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VATInvoiceRequests.Contains(this))
            {
                previousValue.VATInvoiceRequests.Remove(this);
            }
    
            if (BusinessPartner != null)
            {
                if (!BusinessPartner.VATInvoiceRequests.Contains(this))
                {
                    BusinessPartner.VATInvoiceRequests.Add(this);
                }
    
                BPId = BusinessPartner.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner")
                    && (ChangeTracker.OriginalValues["BusinessPartner"] == BusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner", previousValue);
                }
                if (BusinessPartner != null && !BusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupInternalCustomer(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VATInvoiceRequests1.Contains(this))
            {
                previousValue.VATInvoiceRequests1.Remove(this);
            }
    
            if (InternalCustomer != null)
            {
                if (!InternalCustomer.VATInvoiceRequests1.Contains(this))
                {
                    InternalCustomer.VATInvoiceRequests1.Add(this);
                }
    
                InternalBPId = InternalCustomer.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("InternalCustomer")
                    && (ChangeTracker.OriginalValues["InternalCustomer"] == InternalCustomer))
                {
                    ChangeTracker.OriginalValues.Remove("InternalCustomer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("InternalCustomer", previousValue);
                }
                if (InternalCustomer != null && !InternalCustomer.ChangeTracker.ChangeTrackingEnabled)
                {
                    InternalCustomer.StartTracking();
                }
            }
        }
    
        private void FixupVATInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoice item in e.NewItems)
                {
                    item.VATInvoiceRequest = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.VATInvoiceRequest, this))
                    {
                        item.VATInvoiceRequest = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoices", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoiceRequestLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoiceRequestLine item in e.NewItems)
                {
                    item.VATInvoiceRequest = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoiceRequestLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoiceRequestLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.VATInvoiceRequest, this))
                    {
                        item.VATInvoiceRequest = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoiceRequestLines", item);
                    }
                }
            }
        }

        #endregion

    }
}
