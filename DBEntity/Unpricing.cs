//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(Pricing))]
    [KnownType(typeof(Unpricing))]
    public partial class Unpricing: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public int QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private int _quotaId;
    
        [DataMember]
        public Nullable<decimal> UnpricingQuantity
        {
            get { return _unpricingQuantity; }
            set
            {
                if (_unpricingQuantity != value)
                {
                    _unpricingQuantity = value;
                    OnPropertyChanged("UnpricingQuantity");
                }
            }
        }
        private Nullable<decimal> _unpricingQuantity;
    
        [DataMember]
        public Nullable<System.DateTime> StartPricingDate
        {
            get { return _startPricingDate; }
            set
            {
                if (_startPricingDate != value)
                {
                    _startPricingDate = value;
                    OnPropertyChanged("StartPricingDate");
                }
            }
        }
        private Nullable<System.DateTime> _startPricingDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndPricingDate
        {
            get { return _endPricingDate; }
            set
            {
                if (_endPricingDate != value)
                {
                    _endPricingDate = value;
                    OnPropertyChanged("EndPricingDate");
                }
            }
        }
        private Nullable<System.DateTime> _endPricingDate;
    
        [DataMember]
        public Nullable<decimal> DeferFee
        {
            get { return _deferFee; }
            set
            {
                if (_deferFee != value)
                {
                    _deferFee = value;
                    OnPropertyChanged("DeferFee");
                }
            }
        }
        private Nullable<decimal> _deferFee;
    
        [DataMember]
        public Nullable<System.DateTime> DeferDate
        {
            get { return _deferDate; }
            set
            {
                if (_deferDate != value)
                {
                    _deferDate = value;
                    OnPropertyChanged("DeferDate");
                }
            }
        }
        private Nullable<System.DateTime> _deferDate;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<int> UnpricingId
        {
            get { return _unpricingId; }
            set
            {
                if (_unpricingId != value)
                {
                    ChangeTracker.RecordOriginalValue("UnpricingId", _unpricingId);
                    if (!IsDeserializing)
                    {
                        if (ParentUnpricing != null && ParentUnpricing.Id != value)
                        {
                            ParentUnpricing = null;
                        }
                    }
                    _unpricingId = value;
                    OnPropertyChanged("UnpricingId");
                }
            }
        }
        private Nullable<int> _unpricingId;
    
        [DataMember]
        public Nullable<int> RelUnpricingId
        {
            get { return _relUnpricingId; }
            set
            {
                if (_relUnpricingId != value)
                {
                    ChangeTracker.RecordOriginalValue("RelUnpricingId", _relUnpricingId);
                    if (!IsDeserializing)
                    {
                        if (BaseUnpricing != null && BaseUnpricing.Id != value)
                        {
                            BaseUnpricing = null;
                        }
                    }
                    _relUnpricingId = value;
                    OnPropertyChanged("RelUnpricingId");
                }
            }
        }
        private Nullable<int> _relUnpricingId;
    
        [DataMember]
        public bool IsAutoGenerated
        {
            get { return _isAutoGenerated; }
            set
            {
                if (_isAutoGenerated != value)
                {
                    _isAutoGenerated = value;
                    OnPropertyChanged("IsAutoGenerated");
                }
            }
        }
        private bool _isAutoGenerated;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public TrackableCollection<Pricing> Pricings
        {
            get
            {
                if (_pricings == null)
                {
                    _pricings = new TrackableCollection<Pricing>();
                    _pricings.CollectionChanged += FixupPricings;
                }
                return _pricings;
            }
            set
            {
                if (!ReferenceEquals(_pricings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pricings != null)
                    {
                        _pricings.CollectionChanged -= FixupPricings;
                    }
                    _pricings = value;
                    if (_pricings != null)
                    {
                        _pricings.CollectionChanged += FixupPricings;
                    }
                    OnNavigationPropertyChanged("Pricings");
                }
            }
        }
        private TrackableCollection<Pricing> _pricings;
    
        [DataMember]
        public TrackableCollection<Unpricing> ChildUnpricings
        {
            get
            {
                if (_childUnpricings == null)
                {
                    _childUnpricings = new TrackableCollection<Unpricing>();
                    _childUnpricings.CollectionChanged += FixupChildUnpricings;
                }
                return _childUnpricings;
            }
            set
            {
                if (!ReferenceEquals(_childUnpricings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_childUnpricings != null)
                    {
                        _childUnpricings.CollectionChanged -= FixupChildUnpricings;
                    }
                    _childUnpricings = value;
                    if (_childUnpricings != null)
                    {
                        _childUnpricings.CollectionChanged += FixupChildUnpricings;
                    }
                    OnNavigationPropertyChanged("ChildUnpricings");
                }
            }
        }
        private TrackableCollection<Unpricing> _childUnpricings;
    
        [DataMember]
        public Unpricing ParentUnpricing
        {
            get { return _parentUnpricing; }
            set
            {
                if (!ReferenceEquals(_parentUnpricing, value))
                {
                    var previousValue = _parentUnpricing;
                    _parentUnpricing = value;
                    FixupParentUnpricing(previousValue);
                    OnNavigationPropertyChanged("ParentUnpricing");
                }
            }
        }
        private Unpricing _parentUnpricing;
    
        [DataMember]
        public TrackableCollection<Unpricing> RelatedUnpricings
        {
            get
            {
                if (_relatedUnpricings == null)
                {
                    _relatedUnpricings = new TrackableCollection<Unpricing>();
                    _relatedUnpricings.CollectionChanged += FixupRelatedUnpricings;
                }
                return _relatedUnpricings;
            }
            set
            {
                if (!ReferenceEquals(_relatedUnpricings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_relatedUnpricings != null)
                    {
                        _relatedUnpricings.CollectionChanged -= FixupRelatedUnpricings;
                    }
                    _relatedUnpricings = value;
                    if (_relatedUnpricings != null)
                    {
                        _relatedUnpricings.CollectionChanged += FixupRelatedUnpricings;
                    }
                    OnNavigationPropertyChanged("RelatedUnpricings");
                }
            }
        }
        private TrackableCollection<Unpricing> _relatedUnpricings;
    
        [DataMember]
        public Unpricing BaseUnpricing
        {
            get { return _baseUnpricing; }
            set
            {
                if (!ReferenceEquals(_baseUnpricing, value))
                {
                    var previousValue = _baseUnpricing;
                    _baseUnpricing = value;
                    FixupBaseUnpricing(previousValue);
                    OnNavigationPropertyChanged("BaseUnpricing");
                }
            }
        }
        private Unpricing _baseUnpricing;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Quota = null;
            Pricings.Clear();
            ChildUnpricings.Clear();
            ParentUnpricing = null;
            RelatedUnpricings.Clear();
            BaseUnpricing = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupQuota(Quota previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Unpricings.Contains(this))
            {
                previousValue.Unpricings.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.Unpricings.Contains(this))
                {
                    Quota.Unpricings.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupParentUnpricing(Unpricing previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ChildUnpricings.Contains(this))
            {
                previousValue.ChildUnpricings.Remove(this);
            }
    
            if (ParentUnpricing != null)
            {
                if (!ParentUnpricing.ChildUnpricings.Contains(this))
                {
                    ParentUnpricing.ChildUnpricings.Add(this);
                }
    
                UnpricingId = ParentUnpricing.Id;
            }
            else if (!skipKeys)
            {
                UnpricingId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentUnpricing")
                    && (ChangeTracker.OriginalValues["ParentUnpricing"] == ParentUnpricing))
                {
                    ChangeTracker.OriginalValues.Remove("ParentUnpricing");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentUnpricing", previousValue);
                }
                if (ParentUnpricing != null && !ParentUnpricing.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentUnpricing.StartTracking();
                }
            }
        }
    
        private void FixupBaseUnpricing(Unpricing previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RelatedUnpricings.Contains(this))
            {
                previousValue.RelatedUnpricings.Remove(this);
            }
    
            if (BaseUnpricing != null)
            {
                if (!BaseUnpricing.RelatedUnpricings.Contains(this))
                {
                    BaseUnpricing.RelatedUnpricings.Add(this);
                }
    
                RelUnpricingId = BaseUnpricing.Id;
            }
            else if (!skipKeys)
            {
                RelUnpricingId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaseUnpricing")
                    && (ChangeTracker.OriginalValues["BaseUnpricing"] == BaseUnpricing))
                {
                    ChangeTracker.OriginalValues.Remove("BaseUnpricing");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaseUnpricing", previousValue);
                }
                if (BaseUnpricing != null && !BaseUnpricing.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaseUnpricing.StartTracking();
                }
            }
        }
    
        private void FixupPricings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Pricing item in e.NewItems)
                {
                    item.Unpricing = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Pricings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pricing item in e.OldItems)
                {
                    if (ReferenceEquals(item.Unpricing, this))
                    {
                        item.Unpricing = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Pricings", item);
                    }
                }
            }
        }
    
        private void FixupChildUnpricings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Unpricing item in e.NewItems)
                {
                    item.ParentUnpricing = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChildUnpricings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Unpricing item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentUnpricing, this))
                    {
                        item.ParentUnpricing = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChildUnpricings", item);
                    }
                }
            }
        }
    
        private void FixupRelatedUnpricings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Unpricing item in e.NewItems)
                {
                    item.BaseUnpricing = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RelatedUnpricings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Unpricing item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaseUnpricing, this))
                    {
                        item.BaseUnpricing = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RelatedUnpricings", item);
                    }
                }
            }
        }

        #endregion

    }
}
