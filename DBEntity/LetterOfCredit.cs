//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Bank))]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(PaymentRequest))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(LCCIRel))]
    [KnownType(typeof(LetterOfCredit))]
    public partial class LetterOfCredit: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<int> QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private Nullable<int> _quotaId;
    
        [DataMember]
        public int PorS
        {
            get { return _porS; }
            set
            {
                if (_porS != value)
                {
                    _porS = value;
                    OnPropertyChanged("PorS");
                }
            }
        }
        private int _porS;
    
        [DataMember]
        public string LCNo
        {
            get { return _lCNo; }
            set
            {
                if (_lCNo != value)
                {
                    _lCNo = value;
                    OnPropertyChanged("LCNo");
                }
            }
        }
        private string _lCNo;
    
        [DataMember]
        public int LCType
        {
            get { return _lCType; }
            set
            {
                if (_lCType != value)
                {
                    _lCType = value;
                    OnPropertyChanged("LCType");
                }
            }
        }
        private int _lCType;
    
        [DataMember]
        public Nullable<int> LCDays
        {
            get { return _lCDays; }
            set
            {
                if (_lCDays != value)
                {
                    _lCDays = value;
                    OnPropertyChanged("LCDays");
                }
            }
        }
        private Nullable<int> _lCDays;
    
        [DataMember]
        public Nullable<int> PromptBasis
        {
            get { return _promptBasis; }
            set
            {
                if (_promptBasis != value)
                {
                    _promptBasis = value;
                    OnPropertyChanged("PromptBasis");
                }
            }
        }
        private Nullable<int> _promptBasis;
    
        [DataMember]
        public int LCStatus
        {
            get { return _lCStatus; }
            set
            {
                if (_lCStatus != value)
                {
                    _lCStatus = value;
                    OnPropertyChanged("LCStatus");
                }
            }
        }
        private int _lCStatus;
    
        [DataMember]
        public Nullable<int> AdvisingBankId
        {
            get { return _advisingBankId; }
            set
            {
                if (_advisingBankId != value)
                {
                    ChangeTracker.RecordOriginalValue("AdvisingBankId", _advisingBankId);
                    if (!IsDeserializing)
                    {
                        if (Bank != null && Bank.Id != value)
                        {
                            Bank = null;
                        }
                    }
                    _advisingBankId = value;
                    OnPropertyChanged("AdvisingBankId");
                }
            }
        }
        private Nullable<int> _advisingBankId;
    
        [DataMember]
        public Nullable<int> IssueBankId
        {
            get { return _issueBankId; }
            set
            {
                if (_issueBankId != value)
                {
                    ChangeTracker.RecordOriginalValue("IssueBankId", _issueBankId);
                    if (!IsDeserializing)
                    {
                        if (Bank1 != null && Bank1.Id != value)
                        {
                            Bank1 = null;
                        }
                    }
                    _issueBankId = value;
                    OnPropertyChanged("IssueBankId");
                }
            }
        }
        private Nullable<int> _issueBankId;
    
        [DataMember]
        public int ApplicantId
        {
            get { return _applicantId; }
            set
            {
                if (_applicantId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApplicantId", _applicantId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner != null && BusinessPartner.Id != value)
                        {
                            BusinessPartner = null;
                        }
                    }
                    _applicantId = value;
                    OnPropertyChanged("ApplicantId");
                }
            }
        }
        private int _applicantId;
    
        [DataMember]
        public int BeneficiaryId
        {
            get { return _beneficiaryId; }
            set
            {
                if (_beneficiaryId != value)
                {
                    ChangeTracker.RecordOriginalValue("BeneficiaryId", _beneficiaryId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner1 != null && BusinessPartner1.Id != value)
                        {
                            BusinessPartner1 = null;
                        }
                    }
                    _beneficiaryId = value;
                    OnPropertyChanged("BeneficiaryId");
                }
            }
        }
        private int _beneficiaryId;
    
        [DataMember]
        public Nullable<System.DateTime> IssueDate
        {
            get { return _issueDate; }
            set
            {
                if (_issueDate != value)
                {
                    _issueDate = value;
                    OnPropertyChanged("IssueDate");
                }
            }
        }
        private Nullable<System.DateTime> _issueDate;
    
        [DataMember]
        public Nullable<decimal> IssueAmount
        {
            get { return _issueAmount; }
            set
            {
                if (_issueAmount != value)
                {
                    _issueAmount = value;
                    OnPropertyChanged("IssueAmount");
                }
            }
        }
        private Nullable<decimal> _issueAmount;
    
        [DataMember]
        public int CurrencyId
        {
            get { return _currencyId; }
            set
            {
                if (_currencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CurrencyId", _currencyId);
                    if (!IsDeserializing)
                    {
                        if (Currency != null && Currency.Id != value)
                        {
                            Currency = null;
                        }
                    }
                    _currencyId = value;
                    OnPropertyChanged("CurrencyId");
                }
            }
        }
        private int _currencyId;
    
        [DataMember]
        public Nullable<decimal> IssueQuantity
        {
            get { return _issueQuantity; }
            set
            {
                if (_issueQuantity != value)
                {
                    _issueQuantity = value;
                    OnPropertyChanged("IssueQuantity");
                }
            }
        }
        private Nullable<decimal> _issueQuantity;
    
        [DataMember]
        public Nullable<System.DateTime> AcceptanceExpiryDate
        {
            get { return _acceptanceExpiryDate; }
            set
            {
                if (_acceptanceExpiryDate != value)
                {
                    _acceptanceExpiryDate = value;
                    OnPropertyChanged("AcceptanceExpiryDate");
                }
            }
        }
        private Nullable<System.DateTime> _acceptanceExpiryDate;
    
        [DataMember]
        public Nullable<System.DateTime> LCExpiryDate
        {
            get { return _lCExpiryDate; }
            set
            {
                if (_lCExpiryDate != value)
                {
                    _lCExpiryDate = value;
                    OnPropertyChanged("LCExpiryDate");
                }
            }
        }
        private Nullable<System.DateTime> _lCExpiryDate;
    
        [DataMember]
        public Nullable<decimal> PresentAmount
        {
            get { return _presentAmount; }
            set
            {
                if (_presentAmount != value)
                {
                    _presentAmount = value;
                    OnPropertyChanged("PresentAmount");
                }
            }
        }
        private Nullable<decimal> _presentAmount;
    
        [DataMember]
        public Nullable<System.DateTime> PresentDate
        {
            get { return _presentDate; }
            set
            {
                if (_presentDate != value)
                {
                    _presentDate = value;
                    OnPropertyChanged("PresentDate");
                }
            }
        }
        private Nullable<System.DateTime> _presentDate;
    
        [DataMember]
        public Nullable<System.DateTime> LatestShippmentDate
        {
            get { return _latestShippmentDate; }
            set
            {
                if (_latestShippmentDate != value)
                {
                    _latestShippmentDate = value;
                    OnPropertyChanged("LatestShippmentDate");
                }
            }
        }
        private Nullable<System.DateTime> _latestShippmentDate;
    
        [DataMember]
        public Nullable<System.DateTime> ActualAcceptanceDate
        {
            get { return _actualAcceptanceDate; }
            set
            {
                if (_actualAcceptanceDate != value)
                {
                    _actualAcceptanceDate = value;
                    OnPropertyChanged("ActualAcceptanceDate");
                }
            }
        }
        private Nullable<System.DateTime> _actualAcceptanceDate;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<int> IBORType
        {
            get { return _iBORType; }
            set
            {
                if (_iBORType != value)
                {
                    _iBORType = value;
                    OnPropertyChanged("IBORType");
                }
            }
        }
        private Nullable<int> _iBORType;
    
        [DataMember]
        public Nullable<decimal> IBORValue
        {
            get { return _iBORValue; }
            set
            {
                if (_iBORValue != value)
                {
                    _iBORValue = value;
                    OnPropertyChanged("IBORValue");
                }
            }
        }
        private Nullable<decimal> _iBORValue;
    
        [DataMember]
        public Nullable<decimal> Float
        {
            get { return _float; }
            set
            {
                if (_float != value)
                {
                    _float = value;
                    OnPropertyChanged("Float");
                }
            }
        }
        private Nullable<decimal> _float;
    
        [DataMember]
        public Nullable<decimal> Interest
        {
            get { return _interest; }
            set
            {
                if (_interest != value)
                {
                    _interest = value;
                    OnPropertyChanged("Interest");
                }
            }
        }
        private Nullable<decimal> _interest;
    
        [DataMember]
        public Nullable<int> PaymentRequestId
        {
            get { return _paymentRequestId; }
            set
            {
                if (_paymentRequestId != value)
                {
                    ChangeTracker.RecordOriginalValue("PaymentRequestId", _paymentRequestId);
                    if (!IsDeserializing)
                    {
                        if (PaymentRequest != null && PaymentRequest.Id != value)
                        {
                            PaymentRequest = null;
                        }
                    }
                    _paymentRequestId = value;
                    OnPropertyChanged("PaymentRequestId");
                }
            }
        }
        private Nullable<int> _paymentRequestId;
    
        [DataMember]
        public Nullable<decimal> DiscountRate
        {
            get { return _discountRate; }
            set
            {
                if (_discountRate != value)
                {
                    _discountRate = value;
                    OnPropertyChanged("DiscountRate");
                }
            }
        }
        private Nullable<decimal> _discountRate;
    
        [DataMember]
        public Nullable<decimal> DiscountInterest
        {
            get { return _discountInterest; }
            set
            {
                if (_discountInterest != value)
                {
                    _discountInterest = value;
                    OnPropertyChanged("DiscountInterest");
                }
            }
        }
        private Nullable<decimal> _discountInterest;
    
        [DataMember]
        public bool FinancialStatus
        {
            get { return _financialStatus; }
            set
            {
                if (_financialStatus != value)
                {
                    _financialStatus = value;
                    OnPropertyChanged("FinancialStatus");
                }
            }
        }
        private bool _financialStatus;
    
        [DataMember]
        public Nullable<int> RelLCId
        {
            get { return _relLCId; }
            set
            {
                if (_relLCId != value)
                {
                    ChangeTracker.RecordOriginalValue("RelLCId", _relLCId);
                    if (!IsDeserializing)
                    {
                        if (MasterLC != null && MasterLC.Id != value)
                        {
                            MasterLC = null;
                        }
                    }
                    _relLCId = value;
                    OnPropertyChanged("RelLCId");
                }
            }
        }
        private Nullable<int> _relLCId;
    
        [DataMember]
        public bool IsAutoGenerated
        {
            get { return _isAutoGenerated; }
            set
            {
                if (_isAutoGenerated != value)
                {
                    _isAutoGenerated = value;
                    OnPropertyChanged("IsAutoGenerated");
                }
            }
        }
        private bool _isAutoGenerated;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Bank Bank
        {
            get { return _bank; }
            set
            {
                if (!ReferenceEquals(_bank, value))
                {
                    var previousValue = _bank;
                    _bank = value;
                    FixupBank(previousValue);
                    OnNavigationPropertyChanged("Bank");
                }
            }
        }
        private Bank _bank;
    
        [DataMember]
        public Bank Bank1
        {
            get { return _bank1; }
            set
            {
                if (!ReferenceEquals(_bank1, value))
                {
                    var previousValue = _bank1;
                    _bank1 = value;
                    FixupBank1(previousValue);
                    OnNavigationPropertyChanged("Bank1");
                }
            }
        }
        private Bank _bank1;
    
        [DataMember]
        public BusinessPartner BusinessPartner
        {
            get { return _businessPartner; }
            set
            {
                if (!ReferenceEquals(_businessPartner, value))
                {
                    var previousValue = _businessPartner;
                    _businessPartner = value;
                    FixupBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner");
                }
            }
        }
        private BusinessPartner _businessPartner;
    
        [DataMember]
        public BusinessPartner BusinessPartner1
        {
            get { return _businessPartner1; }
            set
            {
                if (!ReferenceEquals(_businessPartner1, value))
                {
                    var previousValue = _businessPartner1;
                    _businessPartner1 = value;
                    FixupBusinessPartner1(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner1");
                }
            }
        }
        private BusinessPartner _businessPartner1;
    
        [DataMember]
        public Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                    OnNavigationPropertyChanged("Currency");
                }
            }
        }
        private Currency _currency;
    
        [DataMember]
        public PaymentRequest PaymentRequest
        {
            get { return _paymentRequest; }
            set
            {
                if (!ReferenceEquals(_paymentRequest, value))
                {
                    var previousValue = _paymentRequest;
                    _paymentRequest = value;
                    FixupPaymentRequest(previousValue);
                    OnNavigationPropertyChanged("PaymentRequest");
                }
            }
        }
        private PaymentRequest _paymentRequest;
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries
        {
            get
            {
                if (_deliveries == null)
                {
                    _deliveries = new TrackableCollection<Delivery>();
                    _deliveries.CollectionChanged += FixupDeliveries;
                }
                return _deliveries;
            }
            set
            {
                if (!ReferenceEquals(_deliveries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged -= FixupDeliveries;
                    }
                    _deliveries = value;
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged += FixupDeliveries;
                    }
                    OnNavigationPropertyChanged("Deliveries");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries;
    
        [DataMember]
        public TrackableCollection<LCCIRel> LCCIRels
        {
            get
            {
                if (_lCCIRels == null)
                {
                    _lCCIRels = new TrackableCollection<LCCIRel>();
                    _lCCIRels.CollectionChanged += FixupLCCIRels;
                }
                return _lCCIRels;
            }
            set
            {
                if (!ReferenceEquals(_lCCIRels, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lCCIRels != null)
                    {
                        _lCCIRels.CollectionChanged -= FixupLCCIRels;
                    }
                    _lCCIRels = value;
                    if (_lCCIRels != null)
                    {
                        _lCCIRels.CollectionChanged += FixupLCCIRels;
                    }
                    OnNavigationPropertyChanged("LCCIRels");
                }
            }
        }
        private TrackableCollection<LCCIRel> _lCCIRels;
    
        [DataMember]
        public TrackableCollection<LetterOfCredit> SlaveLC
        {
            get
            {
                if (_slaveLC == null)
                {
                    _slaveLC = new TrackableCollection<LetterOfCredit>();
                    _slaveLC.CollectionChanged += FixupSlaveLC;
                }
                return _slaveLC;
            }
            set
            {
                if (!ReferenceEquals(_slaveLC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_slaveLC != null)
                    {
                        _slaveLC.CollectionChanged -= FixupSlaveLC;
                    }
                    _slaveLC = value;
                    if (_slaveLC != null)
                    {
                        _slaveLC.CollectionChanged += FixupSlaveLC;
                    }
                    OnNavigationPropertyChanged("SlaveLC");
                }
            }
        }
        private TrackableCollection<LetterOfCredit> _slaveLC;
    
        [DataMember]
        public LetterOfCredit MasterLC
        {
            get { return _masterLC; }
            set
            {
                if (!ReferenceEquals(_masterLC, value))
                {
                    var previousValue = _masterLC;
                    _masterLC = value;
                    FixupMasterLC(previousValue);
                    OnNavigationPropertyChanged("MasterLC");
                }
            }
        }
        private LetterOfCredit _masterLC;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Bank = null;
            Bank1 = null;
            BusinessPartner = null;
            BusinessPartner1 = null;
            Currency = null;
            PaymentRequest = null;
            Quota = null;
            Deliveries.Clear();
            LCCIRels.Clear();
            SlaveLC.Clear();
            MasterLC = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBank(Bank previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LetterOfCredits.Contains(this))
            {
                previousValue.LetterOfCredits.Remove(this);
            }
    
            if (Bank != null)
            {
                if (!Bank.LetterOfCredits.Contains(this))
                {
                    Bank.LetterOfCredits.Add(this);
                }
    
                AdvisingBankId = Bank.Id;
            }
            else if (!skipKeys)
            {
                AdvisingBankId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Bank")
                    && (ChangeTracker.OriginalValues["Bank"] == Bank))
                {
                    ChangeTracker.OriginalValues.Remove("Bank");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Bank", previousValue);
                }
                if (Bank != null && !Bank.ChangeTracker.ChangeTrackingEnabled)
                {
                    Bank.StartTracking();
                }
            }
        }
    
        private void FixupBank1(Bank previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LetterOfCredits1.Contains(this))
            {
                previousValue.LetterOfCredits1.Remove(this);
            }
    
            if (Bank1 != null)
            {
                if (!Bank1.LetterOfCredits1.Contains(this))
                {
                    Bank1.LetterOfCredits1.Add(this);
                }
    
                IssueBankId = Bank1.Id;
            }
            else if (!skipKeys)
            {
                IssueBankId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Bank1")
                    && (ChangeTracker.OriginalValues["Bank1"] == Bank1))
                {
                    ChangeTracker.OriginalValues.Remove("Bank1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Bank1", previousValue);
                }
                if (Bank1 != null && !Bank1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Bank1.StartTracking();
                }
            }
        }
    
        private void FixupBusinessPartner(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LetterOfCredits.Contains(this))
            {
                previousValue.LetterOfCredits.Remove(this);
            }
    
            if (BusinessPartner != null)
            {
                if (!BusinessPartner.LetterOfCredits.Contains(this))
                {
                    BusinessPartner.LetterOfCredits.Add(this);
                }
    
                ApplicantId = BusinessPartner.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner")
                    && (ChangeTracker.OriginalValues["BusinessPartner"] == BusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner", previousValue);
                }
                if (BusinessPartner != null && !BusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupBusinessPartner1(BusinessPartner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LetterOfCredits1.Contains(this))
            {
                previousValue.LetterOfCredits1.Remove(this);
            }
    
            if (BusinessPartner1 != null)
            {
                if (!BusinessPartner1.LetterOfCredits1.Contains(this))
                {
                    BusinessPartner1.LetterOfCredits1.Add(this);
                }
    
                BeneficiaryId = BusinessPartner1.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner1")
                    && (ChangeTracker.OriginalValues["BusinessPartner1"] == BusinessPartner1))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner1", previousValue);
                }
                if (BusinessPartner1 != null && !BusinessPartner1.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner1.StartTracking();
                }
            }
        }
    
        private void FixupCurrency(Currency previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LetterOfCredits.Contains(this))
            {
                previousValue.LetterOfCredits.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.LetterOfCredits.Contains(this))
                {
                    Currency.LetterOfCredits.Add(this);
                }
    
                CurrencyId = Currency.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Currency")
                    && (ChangeTracker.OriginalValues["Currency"] == Currency))
                {
                    ChangeTracker.OriginalValues.Remove("Currency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Currency", previousValue);
                }
                if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
                {
                    Currency.StartTracking();
                }
            }
        }
    
        private void FixupPaymentRequest(PaymentRequest previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LetterOfCredits.Contains(this))
            {
                previousValue.LetterOfCredits.Remove(this);
            }
    
            if (PaymentRequest != null)
            {
                if (!PaymentRequest.LetterOfCredits.Contains(this))
                {
                    PaymentRequest.LetterOfCredits.Add(this);
                }
    
                PaymentRequestId = PaymentRequest.Id;
            }
            else if (!skipKeys)
            {
                PaymentRequestId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentRequest")
                    && (ChangeTracker.OriginalValues["PaymentRequest"] == PaymentRequest))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentRequest");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentRequest", previousValue);
                }
                if (PaymentRequest != null && !PaymentRequest.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentRequest.StartTracking();
                }
            }
        }
    
        private void FixupQuota(Quota previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LetterOfCredits.Contains(this))
            {
                previousValue.LetterOfCredits.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.LetterOfCredits.Contains(this))
                {
                    Quota.LetterOfCredits.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            else if (!skipKeys)
            {
                QuotaId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupMasterLC(LetterOfCredit previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SlaveLC.Contains(this))
            {
                previousValue.SlaveLC.Remove(this);
            }
    
            if (MasterLC != null)
            {
                if (!MasterLC.SlaveLC.Contains(this))
                {
                    MasterLC.SlaveLC.Add(this);
                }
    
                RelLCId = MasterLC.Id;
            }
            else if (!skipKeys)
            {
                RelLCId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MasterLC")
                    && (ChangeTracker.OriginalValues["MasterLC"] == MasterLC))
                {
                    ChangeTracker.OriginalValues.Remove("MasterLC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MasterLC", previousValue);
                }
                if (MasterLC != null && !MasterLC.ChangeTracker.ChangeTrackingEnabled)
                {
                    MasterLC.StartTracking();
                }
            }
        }
    
        private void FixupDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.LetterOfCredit = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.LetterOfCredit, this))
                    {
                        item.LetterOfCredit = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries", item);
                    }
                }
            }
        }
    
        private void FixupLCCIRels(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LCCIRel item in e.NewItems)
                {
                    item.LetterOfCredit = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LCCIRels", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LCCIRel item in e.OldItems)
                {
                    if (ReferenceEquals(item.LetterOfCredit, this))
                    {
                        item.LetterOfCredit = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LCCIRels", item);
                    }
                }
            }
        }
    
        private void FixupSlaveLC(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LetterOfCredit item in e.NewItems)
                {
                    item.MasterLC = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SlaveLC", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LetterOfCredit item in e.OldItems)
                {
                    if (ReferenceEquals(item.MasterLC, this))
                    {
                        item.MasterLC = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SlaveLC", item);
                    }
                }
            }
        }

        #endregion

    }
}
