//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(CommodityType))]
    [KnownType(typeof(Specification))]
    [KnownType(typeof(WarehouseOutLine))]
    [KnownType(typeof(DeliveryLine))]
    [KnownType(typeof(WarehouseIn))]
    public partial class WarehouseInLine: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public string PBNo
        {
            get { return _pBNo; }
            set
            {
                if (_pBNo != value)
                {
                    _pBNo = value;
                    OnPropertyChanged("PBNo");
                }
            }
        }
        private string _pBNo;
    
        [DataMember]
        public Nullable<decimal> Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private Nullable<decimal> _quantity;
    
        [DataMember]
        public Nullable<decimal> VerifiedQuantity
        {
            get { return _verifiedQuantity; }
            set
            {
                if (_verifiedQuantity != value)
                {
                    _verifiedQuantity = value;
                    OnPropertyChanged("VerifiedQuantity");
                }
            }
        }
        private Nullable<decimal> _verifiedQuantity;
    
        [DataMember]
        public Nullable<bool> IsVerified
        {
            get { return _isVerified; }
            set
            {
                if (_isVerified != value)
                {
                    _isVerified = value;
                    OnPropertyChanged("IsVerified");
                }
            }
        }
        private Nullable<bool> _isVerified;
    
        [DataMember]
        public Nullable<int> CommodityTypeId
        {
            get { return _commodityTypeId; }
            set
            {
                if (_commodityTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityTypeId", _commodityTypeId);
                    if (!IsDeserializing)
                    {
                        if (CommodityType != null && CommodityType.Id != value)
                        {
                            CommodityType = null;
                        }
                    }
                    _commodityTypeId = value;
                    OnPropertyChanged("CommodityTypeId");
                }
            }
        }
        private Nullable<int> _commodityTypeId;
    
        [DataMember]
        public Nullable<int> BrandId
        {
            get { return _brandId; }
            set
            {
                if (_brandId != value)
                {
                    ChangeTracker.RecordOriginalValue("BrandId", _brandId);
                    if (!IsDeserializing)
                    {
                        if (Brand != null && Brand.Id != value)
                        {
                            Brand = null;
                        }
                    }
                    _brandId = value;
                    OnPropertyChanged("BrandId");
                }
            }
        }
        private Nullable<int> _brandId;
    
        [DataMember]
        public Nullable<int> SpecificationId
        {
            get { return _specificationId; }
            set
            {
                if (_specificationId != value)
                {
                    ChangeTracker.RecordOriginalValue("SpecificationId", _specificationId);
                    if (!IsDeserializing)
                    {
                        if (Specification != null && Specification.Id != value)
                        {
                            Specification = null;
                        }
                    }
                    _specificationId = value;
                    OnPropertyChanged("SpecificationId");
                }
            }
        }
        private Nullable<int> _specificationId;
    
        [DataMember]
        public Nullable<decimal> PackingQuantity
        {
            get { return _packingQuantity; }
            set
            {
                if (_packingQuantity != value)
                {
                    _packingQuantity = value;
                    OnPropertyChanged("PackingQuantity");
                }
            }
        }
        private Nullable<decimal> _packingQuantity;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public int WarehouseInId
        {
            get { return _warehouseInId; }
            set
            {
                if (_warehouseInId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseInId", _warehouseInId);
                    if (!IsDeserializing)
                    {
                        if (WarehouseIn != null && WarehouseIn.Id != value)
                        {
                            WarehouseIn = null;
                        }
                    }
                    _warehouseInId = value;
                    OnPropertyChanged("WarehouseInId");
                }
            }
        }
        private int _warehouseInId;
    
        [DataMember]
        public int DeliveryLineId
        {
            get { return _deliveryLineId; }
            set
            {
                if (_deliveryLineId != value)
                {
                    ChangeTracker.RecordOriginalValue("DeliveryLineId", _deliveryLineId);
                    if (!IsDeserializing)
                    {
                        if (DeliveryLine != null && DeliveryLine.Id != value)
                        {
                            DeliveryLine = null;
                        }
                    }
                    _deliveryLineId = value;
                    OnPropertyChanged("DeliveryLineId");
                }
            }
        }
        private int _deliveryLineId;
    
        [DataMember]
        public Nullable<bool> IsPBCleared
        {
            get { return _isPBCleared; }
            set
            {
                if (_isPBCleared != value)
                {
                    _isPBCleared = value;
                    OnPropertyChanged("IsPBCleared");
                }
            }
        }
        private Nullable<bool> _isPBCleared;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Brand Brand
        {
            get { return _brand; }
            set
            {
                if (!ReferenceEquals(_brand, value))
                {
                    var previousValue = _brand;
                    _brand = value;
                    FixupBrand(previousValue);
                    OnNavigationPropertyChanged("Brand");
                }
            }
        }
        private Brand _brand;
    
        [DataMember]
        public CommodityType CommodityType
        {
            get { return _commodityType; }
            set
            {
                if (!ReferenceEquals(_commodityType, value))
                {
                    var previousValue = _commodityType;
                    _commodityType = value;
                    FixupCommodityType(previousValue);
                    OnNavigationPropertyChanged("CommodityType");
                }
            }
        }
        private CommodityType _commodityType;
    
        [DataMember]
        public Specification Specification
        {
            get { return _specification; }
            set
            {
                if (!ReferenceEquals(_specification, value))
                {
                    var previousValue = _specification;
                    _specification = value;
                    FixupSpecification(previousValue);
                    OnNavigationPropertyChanged("Specification");
                }
            }
        }
        private Specification _specification;
    
        [DataMember]
        public TrackableCollection<WarehouseOutLine> WarehouseOutLines
        {
            get
            {
                if (_warehouseOutLines == null)
                {
                    _warehouseOutLines = new TrackableCollection<WarehouseOutLine>();
                    _warehouseOutLines.CollectionChanged += FixupWarehouseOutLines;
                }
                return _warehouseOutLines;
            }
            set
            {
                if (!ReferenceEquals(_warehouseOutLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseOutLines != null)
                    {
                        _warehouseOutLines.CollectionChanged -= FixupWarehouseOutLines;
                    }
                    _warehouseOutLines = value;
                    if (_warehouseOutLines != null)
                    {
                        _warehouseOutLines.CollectionChanged += FixupWarehouseOutLines;
                    }
                    OnNavigationPropertyChanged("WarehouseOutLines");
                }
            }
        }
        private TrackableCollection<WarehouseOutLine> _warehouseOutLines;
    
        [DataMember]
        public DeliveryLine DeliveryLine
        {
            get { return _deliveryLine; }
            set
            {
                if (!ReferenceEquals(_deliveryLine, value))
                {
                    var previousValue = _deliveryLine;
                    _deliveryLine = value;
                    FixupDeliveryLine(previousValue);
                    OnNavigationPropertyChanged("DeliveryLine");
                }
            }
        }
        private DeliveryLine _deliveryLine;
    
        [DataMember]
        public WarehouseIn WarehouseIn
        {
            get { return _warehouseIn; }
            set
            {
                if (!ReferenceEquals(_warehouseIn, value))
                {
                    var previousValue = _warehouseIn;
                    _warehouseIn = value;
                    FixupWarehouseIn(previousValue);
                    OnNavigationPropertyChanged("WarehouseIn");
                }
            }
        }
        private WarehouseIn _warehouseIn;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Brand = null;
            CommodityType = null;
            Specification = null;
            WarehouseOutLines.Clear();
            DeliveryLine = null;
            WarehouseIn = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBrand(Brand previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseInLines.Contains(this))
            {
                previousValue.WarehouseInLines.Remove(this);
            }
    
            if (Brand != null)
            {
                if (!Brand.WarehouseInLines.Contains(this))
                {
                    Brand.WarehouseInLines.Add(this);
                }
    
                BrandId = Brand.Id;
            }
            else if (!skipKeys)
            {
                BrandId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Brand")
                    && (ChangeTracker.OriginalValues["Brand"] == Brand))
                {
                    ChangeTracker.OriginalValues.Remove("Brand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Brand", previousValue);
                }
                if (Brand != null && !Brand.ChangeTracker.ChangeTrackingEnabled)
                {
                    Brand.StartTracking();
                }
            }
        }
    
        private void FixupCommodityType(CommodityType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseInLines.Contains(this))
            {
                previousValue.WarehouseInLines.Remove(this);
            }
    
            if (CommodityType != null)
            {
                if (!CommodityType.WarehouseInLines.Contains(this))
                {
                    CommodityType.WarehouseInLines.Add(this);
                }
    
                CommodityTypeId = CommodityType.Id;
            }
            else if (!skipKeys)
            {
                CommodityTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CommodityType")
                    && (ChangeTracker.OriginalValues["CommodityType"] == CommodityType))
                {
                    ChangeTracker.OriginalValues.Remove("CommodityType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CommodityType", previousValue);
                }
                if (CommodityType != null && !CommodityType.ChangeTracker.ChangeTrackingEnabled)
                {
                    CommodityType.StartTracking();
                }
            }
        }
    
        private void FixupSpecification(Specification previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseInLines.Contains(this))
            {
                previousValue.WarehouseInLines.Remove(this);
            }
    
            if (Specification != null)
            {
                if (!Specification.WarehouseInLines.Contains(this))
                {
                    Specification.WarehouseInLines.Add(this);
                }
    
                SpecificationId = Specification.Id;
            }
            else if (!skipKeys)
            {
                SpecificationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Specification")
                    && (ChangeTracker.OriginalValues["Specification"] == Specification))
                {
                    ChangeTracker.OriginalValues.Remove("Specification");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Specification", previousValue);
                }
                if (Specification != null && !Specification.ChangeTracker.ChangeTrackingEnabled)
                {
                    Specification.StartTracking();
                }
            }
        }
    
        private void FixupDeliveryLine(DeliveryLine previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseInLines.Contains(this))
            {
                previousValue.WarehouseInLines.Remove(this);
            }
    
            if (DeliveryLine != null)
            {
                if (!DeliveryLine.WarehouseInLines.Contains(this))
                {
                    DeliveryLine.WarehouseInLines.Add(this);
                }
    
                DeliveryLineId = DeliveryLine.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DeliveryLine")
                    && (ChangeTracker.OriginalValues["DeliveryLine"] == DeliveryLine))
                {
                    ChangeTracker.OriginalValues.Remove("DeliveryLine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DeliveryLine", previousValue);
                }
                if (DeliveryLine != null && !DeliveryLine.ChangeTracker.ChangeTrackingEnabled)
                {
                    DeliveryLine.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseIn(WarehouseIn previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseInLines.Contains(this))
            {
                previousValue.WarehouseInLines.Remove(this);
            }
    
            if (WarehouseIn != null)
            {
                if (!WarehouseIn.WarehouseInLines.Contains(this))
                {
                    WarehouseIn.WarehouseInLines.Add(this);
                }
    
                WarehouseInId = WarehouseIn.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WarehouseIn")
                    && (ChangeTracker.OriginalValues["WarehouseIn"] == WarehouseIn))
                {
                    ChangeTracker.OriginalValues.Remove("WarehouseIn");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WarehouseIn", previousValue);
                }
                if (WarehouseIn != null && !WarehouseIn.ChangeTracker.ChangeTrackingEnabled)
                {
                    WarehouseIn.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseOutLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseOutLine item in e.NewItems)
                {
                    item.WarehouseInLine = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseOutLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseOutLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.WarehouseInLine, this))
                    {
                        item.WarehouseInLine = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseOutLines", item);
                    }
                }
            }
        }

        #endregion

    }
}
