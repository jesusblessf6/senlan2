//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(Commodity))]
    [KnownType(typeof(Country))]
    [KnownType(typeof(Port))]
    [KnownType(typeof(Warehouse))]
    [KnownType(typeof(ForeignDeliveryPoolLine))]
    [KnownType(typeof(Document))]
    [KnownType(typeof(FDPStorageFeeSEDate))]
    [KnownType(typeof(Delivery))]
    public partial class ForeignDeliveryPool: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public string DeliveryNo
        {
            get { return _deliveryNo; }
            set
            {
                if (_deliveryNo != value)
                {
                    _deliveryNo = value;
                    OnPropertyChanged("DeliveryNo");
                }
            }
        }
        private string _deliveryNo;
    
        [DataMember]
        public Nullable<System.DateTime> IssueDate
        {
            get { return _issueDate; }
            set
            {
                if (_issueDate != value)
                {
                    _issueDate = value;
                    OnPropertyChanged("IssueDate");
                }
            }
        }
        private Nullable<System.DateTime> _issueDate;
    
        [DataMember]
        public Nullable<int> WarehouseProviderId
        {
            get { return _warehouseProviderId; }
            set
            {
                if (_warehouseProviderId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseProviderId", _warehouseProviderId);
                    if (!IsDeserializing)
                    {
                        if (WarehouseProvider != null && WarehouseProvider.Id != value)
                        {
                            WarehouseProvider = null;
                        }
                    }
                    _warehouseProviderId = value;
                    OnPropertyChanged("WarehouseProviderId");
                }
            }
        }
        private Nullable<int> _warehouseProviderId;
    
        [DataMember]
        public Nullable<int> WarehouseId
        {
            get { return _warehouseId; }
            set
            {
                if (_warehouseId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseId", _warehouseId);
                    if (!IsDeserializing)
                    {
                        if (Warehouse != null && Warehouse.Id != value)
                        {
                            Warehouse = null;
                        }
                    }
                    _warehouseId = value;
                    OnPropertyChanged("WarehouseId");
                }
            }
        }
        private Nullable<int> _warehouseId;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<int> ShipperId
        {
            get { return _shipperId; }
            set
            {
                if (_shipperId != value)
                {
                    ChangeTracker.RecordOriginalValue("ShipperId", _shipperId);
                    if (!IsDeserializing)
                    {
                        if (Shipper != null && Shipper.Id != value)
                        {
                            Shipper = null;
                        }
                    }
                    _shipperId = value;
                    OnPropertyChanged("ShipperId");
                }
            }
        }
        private Nullable<int> _shipperId;
    
        [DataMember]
        public Nullable<int> NotifyPartyId
        {
            get { return _notifyPartyId; }
            set
            {
                if (_notifyPartyId != value)
                {
                    ChangeTracker.RecordOriginalValue("NotifyPartyId", _notifyPartyId);
                    if (!IsDeserializing)
                    {
                        if (NotifyParty != null && NotifyParty.Id != value)
                        {
                            NotifyParty = null;
                        }
                    }
                    _notifyPartyId = value;
                    OnPropertyChanged("NotifyPartyId");
                }
            }
        }
        private Nullable<int> _notifyPartyId;
    
        [DataMember]
        public Nullable<int> ShippingPartyId
        {
            get { return _shippingPartyId; }
            set
            {
                if (_shippingPartyId != value)
                {
                    ChangeTracker.RecordOriginalValue("ShippingPartyId", _shippingPartyId);
                    if (!IsDeserializing)
                    {
                        if (ShippingParty != null && ShippingParty.Id != value)
                        {
                            ShippingParty = null;
                        }
                    }
                    _shippingPartyId = value;
                    OnPropertyChanged("ShippingPartyId");
                }
            }
        }
        private Nullable<int> _shippingPartyId;
    
        [DataMember]
        public Nullable<System.DateTime> OnBoardDate
        {
            get { return _onBoardDate; }
            set
            {
                if (_onBoardDate != value)
                {
                    _onBoardDate = value;
                    OnPropertyChanged("OnBoardDate");
                }
            }
        }
        private Nullable<System.DateTime> _onBoardDate;
    
        [DataMember]
        public string VesselNo
        {
            get { return _vesselNo; }
            set
            {
                if (_vesselNo != value)
                {
                    _vesselNo = value;
                    OnPropertyChanged("VesselNo");
                }
            }
        }
        private string _vesselNo;
    
        [DataMember]
        public Nullable<int> LoadingPortId
        {
            get { return _loadingPortId; }
            set
            {
                if (_loadingPortId != value)
                {
                    ChangeTracker.RecordOriginalValue("LoadingPortId", _loadingPortId);
                    if (!IsDeserializing)
                    {
                        if (LoadingPort != null && LoadingPort.Id != value)
                        {
                            LoadingPort = null;
                        }
                    }
                    _loadingPortId = value;
                    OnPropertyChanged("LoadingPortId");
                }
            }
        }
        private Nullable<int> _loadingPortId;
    
        [DataMember]
        public Nullable<int> LoadingPlaceId
        {
            get { return _loadingPlaceId; }
            set
            {
                if (_loadingPlaceId != value)
                {
                    ChangeTracker.RecordOriginalValue("LoadingPlaceId", _loadingPlaceId);
                    if (!IsDeserializing)
                    {
                        if (LoadingPlace != null && LoadingPlace.Id != value)
                        {
                            LoadingPlace = null;
                        }
                    }
                    _loadingPlaceId = value;
                    OnPropertyChanged("LoadingPlaceId");
                }
            }
        }
        private Nullable<int> _loadingPlaceId;
    
        [DataMember]
        public Nullable<int> DischargePortId
        {
            get { return _dischargePortId; }
            set
            {
                if (_dischargePortId != value)
                {
                    ChangeTracker.RecordOriginalValue("DischargePortId", _dischargePortId);
                    if (!IsDeserializing)
                    {
                        if (DischargePort != null && DischargePort.Id != value)
                        {
                            DischargePort = null;
                        }
                    }
                    _dischargePortId = value;
                    OnPropertyChanged("DischargePortId");
                }
            }
        }
        private Nullable<int> _dischargePortId;
    
        [DataMember]
        public Nullable<int> DischargePlaceId
        {
            get { return _dischargePlaceId; }
            set
            {
                if (_dischargePlaceId != value)
                {
                    ChangeTracker.RecordOriginalValue("DischargePlaceId", _dischargePlaceId);
                    if (!IsDeserializing)
                    {
                        if (DischargePlace != null && DischargePlace.Id != value)
                        {
                            DischargePlace = null;
                        }
                    }
                    _dischargePlaceId = value;
                    OnPropertyChanged("DischargePlaceId");
                }
            }
        }
        private Nullable<int> _dischargePlaceId;
    
        [DataMember]
        public string PackingStandard
        {
            get { return _packingStandard; }
            set
            {
                if (_packingStandard != value)
                {
                    _packingStandard = value;
                    OnPropertyChanged("PackingStandard");
                }
            }
        }
        private string _packingStandard;
    
        [DataMember]
        public int CommodityId
        {
            get { return _commodityId; }
            set
            {
                if (_commodityId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityId", _commodityId);
                    if (!IsDeserializing)
                    {
                        if (Commodity != null && Commodity.Id != value)
                        {
                            Commodity = null;
                        }
                    }
                    _commodityId = value;
                    OnPropertyChanged("CommodityId");
                }
            }
        }
        private int _commodityId;
    
        [DataMember]
        public int DeliveryType
        {
            get { return _deliveryType; }
            set
            {
                if (_deliveryType != value)
                {
                    _deliveryType = value;
                    OnPropertyChanged("DeliveryType");
                }
            }
        }
        private int _deliveryType;
    
        [DataMember]
        public int DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentId", _documentId);
                    if (!IsDeserializing)
                    {
                        if (Document != null && Document.Id != value)
                        {
                            Document = null;
                        }
                    }
                    _documentId = value;
                    OnPropertyChanged("DocumentId");
                }
            }
        }
        private int _documentId;
    
        [DataMember]
        public Nullable<decimal> TotalNetWeight
        {
            get { return _totalNetWeight; }
            set
            {
                if (_totalNetWeight != value)
                {
                    _totalNetWeight = value;
                    OnPropertyChanged("TotalNetWeight");
                }
            }
        }
        private Nullable<decimal> _totalNetWeight;
    
        [DataMember]
        public Nullable<decimal> TotalGrossWeight
        {
            get { return _totalGrossWeight; }
            set
            {
                if (_totalGrossWeight != value)
                {
                    _totalGrossWeight = value;
                    OnPropertyChanged("TotalGrossWeight");
                }
            }
        }
        private Nullable<decimal> _totalGrossWeight;
    
        [DataMember]
        public Nullable<decimal> TotalPackingQuantity
        {
            get { return _totalPackingQuantity; }
            set
            {
                if (_totalPackingQuantity != value)
                {
                    _totalPackingQuantity = value;
                    OnPropertyChanged("TotalPackingQuantity");
                }
            }
        }
        private Nullable<decimal> _totalPackingQuantity;
    
        [DataMember]
        public string MarkNo
        {
            get { return _markNo; }
            set
            {
                if (_markNo != value)
                {
                    _markNo = value;
                    OnPropertyChanged("MarkNo");
                }
            }
        }
        private string _markNo;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BusinessPartner NotifyParty
        {
            get { return _notifyParty; }
            set
            {
                if (!ReferenceEquals(_notifyParty, value))
                {
                    var previousValue = _notifyParty;
                    _notifyParty = value;
                    FixupNotifyParty(previousValue);
                    OnNavigationPropertyChanged("NotifyParty");
                }
            }
        }
        private BusinessPartner _notifyParty;
    
        [DataMember]
        public BusinessPartner Shipper
        {
            get { return _shipper; }
            set
            {
                if (!ReferenceEquals(_shipper, value))
                {
                    var previousValue = _shipper;
                    _shipper = value;
                    FixupShipper(previousValue);
                    OnNavigationPropertyChanged("Shipper");
                }
            }
        }
        private BusinessPartner _shipper;
    
        [DataMember]
        public BusinessPartner ShippingParty
        {
            get { return _shippingParty; }
            set
            {
                if (!ReferenceEquals(_shippingParty, value))
                {
                    var previousValue = _shippingParty;
                    _shippingParty = value;
                    FixupShippingParty(previousValue);
                    OnNavigationPropertyChanged("ShippingParty");
                }
            }
        }
        private BusinessPartner _shippingParty;
    
        [DataMember]
        public BusinessPartner WarehouseProvider
        {
            get { return _warehouseProvider; }
            set
            {
                if (!ReferenceEquals(_warehouseProvider, value))
                {
                    var previousValue = _warehouseProvider;
                    _warehouseProvider = value;
                    FixupWarehouseProvider(previousValue);
                    OnNavigationPropertyChanged("WarehouseProvider");
                }
            }
        }
        private BusinessPartner _warehouseProvider;
    
        [DataMember]
        public Commodity Commodity
        {
            get { return _commodity; }
            set
            {
                if (!ReferenceEquals(_commodity, value))
                {
                    var previousValue = _commodity;
                    _commodity = value;
                    FixupCommodity(previousValue);
                    OnNavigationPropertyChanged("Commodity");
                }
            }
        }
        private Commodity _commodity;
    
        [DataMember]
        public Country DischargePlace
        {
            get { return _dischargePlace; }
            set
            {
                if (!ReferenceEquals(_dischargePlace, value))
                {
                    var previousValue = _dischargePlace;
                    _dischargePlace = value;
                    FixupDischargePlace(previousValue);
                    OnNavigationPropertyChanged("DischargePlace");
                }
            }
        }
        private Country _dischargePlace;
    
        [DataMember]
        public Country LoadingPlace
        {
            get { return _loadingPlace; }
            set
            {
                if (!ReferenceEquals(_loadingPlace, value))
                {
                    var previousValue = _loadingPlace;
                    _loadingPlace = value;
                    FixupLoadingPlace(previousValue);
                    OnNavigationPropertyChanged("LoadingPlace");
                }
            }
        }
        private Country _loadingPlace;
    
        [DataMember]
        public Port DischargePort
        {
            get { return _dischargePort; }
            set
            {
                if (!ReferenceEquals(_dischargePort, value))
                {
                    var previousValue = _dischargePort;
                    _dischargePort = value;
                    FixupDischargePort(previousValue);
                    OnNavigationPropertyChanged("DischargePort");
                }
            }
        }
        private Port _dischargePort;
    
        [DataMember]
        public Port LoadingPort
        {
            get { return _loadingPort; }
            set
            {
                if (!ReferenceEquals(_loadingPort, value))
                {
                    var previousValue = _loadingPort;
                    _loadingPort = value;
                    FixupLoadingPort(previousValue);
                    OnNavigationPropertyChanged("LoadingPort");
                }
            }
        }
        private Port _loadingPort;
    
        [DataMember]
        public Warehouse Warehouse
        {
            get { return _warehouse; }
            set
            {
                if (!ReferenceEquals(_warehouse, value))
                {
                    var previousValue = _warehouse;
                    _warehouse = value;
                    FixupWarehouse(previousValue);
                    OnNavigationPropertyChanged("Warehouse");
                }
            }
        }
        private Warehouse _warehouse;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPoolLine> ForeignDeliveryPoolLines
        {
            get
            {
                if (_foreignDeliveryPoolLines == null)
                {
                    _foreignDeliveryPoolLines = new TrackableCollection<ForeignDeliveryPoolLine>();
                    _foreignDeliveryPoolLines.CollectionChanged += FixupForeignDeliveryPoolLines;
                }
                return _foreignDeliveryPoolLines;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPoolLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPoolLines != null)
                    {
                        _foreignDeliveryPoolLines.CollectionChanged -= FixupForeignDeliveryPoolLines;
                    }
                    _foreignDeliveryPoolLines = value;
                    if (_foreignDeliveryPoolLines != null)
                    {
                        _foreignDeliveryPoolLines.CollectionChanged += FixupForeignDeliveryPoolLines;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPoolLines");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPoolLine> _foreignDeliveryPoolLines;
    
        [DataMember]
        public Document Document
        {
            get { return _document; }
            set
            {
                if (!ReferenceEquals(_document, value))
                {
                    var previousValue = _document;
                    _document = value;
                    FixupDocument(previousValue);
                    OnNavigationPropertyChanged("Document");
                }
            }
        }
        private Document _document;
    
        [DataMember]
        public TrackableCollection<FDPStorageFeeSEDate> FDPStorageFeeSEDates
        {
            get
            {
                if (_fDPStorageFeeSEDates == null)
                {
                    _fDPStorageFeeSEDates = new TrackableCollection<FDPStorageFeeSEDate>();
                    _fDPStorageFeeSEDates.CollectionChanged += FixupFDPStorageFeeSEDates;
                }
                return _fDPStorageFeeSEDates;
            }
            set
            {
                if (!ReferenceEquals(_fDPStorageFeeSEDates, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fDPStorageFeeSEDates != null)
                    {
                        _fDPStorageFeeSEDates.CollectionChanged -= FixupFDPStorageFeeSEDates;
                    }
                    _fDPStorageFeeSEDates = value;
                    if (_fDPStorageFeeSEDates != null)
                    {
                        _fDPStorageFeeSEDates.CollectionChanged += FixupFDPStorageFeeSEDates;
                    }
                    OnNavigationPropertyChanged("FDPStorageFeeSEDates");
                }
            }
        }
        private TrackableCollection<FDPStorageFeeSEDate> _fDPStorageFeeSEDates;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries
        {
            get
            {
                if (_deliveries == null)
                {
                    _deliveries = new TrackableCollection<Delivery>();
                    _deliveries.CollectionChanged += FixupDeliveries;
                }
                return _deliveries;
            }
            set
            {
                if (!ReferenceEquals(_deliveries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged -= FixupDeliveries;
                    }
                    _deliveries = value;
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged += FixupDeliveries;
                    }
                    OnNavigationPropertyChanged("Deliveries");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            NotifyParty = null;
            Shipper = null;
            ShippingParty = null;
            WarehouseProvider = null;
            Commodity = null;
            DischargePlace = null;
            LoadingPlace = null;
            DischargePort = null;
            LoadingPort = null;
            Warehouse = null;
            ForeignDeliveryPoolLines.Clear();
            Document = null;
            FDPStorageFeeSEDates.Clear();
            Deliveries.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupNotifyParty(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools.Contains(this))
            {
                previousValue.ForeignDeliveryPools.Remove(this);
            }
    
            if (NotifyParty != null)
            {
                if (!NotifyParty.ForeignDeliveryPools.Contains(this))
                {
                    NotifyParty.ForeignDeliveryPools.Add(this);
                }
    
                NotifyPartyId = NotifyParty.Id;
            }
            else if (!skipKeys)
            {
                NotifyPartyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NotifyParty")
                    && (ChangeTracker.OriginalValues["NotifyParty"] == NotifyParty))
                {
                    ChangeTracker.OriginalValues.Remove("NotifyParty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NotifyParty", previousValue);
                }
                if (NotifyParty != null && !NotifyParty.ChangeTracker.ChangeTrackingEnabled)
                {
                    NotifyParty.StartTracking();
                }
            }
        }
    
        private void FixupShipper(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools1.Contains(this))
            {
                previousValue.ForeignDeliveryPools1.Remove(this);
            }
    
            if (Shipper != null)
            {
                if (!Shipper.ForeignDeliveryPools1.Contains(this))
                {
                    Shipper.ForeignDeliveryPools1.Add(this);
                }
    
                ShipperId = Shipper.Id;
            }
            else if (!skipKeys)
            {
                ShipperId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Shipper")
                    && (ChangeTracker.OriginalValues["Shipper"] == Shipper))
                {
                    ChangeTracker.OriginalValues.Remove("Shipper");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Shipper", previousValue);
                }
                if (Shipper != null && !Shipper.ChangeTracker.ChangeTrackingEnabled)
                {
                    Shipper.StartTracking();
                }
            }
        }
    
        private void FixupShippingParty(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools2.Contains(this))
            {
                previousValue.ForeignDeliveryPools2.Remove(this);
            }
    
            if (ShippingParty != null)
            {
                if (!ShippingParty.ForeignDeliveryPools2.Contains(this))
                {
                    ShippingParty.ForeignDeliveryPools2.Add(this);
                }
    
                ShippingPartyId = ShippingParty.Id;
            }
            else if (!skipKeys)
            {
                ShippingPartyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ShippingParty")
                    && (ChangeTracker.OriginalValues["ShippingParty"] == ShippingParty))
                {
                    ChangeTracker.OriginalValues.Remove("ShippingParty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ShippingParty", previousValue);
                }
                if (ShippingParty != null && !ShippingParty.ChangeTracker.ChangeTrackingEnabled)
                {
                    ShippingParty.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseProvider(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools3.Contains(this))
            {
                previousValue.ForeignDeliveryPools3.Remove(this);
            }
    
            if (WarehouseProvider != null)
            {
                if (!WarehouseProvider.ForeignDeliveryPools3.Contains(this))
                {
                    WarehouseProvider.ForeignDeliveryPools3.Add(this);
                }
    
                WarehouseProviderId = WarehouseProvider.Id;
            }
            else if (!skipKeys)
            {
                WarehouseProviderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WarehouseProvider")
                    && (ChangeTracker.OriginalValues["WarehouseProvider"] == WarehouseProvider))
                {
                    ChangeTracker.OriginalValues.Remove("WarehouseProvider");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WarehouseProvider", previousValue);
                }
                if (WarehouseProvider != null && !WarehouseProvider.ChangeTracker.ChangeTrackingEnabled)
                {
                    WarehouseProvider.StartTracking();
                }
            }
        }
    
        private void FixupCommodity(Commodity previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools.Contains(this))
            {
                previousValue.ForeignDeliveryPools.Remove(this);
            }
    
            if (Commodity != null)
            {
                if (!Commodity.ForeignDeliveryPools.Contains(this))
                {
                    Commodity.ForeignDeliveryPools.Add(this);
                }
    
                CommodityId = Commodity.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Commodity")
                    && (ChangeTracker.OriginalValues["Commodity"] == Commodity))
                {
                    ChangeTracker.OriginalValues.Remove("Commodity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Commodity", previousValue);
                }
                if (Commodity != null && !Commodity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Commodity.StartTracking();
                }
            }
        }
    
        private void FixupDischargePlace(Country previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools.Contains(this))
            {
                previousValue.ForeignDeliveryPools.Remove(this);
            }
    
            if (DischargePlace != null)
            {
                if (!DischargePlace.ForeignDeliveryPools.Contains(this))
                {
                    DischargePlace.ForeignDeliveryPools.Add(this);
                }
    
                DischargePlaceId = DischargePlace.Id;
            }
            else if (!skipKeys)
            {
                DischargePlaceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DischargePlace")
                    && (ChangeTracker.OriginalValues["DischargePlace"] == DischargePlace))
                {
                    ChangeTracker.OriginalValues.Remove("DischargePlace");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DischargePlace", previousValue);
                }
                if (DischargePlace != null && !DischargePlace.ChangeTracker.ChangeTrackingEnabled)
                {
                    DischargePlace.StartTracking();
                }
            }
        }
    
        private void FixupLoadingPlace(Country previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools1.Contains(this))
            {
                previousValue.ForeignDeliveryPools1.Remove(this);
            }
    
            if (LoadingPlace != null)
            {
                if (!LoadingPlace.ForeignDeliveryPools1.Contains(this))
                {
                    LoadingPlace.ForeignDeliveryPools1.Add(this);
                }
    
                LoadingPlaceId = LoadingPlace.Id;
            }
            else if (!skipKeys)
            {
                LoadingPlaceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LoadingPlace")
                    && (ChangeTracker.OriginalValues["LoadingPlace"] == LoadingPlace))
                {
                    ChangeTracker.OriginalValues.Remove("LoadingPlace");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LoadingPlace", previousValue);
                }
                if (LoadingPlace != null && !LoadingPlace.ChangeTracker.ChangeTrackingEnabled)
                {
                    LoadingPlace.StartTracking();
                }
            }
        }
    
        private void FixupDischargePort(Port previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools.Contains(this))
            {
                previousValue.ForeignDeliveryPools.Remove(this);
            }
    
            if (DischargePort != null)
            {
                if (!DischargePort.ForeignDeliveryPools.Contains(this))
                {
                    DischargePort.ForeignDeliveryPools.Add(this);
                }
    
                DischargePortId = DischargePort.Id;
            }
            else if (!skipKeys)
            {
                DischargePortId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DischargePort")
                    && (ChangeTracker.OriginalValues["DischargePort"] == DischargePort))
                {
                    ChangeTracker.OriginalValues.Remove("DischargePort");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DischargePort", previousValue);
                }
                if (DischargePort != null && !DischargePort.ChangeTracker.ChangeTrackingEnabled)
                {
                    DischargePort.StartTracking();
                }
            }
        }
    
        private void FixupLoadingPort(Port previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools1.Contains(this))
            {
                previousValue.ForeignDeliveryPools1.Remove(this);
            }
    
            if (LoadingPort != null)
            {
                if (!LoadingPort.ForeignDeliveryPools1.Contains(this))
                {
                    LoadingPort.ForeignDeliveryPools1.Add(this);
                }
    
                LoadingPortId = LoadingPort.Id;
            }
            else if (!skipKeys)
            {
                LoadingPortId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LoadingPort")
                    && (ChangeTracker.OriginalValues["LoadingPort"] == LoadingPort))
                {
                    ChangeTracker.OriginalValues.Remove("LoadingPort");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LoadingPort", previousValue);
                }
                if (LoadingPort != null && !LoadingPort.ChangeTracker.ChangeTrackingEnabled)
                {
                    LoadingPort.StartTracking();
                }
            }
        }
    
        private void FixupWarehouse(Warehouse previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools.Contains(this))
            {
                previousValue.ForeignDeliveryPools.Remove(this);
            }
    
            if (Warehouse != null)
            {
                if (!Warehouse.ForeignDeliveryPools.Contains(this))
                {
                    Warehouse.ForeignDeliveryPools.Add(this);
                }
    
                WarehouseId = Warehouse.Id;
            }
            else if (!skipKeys)
            {
                WarehouseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Warehouse")
                    && (ChangeTracker.OriginalValues["Warehouse"] == Warehouse))
                {
                    ChangeTracker.OriginalValues.Remove("Warehouse");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Warehouse", previousValue);
                }
                if (Warehouse != null && !Warehouse.ChangeTracker.ChangeTrackingEnabled)
                {
                    Warehouse.StartTracking();
                }
            }
        }
    
        private void FixupDocument(Document previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ForeignDeliveryPools.Contains(this))
            {
                previousValue.ForeignDeliveryPools.Remove(this);
            }
    
            if (Document != null)
            {
                if (!Document.ForeignDeliveryPools.Contains(this))
                {
                    Document.ForeignDeliveryPools.Add(this);
                }
    
                DocumentId = Document.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Document")
                    && (ChangeTracker.OriginalValues["Document"] == Document))
                {
                    ChangeTracker.OriginalValues.Remove("Document");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Document", previousValue);
                }
                if (Document != null && !Document.ChangeTracker.ChangeTrackingEnabled)
                {
                    Document.StartTracking();
                }
            }
        }
    
        private void FixupForeignDeliveryPoolLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPoolLine item in e.NewItems)
                {
                    item.ForeignDeliveryPool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPoolLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPoolLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.ForeignDeliveryPool, this))
                    {
                        item.ForeignDeliveryPool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPoolLines", item);
                    }
                }
            }
        }
    
        private void FixupFDPStorageFeeSEDates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FDPStorageFeeSEDate item in e.NewItems)
                {
                    item.ForeignDeliveryPool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FDPStorageFeeSEDates", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FDPStorageFeeSEDate item in e.OldItems)
                {
                    if (ReferenceEquals(item.ForeignDeliveryPool, this))
                    {
                        item.ForeignDeliveryPool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FDPStorageFeeSEDates", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.ForeignDeliveryPool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.ForeignDeliveryPool, this))
                    {
                        item.ForeignDeliveryPool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries", item);
                    }
                }
            }
        }

        #endregion

    }
}
