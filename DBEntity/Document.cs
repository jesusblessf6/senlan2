//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Approval))]
    [KnownType(typeof(Log))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(PaymentRequest))]
    [KnownType(typeof(VATInvoiceRequestLine))]
    [KnownType(typeof(LogRegistration))]
    [KnownType(typeof(ForeignDeliveryPool))]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(WeixinAlert))]
    public partial class Document: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string TableCode
        {
            get { return _tableCode; }
            set
            {
                if (_tableCode != value)
                {
                    _tableCode = value;
                    OnPropertyChanged("TableCode");
                }
            }
        }
        private string _tableCode;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public bool IsApprovable
        {
            get { return _isApprovable; }
            set
            {
                if (_isApprovable != value)
                {
                    _isApprovable = value;
                    OnPropertyChanged("IsApprovable");
                }
            }
        }
        private bool _isApprovable;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Approval> Approvals
        {
            get
            {
                if (_approvals == null)
                {
                    _approvals = new TrackableCollection<Approval>();
                    _approvals.CollectionChanged += FixupApprovals;
                }
                return _approvals;
            }
            set
            {
                if (!ReferenceEquals(_approvals, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_approvals != null)
                    {
                        _approvals.CollectionChanged -= FixupApprovals;
                    }
                    _approvals = value;
                    if (_approvals != null)
                    {
                        _approvals.CollectionChanged += FixupApprovals;
                    }
                    OnNavigationPropertyChanged("Approvals");
                }
            }
        }
        private TrackableCollection<Approval> _approvals;
    
        [DataMember]
        public TrackableCollection<Log> Logs
        {
            get
            {
                if (_logs == null)
                {
                    _logs = new TrackableCollection<Log>();
                    _logs.CollectionChanged += FixupLogs;
                }
                return _logs;
            }
            set
            {
                if (!ReferenceEquals(_logs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_logs != null)
                    {
                        _logs.CollectionChanged -= FixupLogs;
                    }
                    _logs = value;
                    if (_logs != null)
                    {
                        _logs.CollectionChanged += FixupLogs;
                    }
                    OnNavigationPropertyChanged("Logs");
                }
            }
        }
        private TrackableCollection<Log> _logs;
    
        [DataMember]
        public TrackableCollection<Quota> Quotas
        {
            get
            {
                if (_quotas == null)
                {
                    _quotas = new TrackableCollection<Quota>();
                    _quotas.CollectionChanged += FixupQuotas;
                }
                return _quotas;
            }
            set
            {
                if (!ReferenceEquals(_quotas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged -= FixupQuotas;
                    }
                    _quotas = value;
                    if (_quotas != null)
                    {
                        _quotas.CollectionChanged += FixupQuotas;
                    }
                    OnNavigationPropertyChanged("Quotas");
                }
            }
        }
        private TrackableCollection<Quota> _quotas;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries
        {
            get
            {
                if (_deliveries == null)
                {
                    _deliveries = new TrackableCollection<Delivery>();
                    _deliveries.CollectionChanged += FixupDeliveries;
                }
                return _deliveries;
            }
            set
            {
                if (!ReferenceEquals(_deliveries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged -= FixupDeliveries;
                    }
                    _deliveries = value;
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged += FixupDeliveries;
                    }
                    OnNavigationPropertyChanged("Deliveries");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries;
    
        [DataMember]
        public TrackableCollection<PaymentRequest> PaymentRequests
        {
            get
            {
                if (_paymentRequests == null)
                {
                    _paymentRequests = new TrackableCollection<PaymentRequest>();
                    _paymentRequests.CollectionChanged += FixupPaymentRequests;
                }
                return _paymentRequests;
            }
            set
            {
                if (!ReferenceEquals(_paymentRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged -= FixupPaymentRequests;
                    }
                    _paymentRequests = value;
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged += FixupPaymentRequests;
                    }
                    OnNavigationPropertyChanged("PaymentRequests");
                }
            }
        }
        private TrackableCollection<PaymentRequest> _paymentRequests;
    
        [DataMember]
        public TrackableCollection<VATInvoiceRequestLine> VATInvoiceRequestLines
        {
            get
            {
                if (_vATInvoiceRequestLines == null)
                {
                    _vATInvoiceRequestLines = new TrackableCollection<VATInvoiceRequestLine>();
                    _vATInvoiceRequestLines.CollectionChanged += FixupVATInvoiceRequestLines;
                }
                return _vATInvoiceRequestLines;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoiceRequestLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoiceRequestLines != null)
                    {
                        _vATInvoiceRequestLines.CollectionChanged -= FixupVATInvoiceRequestLines;
                    }
                    _vATInvoiceRequestLines = value;
                    if (_vATInvoiceRequestLines != null)
                    {
                        _vATInvoiceRequestLines.CollectionChanged += FixupVATInvoiceRequestLines;
                    }
                    OnNavigationPropertyChanged("VATInvoiceRequestLines");
                }
            }
        }
        private TrackableCollection<VATInvoiceRequestLine> _vATInvoiceRequestLines;
    
        [DataMember]
        public TrackableCollection<LogRegistration> LogRegistrations
        {
            get
            {
                if (_logRegistrations == null)
                {
                    _logRegistrations = new TrackableCollection<LogRegistration>();
                    _logRegistrations.CollectionChanged += FixupLogRegistrations;
                }
                return _logRegistrations;
            }
            set
            {
                if (!ReferenceEquals(_logRegistrations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_logRegistrations != null)
                    {
                        _logRegistrations.CollectionChanged -= FixupLogRegistrations;
                    }
                    _logRegistrations = value;
                    if (_logRegistrations != null)
                    {
                        _logRegistrations.CollectionChanged += FixupLogRegistrations;
                    }
                    OnNavigationPropertyChanged("LogRegistrations");
                }
            }
        }
        private TrackableCollection<LogRegistration> _logRegistrations;
    
        [DataMember]
        public TrackableCollection<ForeignDeliveryPool> ForeignDeliveryPools
        {
            get
            {
                if (_foreignDeliveryPools == null)
                {
                    _foreignDeliveryPools = new TrackableCollection<ForeignDeliveryPool>();
                    _foreignDeliveryPools.CollectionChanged += FixupForeignDeliveryPools;
                }
                return _foreignDeliveryPools;
            }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPools, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_foreignDeliveryPools != null)
                    {
                        _foreignDeliveryPools.CollectionChanged -= FixupForeignDeliveryPools;
                    }
                    _foreignDeliveryPools = value;
                    if (_foreignDeliveryPools != null)
                    {
                        _foreignDeliveryPools.CollectionChanged += FixupForeignDeliveryPools;
                    }
                    OnNavigationPropertyChanged("ForeignDeliveryPools");
                }
            }
        }
        private TrackableCollection<ForeignDeliveryPool> _foreignDeliveryPools;
    
        [DataMember]
        public TrackableCollection<BusinessPartner> BusinessPartners
        {
            get
            {
                if (_businessPartners == null)
                {
                    _businessPartners = new TrackableCollection<BusinessPartner>();
                    _businessPartners.CollectionChanged += FixupBusinessPartners;
                }
                return _businessPartners;
            }
            set
            {
                if (!ReferenceEquals(_businessPartners, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_businessPartners != null)
                    {
                        _businessPartners.CollectionChanged -= FixupBusinessPartners;
                    }
                    _businessPartners = value;
                    if (_businessPartners != null)
                    {
                        _businessPartners.CollectionChanged += FixupBusinessPartners;
                    }
                    OnNavigationPropertyChanged("BusinessPartners");
                }
            }
        }
        private TrackableCollection<BusinessPartner> _businessPartners;
    
        [DataMember]
        public TrackableCollection<WeixinAlert> WeixinAlerts
        {
            get
            {
                if (_weixinAlerts == null)
                {
                    _weixinAlerts = new TrackableCollection<WeixinAlert>();
                    _weixinAlerts.CollectionChanged += FixupWeixinAlerts;
                }
                return _weixinAlerts;
            }
            set
            {
                if (!ReferenceEquals(_weixinAlerts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_weixinAlerts != null)
                    {
                        _weixinAlerts.CollectionChanged -= FixupWeixinAlerts;
                    }
                    _weixinAlerts = value;
                    if (_weixinAlerts != null)
                    {
                        _weixinAlerts.CollectionChanged += FixupWeixinAlerts;
                    }
                    OnNavigationPropertyChanged("WeixinAlerts");
                }
            }
        }
        private TrackableCollection<WeixinAlert> _weixinAlerts;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Approvals.Clear();
            Logs.Clear();
            Quotas.Clear();
            Deliveries.Clear();
            PaymentRequests.Clear();
            VATInvoiceRequestLines.Clear();
            LogRegistrations.Clear();
            ForeignDeliveryPools.Clear();
            BusinessPartners.Clear();
            WeixinAlerts.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupApprovals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Approval item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Approvals", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Approval item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Approvals", item);
                    }
                }
            }
        }
    
        private void FixupLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Log item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Logs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Log item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Logs", item);
                    }
                }
            }
        }
    
        private void FixupQuotas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Quota item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Quotas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Quota item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Quotas", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries", item);
                    }
                }
            }
        }
    
        private void FixupPaymentRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentRequest item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentRequests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentRequests", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoiceRequestLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoiceRequestLine item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoiceRequestLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoiceRequestLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoiceRequestLines", item);
                    }
                }
            }
        }
    
        private void FixupLogRegistrations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LogRegistration item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LogRegistrations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LogRegistration item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LogRegistrations", item);
                    }
                }
            }
        }
    
        private void FixupForeignDeliveryPools(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ForeignDeliveryPool item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ForeignDeliveryPools", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ForeignDeliveryPool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ForeignDeliveryPools", item);
                    }
                }
            }
        }
    
        private void FixupBusinessPartners(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BusinessPartner item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BusinessPartners", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BusinessPartner item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BusinessPartners", item);
                    }
                }
            }
        }
    
        private void FixupWeixinAlerts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WeixinAlert item in e.NewItems)
                {
                    item.Document = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WeixinAlerts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WeixinAlert item in e.OldItems)
                {
                    if (ReferenceEquals(item.Document, this))
                    {
                        item.Document = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WeixinAlerts", item);
                    }
                }
            }
        }

        #endregion

    }
}
