//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CommercialInvoice))]
    [KnownType(typeof(PaymentMean))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(BankAccount))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(LCCIRel))]
    [KnownType(typeof(PaymentRequest))]
    public partial class CommercialInvoice: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<int> QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private Nullable<int> _quotaId;
    
        [DataMember]
        public string InvoiceNo
        {
            get { return _invoiceNo; }
            set
            {
                if (_invoiceNo != value)
                {
                    _invoiceNo = value;
                    OnPropertyChanged("InvoiceNo");
                }
            }
        }
        private string _invoiceNo;
    
        [DataMember]
        public Nullable<System.DateTime> InvoicedDate
        {
            get { return _invoicedDate; }
            set
            {
                if (_invoicedDate != value)
                {
                    _invoicedDate = value;
                    OnPropertyChanged("InvoicedDate");
                }
            }
        }
        private Nullable<System.DateTime> _invoicedDate;
    
        [DataMember]
        public string DeliveryTerm
        {
            get { return _deliveryTerm; }
            set
            {
                if (_deliveryTerm != value)
                {
                    _deliveryTerm = value;
                    OnPropertyChanged("DeliveryTerm");
                }
            }
        }
        private string _deliveryTerm;
    
        [DataMember]
        public Nullable<int> PaymentMeanId
        {
            get { return _paymentMeanId; }
            set
            {
                if (_paymentMeanId != value)
                {
                    ChangeTracker.RecordOriginalValue("PaymentMeanId", _paymentMeanId);
                    if (!IsDeserializing)
                    {
                        if (PaymentMean != null && PaymentMean.Id != value)
                        {
                            PaymentMean = null;
                        }
                    }
                    _paymentMeanId = value;
                    OnPropertyChanged("PaymentMeanId");
                }
            }
        }
        private Nullable<int> _paymentMeanId;
    
        [DataMember]
        public Nullable<decimal> Amount
        {
            get { return _amount; }
            set
            {
                if (_amount != value)
                {
                    _amount = value;
                    OnPropertyChanged("Amount");
                }
            }
        }
        private Nullable<decimal> _amount;
    
        [DataMember]
        public Nullable<decimal> Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private Nullable<decimal> _price;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<int> FinalInvoiceId
        {
            get { return _finalInvoiceId; }
            set
            {
                if (_finalInvoiceId != value)
                {
                    ChangeTracker.RecordOriginalValue("FinalInvoiceId", _finalInvoiceId);
                    if (!IsDeserializing)
                    {
                        if (FinalInvoice != null && FinalInvoice.Id != value)
                        {
                            FinalInvoice = null;
                        }
                    }
                    _finalInvoiceId = value;
                    OnPropertyChanged("FinalInvoiceId");
                }
            }
        }
        private Nullable<int> _finalInvoiceId;
    
        [DataMember]
        public int InvoiceType
        {
            get { return _invoiceType; }
            set
            {
                if (_invoiceType != value)
                {
                    _invoiceType = value;
                    OnPropertyChanged("InvoiceType");
                }
            }
        }
        private int _invoiceType;
    
        [DataMember]
        public Nullable<decimal> ExchangeRate
        {
            get { return _exchangeRate; }
            set
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value;
                    OnPropertyChanged("ExchangeRate");
                }
            }
        }
        private Nullable<decimal> _exchangeRate;
    
        [DataMember]
        public Nullable<int> CurrencyId
        {
            get { return _currencyId; }
            set
            {
                if (_currencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CurrencyId", _currencyId);
                    if (!IsDeserializing)
                    {
                        if (Currency != null && Currency.Id != value)
                        {
                            Currency = null;
                        }
                    }
                    _currencyId = value;
                    OnPropertyChanged("CurrencyId");
                }
            }
        }
        private Nullable<int> _currencyId;
    
        [DataMember]
        public Nullable<int> BankAccountId
        {
            get { return _bankAccountId; }
            set
            {
                if (_bankAccountId != value)
                {
                    ChangeTracker.RecordOriginalValue("BankAccountId", _bankAccountId);
                    if (!IsDeserializing)
                    {
                        if (BankAccount != null && BankAccount.Id != value)
                        {
                            BankAccount = null;
                        }
                    }
                    _bankAccountId = value;
                    OnPropertyChanged("BankAccountId");
                }
            }
        }
        private Nullable<int> _bankAccountId;
    
        [DataMember]
        public bool IsIncludeLCInterest
        {
            get { return _isIncludeLCInterest; }
            set
            {
                if (_isIncludeLCInterest != value)
                {
                    _isIncludeLCInterest = value;
                    OnPropertyChanged("IsIncludeLCInterest");
                }
            }
        }
        private bool _isIncludeLCInterest;
    
        [DataMember]
        public Nullable<decimal> Ratio
        {
            get { return _ratio; }
            set
            {
                if (_ratio != value)
                {
                    _ratio = value;
                    OnPropertyChanged("Ratio");
                }
            }
        }
        private Nullable<decimal> _ratio;
    
        [DataMember]
        public Nullable<int> BaseCommercialInvoiceId
        {
            get { return _baseCommercialInvoiceId; }
            set
            {
                if (_baseCommercialInvoiceId != value)
                {
                    ChangeTracker.RecordOriginalValue("BaseCommercialInvoiceId", _baseCommercialInvoiceId);
                    if (!IsDeserializing)
                    {
                        if (BaseInvoice != null && BaseInvoice.Id != value)
                        {
                            BaseInvoice = null;
                        }
                    }
                    _baseCommercialInvoiceId = value;
                    OnPropertyChanged("BaseCommercialInvoiceId");
                }
            }
        }
        private Nullable<int> _baseCommercialInvoiceId;
    
        [DataMember]
        public Nullable<decimal> ClearBalanceRate
        {
            get { return _clearBalanceRate; }
            set
            {
                if (_clearBalanceRate != value)
                {
                    _clearBalanceRate = value;
                    OnPropertyChanged("ClearBalanceRate");
                }
            }
        }
        private Nullable<decimal> _clearBalanceRate;
    
        [DataMember]
        public Nullable<int> ClearBalanceCurrencyId
        {
            get { return _clearBalanceCurrencyId; }
            set
            {
                if (_clearBalanceCurrencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("ClearBalanceCurrencyId", _clearBalanceCurrencyId);
                    if (!IsDeserializing)
                    {
                        if (ClearBalanceCurrency != null && ClearBalanceCurrency.Id != value)
                        {
                            ClearBalanceCurrency = null;
                        }
                    }
                    _clearBalanceCurrencyId = value;
                    OnPropertyChanged("ClearBalanceCurrencyId");
                }
            }
        }
        private Nullable<int> _clearBalanceCurrencyId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CommercialInvoice> ProvisionalInvoices
        {
            get
            {
                if (_provisionalInvoices == null)
                {
                    _provisionalInvoices = new TrackableCollection<CommercialInvoice>();
                    _provisionalInvoices.CollectionChanged += FixupProvisionalInvoices;
                }
                return _provisionalInvoices;
            }
            set
            {
                if (!ReferenceEquals(_provisionalInvoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_provisionalInvoices != null)
                    {
                        _provisionalInvoices.CollectionChanged -= FixupProvisionalInvoices;
                    }
                    _provisionalInvoices = value;
                    if (_provisionalInvoices != null)
                    {
                        _provisionalInvoices.CollectionChanged += FixupProvisionalInvoices;
                    }
                    OnNavigationPropertyChanged("ProvisionalInvoices");
                }
            }
        }
        private TrackableCollection<CommercialInvoice> _provisionalInvoices;
    
        [DataMember]
        public CommercialInvoice FinalInvoice
        {
            get { return _finalInvoice; }
            set
            {
                if (!ReferenceEquals(_finalInvoice, value))
                {
                    var previousValue = _finalInvoice;
                    _finalInvoice = value;
                    FixupFinalInvoice(previousValue);
                    OnNavigationPropertyChanged("FinalInvoice");
                }
            }
        }
        private CommercialInvoice _finalInvoice;
    
        [DataMember]
        public PaymentMean PaymentMean
        {
            get { return _paymentMean; }
            set
            {
                if (!ReferenceEquals(_paymentMean, value))
                {
                    var previousValue = _paymentMean;
                    _paymentMean = value;
                    FixupPaymentMean(previousValue);
                    OnNavigationPropertyChanged("PaymentMean");
                }
            }
        }
        private PaymentMean _paymentMean;
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                    OnNavigationPropertyChanged("Currency");
                }
            }
        }
        private Currency _currency;
    
        [DataMember]
        public BankAccount BankAccount
        {
            get { return _bankAccount; }
            set
            {
                if (!ReferenceEquals(_bankAccount, value))
                {
                    var previousValue = _bankAccount;
                    _bankAccount = value;
                    FixupBankAccount(previousValue);
                    OnNavigationPropertyChanged("BankAccount");
                }
            }
        }
        private BankAccount _bankAccount;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries
        {
            get
            {
                if (_deliveries == null)
                {
                    _deliveries = new TrackableCollection<Delivery>();
                    _deliveries.CollectionChanged += FixupDeliveries;
                }
                return _deliveries;
            }
            set
            {
                if (!ReferenceEquals(_deliveries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged -= FixupDeliveries;
                    }
                    _deliveries = value;
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged += FixupDeliveries;
                    }
                    OnNavigationPropertyChanged("Deliveries");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries;
    
        [DataMember]
        public TrackableCollection<LCCIRel> LCCIRels
        {
            get
            {
                if (_lCCIRels == null)
                {
                    _lCCIRels = new TrackableCollection<LCCIRel>();
                    _lCCIRels.CollectionChanged += FixupLCCIRels;
                }
                return _lCCIRels;
            }
            set
            {
                if (!ReferenceEquals(_lCCIRels, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lCCIRels != null)
                    {
                        _lCCIRels.CollectionChanged -= FixupLCCIRels;
                    }
                    _lCCIRels = value;
                    if (_lCCIRels != null)
                    {
                        _lCCIRels.CollectionChanged += FixupLCCIRels;
                    }
                    OnNavigationPropertyChanged("LCCIRels");
                }
            }
        }
        private TrackableCollection<LCCIRel> _lCCIRels;
    
        [DataMember]
        public TrackableCollection<CommercialInvoice> GeneratedInvoices
        {
            get
            {
                if (_generatedInvoices == null)
                {
                    _generatedInvoices = new TrackableCollection<CommercialInvoice>();
                    _generatedInvoices.CollectionChanged += FixupGeneratedInvoices;
                }
                return _generatedInvoices;
            }
            set
            {
                if (!ReferenceEquals(_generatedInvoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_generatedInvoices != null)
                    {
                        _generatedInvoices.CollectionChanged -= FixupGeneratedInvoices;
                    }
                    _generatedInvoices = value;
                    if (_generatedInvoices != null)
                    {
                        _generatedInvoices.CollectionChanged += FixupGeneratedInvoices;
                    }
                    OnNavigationPropertyChanged("GeneratedInvoices");
                }
            }
        }
        private TrackableCollection<CommercialInvoice> _generatedInvoices;
    
        [DataMember]
        public CommercialInvoice BaseInvoice
        {
            get { return _baseInvoice; }
            set
            {
                if (!ReferenceEquals(_baseInvoice, value))
                {
                    var previousValue = _baseInvoice;
                    _baseInvoice = value;
                    FixupBaseInvoice(previousValue);
                    OnNavigationPropertyChanged("BaseInvoice");
                }
            }
        }
        private CommercialInvoice _baseInvoice;
    
        [DataMember]
        public TrackableCollection<PaymentRequest> PaymentRequests
        {
            get
            {
                if (_paymentRequests == null)
                {
                    _paymentRequests = new TrackableCollection<PaymentRequest>();
                    _paymentRequests.CollectionChanged += FixupPaymentRequests;
                }
                return _paymentRequests;
            }
            set
            {
                if (!ReferenceEquals(_paymentRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged -= FixupPaymentRequests;
                    }
                    _paymentRequests = value;
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged += FixupPaymentRequests;
                    }
                    OnNavigationPropertyChanged("PaymentRequests");
                }
            }
        }
        private TrackableCollection<PaymentRequest> _paymentRequests;
    
        [DataMember]
        public Currency ClearBalanceCurrency
        {
            get { return _clearBalanceCurrency; }
            set
            {
                if (!ReferenceEquals(_clearBalanceCurrency, value))
                {
                    var previousValue = _clearBalanceCurrency;
                    _clearBalanceCurrency = value;
                    FixupClearBalanceCurrency(previousValue);
                    OnNavigationPropertyChanged("ClearBalanceCurrency");
                }
            }
        }
        private Currency _clearBalanceCurrency;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ProvisionalInvoices.Clear();
            FinalInvoice = null;
            PaymentMean = null;
            Quota = null;
            Currency = null;
            BankAccount = null;
            Deliveries.Clear();
            LCCIRels.Clear();
            GeneratedInvoices.Clear();
            BaseInvoice = null;
            PaymentRequests.Clear();
            ClearBalanceCurrency = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupFinalInvoice(CommercialInvoice previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProvisionalInvoices.Contains(this))
            {
                previousValue.ProvisionalInvoices.Remove(this);
            }
    
            if (FinalInvoice != null)
            {
                if (!FinalInvoice.ProvisionalInvoices.Contains(this))
                {
                    FinalInvoice.ProvisionalInvoices.Add(this);
                }
    
                FinalInvoiceId = FinalInvoice.Id;
            }
            else if (!skipKeys)
            {
                FinalInvoiceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FinalInvoice")
                    && (ChangeTracker.OriginalValues["FinalInvoice"] == FinalInvoice))
                {
                    ChangeTracker.OriginalValues.Remove("FinalInvoice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FinalInvoice", previousValue);
                }
                if (FinalInvoice != null && !FinalInvoice.ChangeTracker.ChangeTrackingEnabled)
                {
                    FinalInvoice.StartTracking();
                }
            }
        }
    
        private void FixupPaymentMean(PaymentMean previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CommercialInvoices.Contains(this))
            {
                previousValue.CommercialInvoices.Remove(this);
            }
    
            if (PaymentMean != null)
            {
                if (!PaymentMean.CommercialInvoices.Contains(this))
                {
                    PaymentMean.CommercialInvoices.Add(this);
                }
    
                PaymentMeanId = PaymentMean.Id;
            }
            else if (!skipKeys)
            {
                PaymentMeanId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentMean")
                    && (ChangeTracker.OriginalValues["PaymentMean"] == PaymentMean))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentMean");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentMean", previousValue);
                }
                if (PaymentMean != null && !PaymentMean.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentMean.StartTracking();
                }
            }
        }
    
        private void FixupQuota(Quota previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CommercialInvoices.Contains(this))
            {
                previousValue.CommercialInvoices.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.CommercialInvoices.Contains(this))
                {
                    Quota.CommercialInvoices.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            else if (!skipKeys)
            {
                QuotaId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupCurrency(Currency previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CommercialInvoices.Contains(this))
            {
                previousValue.CommercialInvoices.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.CommercialInvoices.Contains(this))
                {
                    Currency.CommercialInvoices.Add(this);
                }
    
                CurrencyId = Currency.Id;
            }
            else if (!skipKeys)
            {
                CurrencyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Currency")
                    && (ChangeTracker.OriginalValues["Currency"] == Currency))
                {
                    ChangeTracker.OriginalValues.Remove("Currency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Currency", previousValue);
                }
                if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
                {
                    Currency.StartTracking();
                }
            }
        }
    
        private void FixupBankAccount(BankAccount previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CommercialInvoices.Contains(this))
            {
                previousValue.CommercialInvoices.Remove(this);
            }
    
            if (BankAccount != null)
            {
                if (!BankAccount.CommercialInvoices.Contains(this))
                {
                    BankAccount.CommercialInvoices.Add(this);
                }
    
                BankAccountId = BankAccount.Id;
            }
            else if (!skipKeys)
            {
                BankAccountId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BankAccount")
                    && (ChangeTracker.OriginalValues["BankAccount"] == BankAccount))
                {
                    ChangeTracker.OriginalValues.Remove("BankAccount");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BankAccount", previousValue);
                }
                if (BankAccount != null && !BankAccount.ChangeTracker.ChangeTrackingEnabled)
                {
                    BankAccount.StartTracking();
                }
            }
        }
    
        private void FixupBaseInvoice(CommercialInvoice previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.GeneratedInvoices.Contains(this))
            {
                previousValue.GeneratedInvoices.Remove(this);
            }
    
            if (BaseInvoice != null)
            {
                if (!BaseInvoice.GeneratedInvoices.Contains(this))
                {
                    BaseInvoice.GeneratedInvoices.Add(this);
                }
    
                BaseCommercialInvoiceId = BaseInvoice.Id;
            }
            else if (!skipKeys)
            {
                BaseCommercialInvoiceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaseInvoice")
                    && (ChangeTracker.OriginalValues["BaseInvoice"] == BaseInvoice))
                {
                    ChangeTracker.OriginalValues.Remove("BaseInvoice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaseInvoice", previousValue);
                }
                if (BaseInvoice != null && !BaseInvoice.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaseInvoice.StartTracking();
                }
            }
        }
    
        private void FixupClearBalanceCurrency(Currency previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CommercialInvoices1.Contains(this))
            {
                previousValue.CommercialInvoices1.Remove(this);
            }
    
            if (ClearBalanceCurrency != null)
            {
                if (!ClearBalanceCurrency.CommercialInvoices1.Contains(this))
                {
                    ClearBalanceCurrency.CommercialInvoices1.Add(this);
                }
    
                ClearBalanceCurrencyId = ClearBalanceCurrency.Id;
            }
            else if (!skipKeys)
            {
                ClearBalanceCurrencyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ClearBalanceCurrency")
                    && (ChangeTracker.OriginalValues["ClearBalanceCurrency"] == ClearBalanceCurrency))
                {
                    ChangeTracker.OriginalValues.Remove("ClearBalanceCurrency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ClearBalanceCurrency", previousValue);
                }
                if (ClearBalanceCurrency != null && !ClearBalanceCurrency.ChangeTracker.ChangeTrackingEnabled)
                {
                    ClearBalanceCurrency.StartTracking();
                }
            }
        }
    
        private void FixupProvisionalInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CommercialInvoice item in e.NewItems)
                {
                    item.FinalInvoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProvisionalInvoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommercialInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.FinalInvoice, this))
                    {
                        item.FinalInvoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProvisionalInvoices", item);
                    }
                }
            }
        }
    
        private void FixupDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.CommercialInvoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.CommercialInvoice, this))
                    {
                        item.CommercialInvoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries", item);
                    }
                }
            }
        }
    
        private void FixupLCCIRels(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LCCIRel item in e.NewItems)
                {
                    item.CommercialInvoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LCCIRels", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LCCIRel item in e.OldItems)
                {
                    if (ReferenceEquals(item.CommercialInvoice, this))
                    {
                        item.CommercialInvoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LCCIRels", item);
                    }
                }
            }
        }
    
        private void FixupGeneratedInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CommercialInvoice item in e.NewItems)
                {
                    item.BaseInvoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GeneratedInvoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommercialInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaseInvoice, this))
                    {
                        item.BaseInvoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GeneratedInvoices", item);
                    }
                }
            }
        }
    
        private void FixupPaymentRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentRequest item in e.NewItems)
                {
                    item.CommercialInvoice = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentRequests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.CommercialInvoice, this))
                    {
                        item.CommercialInvoice = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentRequests", item);
                    }
                }
            }
        }

        #endregion

    }
}
