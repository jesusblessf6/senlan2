//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(Warehouse))]
    [KnownType(typeof(WarehouseOutLine))]
    [KnownType(typeof(BusinessPartner))]
    public partial class WarehouseOut: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public int QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private int _quotaId;
    
        [DataMember]
        public Nullable<System.DateTime> WarehouseOutDate
        {
            get { return _warehouseOutDate; }
            set
            {
                if (_warehouseOutDate != value)
                {
                    _warehouseOutDate = value;
                    OnPropertyChanged("WarehouseOutDate");
                }
            }
        }
        private Nullable<System.DateTime> _warehouseOutDate;
    
        [DataMember]
        public Nullable<int> WarehouseId
        {
            get { return _warehouseId; }
            set
            {
                if (_warehouseId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseId", _warehouseId);
                    if (!IsDeserializing)
                    {
                        if (Warehouse != null && Warehouse.Id != value)
                        {
                            Warehouse = null;
                        }
                    }
                    _warehouseId = value;
                    OnPropertyChanged("WarehouseId");
                }
            }
        }
        private Nullable<int> _warehouseId;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public string WarehouseOutNo
        {
            get { return _warehouseOutNo; }
            set
            {
                if (_warehouseOutNo != value)
                {
                    _warehouseOutNo = value;
                    OnPropertyChanged("WarehouseOutNo");
                }
            }
        }
        private string _warehouseOutNo;
    
        [DataMember]
        public Nullable<int> ActualDeliveryBPId
        {
            get { return _actualDeliveryBPId; }
            set
            {
                if (_actualDeliveryBPId != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualDeliveryBPId", _actualDeliveryBPId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner != null && BusinessPartner.Id != value)
                        {
                            BusinessPartner = null;
                        }
                    }
                    _actualDeliveryBPId = value;
                    OnPropertyChanged("ActualDeliveryBPId");
                }
            }
        }
        private Nullable<int> _actualDeliveryBPId;
    
        [DataMember]
        public bool IsVerified
        {
            get { return _isVerified; }
            set
            {
                if (_isVerified != value)
                {
                    _isVerified = value;
                    OnPropertyChanged("IsVerified");
                }
            }
        }
        private bool _isVerified = false;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public Warehouse Warehouse
        {
            get { return _warehouse; }
            set
            {
                if (!ReferenceEquals(_warehouse, value))
                {
                    var previousValue = _warehouse;
                    _warehouse = value;
                    FixupWarehouse(previousValue);
                    OnNavigationPropertyChanged("Warehouse");
                }
            }
        }
        private Warehouse _warehouse;
    
        [DataMember]
        public TrackableCollection<WarehouseOutLine> WarehouseOutLines
        {
            get
            {
                if (_warehouseOutLines == null)
                {
                    _warehouseOutLines = new TrackableCollection<WarehouseOutLine>();
                    _warehouseOutLines.CollectionChanged += FixupWarehouseOutLines;
                }
                return _warehouseOutLines;
            }
            set
            {
                if (!ReferenceEquals(_warehouseOutLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseOutLines != null)
                    {
                        _warehouseOutLines.CollectionChanged -= FixupWarehouseOutLines;
                    }
                    _warehouseOutLines = value;
                    if (_warehouseOutLines != null)
                    {
                        _warehouseOutLines.CollectionChanged += FixupWarehouseOutLines;
                    }
                    OnNavigationPropertyChanged("WarehouseOutLines");
                }
            }
        }
        private TrackableCollection<WarehouseOutLine> _warehouseOutLines;
    
        [DataMember]
        public BusinessPartner BusinessPartner
        {
            get { return _businessPartner; }
            set
            {
                if (!ReferenceEquals(_businessPartner, value))
                {
                    var previousValue = _businessPartner;
                    _businessPartner = value;
                    FixupBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner");
                }
            }
        }
        private BusinessPartner _businessPartner;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Quota = null;
            Warehouse = null;
            WarehouseOutLines.Clear();
            BusinessPartner = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupQuota(Quota previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOuts.Contains(this))
            {
                previousValue.WarehouseOuts.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.WarehouseOuts.Contains(this))
                {
                    Quota.WarehouseOuts.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupWarehouse(Warehouse previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOuts.Contains(this))
            {
                previousValue.WarehouseOuts.Remove(this);
            }
    
            if (Warehouse != null)
            {
                if (!Warehouse.WarehouseOuts.Contains(this))
                {
                    Warehouse.WarehouseOuts.Add(this);
                }
    
                WarehouseId = Warehouse.Id;
            }
            else if (!skipKeys)
            {
                WarehouseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Warehouse")
                    && (ChangeTracker.OriginalValues["Warehouse"] == Warehouse))
                {
                    ChangeTracker.OriginalValues.Remove("Warehouse");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Warehouse", previousValue);
                }
                if (Warehouse != null && !Warehouse.ChangeTracker.ChangeTrackingEnabled)
                {
                    Warehouse.StartTracking();
                }
            }
        }
    
        private void FixupBusinessPartner(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WarehouseOuts.Contains(this))
            {
                previousValue.WarehouseOuts.Remove(this);
            }
    
            if (BusinessPartner != null)
            {
                if (!BusinessPartner.WarehouseOuts.Contains(this))
                {
                    BusinessPartner.WarehouseOuts.Add(this);
                }
    
                ActualDeliveryBPId = BusinessPartner.Id;
            }
            else if (!skipKeys)
            {
                ActualDeliveryBPId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner")
                    && (ChangeTracker.OriginalValues["BusinessPartner"] == BusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner", previousValue);
                }
                if (BusinessPartner != null && !BusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseOutLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseOutLine item in e.NewItems)
                {
                    item.WarehouseOut = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseOutLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseOutLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.WarehouseOut, this))
                    {
                        item.WarehouseOut = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseOutLines", item);
                    }
                }
            }
        }

        #endregion

    }
}
