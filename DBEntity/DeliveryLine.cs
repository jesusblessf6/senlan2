//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(Country))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(Specification))]
    [KnownType(typeof(WarehouseInLine))]
    [KnownType(typeof(CommodityType))]
    [KnownType(typeof(WarehouseOutDeliveryPerson))]
    [KnownType(typeof(DeliveryLine))]
    [KnownType(typeof(ForeignDeliveryPoolLine))]
    public partial class DeliveryLine: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int DeliveryId
        {
            get { return _deliveryId; }
            set
            {
                if (_deliveryId != value)
                {
                    ChangeTracker.RecordOriginalValue("DeliveryId", _deliveryId);
                    if (!IsDeserializing)
                    {
                        if (Delivery != null && Delivery.Id != value)
                        {
                            Delivery = null;
                        }
                    }
                    _deliveryId = value;
                    OnPropertyChanged("DeliveryId");
                }
            }
        }
        private int _deliveryId;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public Nullable<int> CommodityTypeId
        {
            get { return _commodityTypeId; }
            set
            {
                if (_commodityTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityTypeId", _commodityTypeId);
                    if (!IsDeserializing)
                    {
                        if (CommodityType != null && CommodityType.Id != value)
                        {
                            CommodityType = null;
                        }
                    }
                    _commodityTypeId = value;
                    OnPropertyChanged("CommodityTypeId");
                }
            }
        }
        private Nullable<int> _commodityTypeId;
    
        [DataMember]
        public Nullable<int> SpecificationId
        {
            get { return _specificationId; }
            set
            {
                if (_specificationId != value)
                {
                    ChangeTracker.RecordOriginalValue("SpecificationId", _specificationId);
                    if (!IsDeserializing)
                    {
                        if (Specification != null && Specification.Id != value)
                        {
                            Specification = null;
                        }
                    }
                    _specificationId = value;
                    OnPropertyChanged("SpecificationId");
                }
            }
        }
        private Nullable<int> _specificationId;
    
        [DataMember]
        public Nullable<int> CountryId
        {
            get { return _countryId; }
            set
            {
                if (_countryId != value)
                {
                    ChangeTracker.RecordOriginalValue("CountryId", _countryId);
                    if (!IsDeserializing)
                    {
                        if (Country != null && Country.Id != value)
                        {
                            Country = null;
                        }
                    }
                    _countryId = value;
                    OnPropertyChanged("CountryId");
                }
            }
        }
        private Nullable<int> _countryId;
    
        [DataMember]
        public Nullable<decimal> NetWeight
        {
            get { return _netWeight; }
            set
            {
                if (_netWeight != value)
                {
                    _netWeight = value;
                    OnPropertyChanged("NetWeight");
                }
            }
        }
        private Nullable<decimal> _netWeight;
    
        [DataMember]
        public Nullable<decimal> GrossWeight
        {
            get { return _grossWeight; }
            set
            {
                if (_grossWeight != value)
                {
                    _grossWeight = value;
                    OnPropertyChanged("GrossWeight");
                }
            }
        }
        private Nullable<decimal> _grossWeight;
    
        [DataMember]
        public Nullable<decimal> VerifiedWeight
        {
            get { return _verifiedWeight; }
            set
            {
                if (_verifiedWeight != value)
                {
                    _verifiedWeight = value;
                    OnPropertyChanged("VerifiedWeight");
                }
            }
        }
        private Nullable<decimal> _verifiedWeight;
    
        [DataMember]
        public bool IsVerified
        {
            get { return _isVerified; }
            set
            {
                if (_isVerified != value)
                {
                    _isVerified = value;
                    OnPropertyChanged("IsVerified");
                }
            }
        }
        private bool _isVerified;
    
        [DataMember]
        public Nullable<decimal> PackingQuantity
        {
            get { return _packingQuantity; }
            set
            {
                if (_packingQuantity != value)
                {
                    _packingQuantity = value;
                    OnPropertyChanged("PackingQuantity");
                }
            }
        }
        private Nullable<decimal> _packingQuantity;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<int> BrandId
        {
            get { return _brandId; }
            set
            {
                if (_brandId != value)
                {
                    ChangeTracker.RecordOriginalValue("BrandId", _brandId);
                    if (!IsDeserializing)
                    {
                        if (Brand != null && Brand.Id != value)
                        {
                            Brand = null;
                        }
                    }
                    _brandId = value;
                    OnPropertyChanged("BrandId");
                }
            }
        }
        private Nullable<int> _brandId;
    
        [DataMember]
        public string PBNo
        {
            get { return _pBNo; }
            set
            {
                if (_pBNo != value)
                {
                    _pBNo = value;
                    OnPropertyChanged("PBNo");
                }
            }
        }
        private string _pBNo;
    
        [DataMember]
        public bool DeliveryStatus
        {
            get { return _deliveryStatus; }
            set
            {
                if (_deliveryStatus != value)
                {
                    _deliveryStatus = value;
                    OnPropertyChanged("DeliveryStatus");
                }
            }
        }
        private bool _deliveryStatus = false;
    
        [DataMember]
        public Nullable<decimal> TempUnitPrice
        {
            get { return _tempUnitPrice; }
            set
            {
                if (_tempUnitPrice != value)
                {
                    _tempUnitPrice = value;
                    OnPropertyChanged("TempUnitPrice");
                }
            }
        }
        private Nullable<decimal> _tempUnitPrice;
    
        [DataMember]
        public Nullable<int> TDeliveryLineId
        {
            get { return _tDeliveryLineId; }
            set
            {
                if (_tDeliveryLineId != value)
                {
                    ChangeTracker.RecordOriginalValue("TDeliveryLineId", _tDeliveryLineId);
                    if (!IsDeserializing)
                    {
                        if (PurchaseDeliveryLine != null && PurchaseDeliveryLine.Id != value)
                        {
                            PurchaseDeliveryLine = null;
                        }
                    }
                    _tDeliveryLineId = value;
                    OnPropertyChanged("TDeliveryLineId");
                }
            }
        }
        private Nullable<int> _tDeliveryLineId;
    
        [DataMember]
        public Nullable<int> BaseDeliveryLineId
        {
            get { return _baseDeliveryLineId; }
            set
            {
                if (_baseDeliveryLineId != value)
                {
                    ChangeTracker.RecordOriginalValue("BaseDeliveryLineId", _baseDeliveryLineId);
                    if (!IsDeserializing)
                    {
                        if (BaseDeliveryLine != null && BaseDeliveryLine.Id != value)
                        {
                            BaseDeliveryLine = null;
                        }
                    }
                    _baseDeliveryLineId = value;
                    OnPropertyChanged("BaseDeliveryLineId");
                }
            }
        }
        private Nullable<int> _baseDeliveryLineId;
    
        [DataMember]
        public Nullable<int> FDPLineId
        {
            get { return _fDPLineId; }
            set
            {
                if (_fDPLineId != value)
                {
                    ChangeTracker.RecordOriginalValue("FDPLineId", _fDPLineId);
                    if (!IsDeserializing)
                    {
                        if (ForeignDeliveryPoolLine != null && ForeignDeliveryPoolLine.Id != value)
                        {
                            ForeignDeliveryPoolLine = null;
                        }
                    }
                    _fDPLineId = value;
                    OnPropertyChanged("FDPLineId");
                }
            }
        }
        private Nullable<int> _fDPLineId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Brand Brand
        {
            get { return _brand; }
            set
            {
                if (!ReferenceEquals(_brand, value))
                {
                    var previousValue = _brand;
                    _brand = value;
                    FixupBrand(previousValue);
                    OnNavigationPropertyChanged("Brand");
                }
            }
        }
        private Brand _brand;
    
        [DataMember]
        public Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                    OnNavigationPropertyChanged("Country");
                }
            }
        }
        private Country _country;
    
        [DataMember]
        public Delivery Delivery
        {
            get { return _delivery; }
            set
            {
                if (!ReferenceEquals(_delivery, value))
                {
                    var previousValue = _delivery;
                    _delivery = value;
                    FixupDelivery(previousValue);
                    OnNavigationPropertyChanged("Delivery");
                }
            }
        }
        private Delivery _delivery;
    
        [DataMember]
        public Specification Specification
        {
            get { return _specification; }
            set
            {
                if (!ReferenceEquals(_specification, value))
                {
                    var previousValue = _specification;
                    _specification = value;
                    FixupSpecification(previousValue);
                    OnNavigationPropertyChanged("Specification");
                }
            }
        }
        private Specification _specification;
    
        [DataMember]
        public TrackableCollection<WarehouseInLine> WarehouseInLines
        {
            get
            {
                if (_warehouseInLines == null)
                {
                    _warehouseInLines = new TrackableCollection<WarehouseInLine>();
                    _warehouseInLines.CollectionChanged += FixupWarehouseInLines;
                }
                return _warehouseInLines;
            }
            set
            {
                if (!ReferenceEquals(_warehouseInLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseInLines != null)
                    {
                        _warehouseInLines.CollectionChanged -= FixupWarehouseInLines;
                    }
                    _warehouseInLines = value;
                    if (_warehouseInLines != null)
                    {
                        _warehouseInLines.CollectionChanged += FixupWarehouseInLines;
                    }
                    OnNavigationPropertyChanged("WarehouseInLines");
                }
            }
        }
        private TrackableCollection<WarehouseInLine> _warehouseInLines;
    
        [DataMember]
        public CommodityType CommodityType
        {
            get { return _commodityType; }
            set
            {
                if (!ReferenceEquals(_commodityType, value))
                {
                    var previousValue = _commodityType;
                    _commodityType = value;
                    FixupCommodityType(previousValue);
                    OnNavigationPropertyChanged("CommodityType");
                }
            }
        }
        private CommodityType _commodityType;
    
        [DataMember]
        public TrackableCollection<WarehouseOutDeliveryPerson> WarehouseOutDeliveryPersons
        {
            get
            {
                if (_warehouseOutDeliveryPersons == null)
                {
                    _warehouseOutDeliveryPersons = new TrackableCollection<WarehouseOutDeliveryPerson>();
                    _warehouseOutDeliveryPersons.CollectionChanged += FixupWarehouseOutDeliveryPersons;
                }
                return _warehouseOutDeliveryPersons;
            }
            set
            {
                if (!ReferenceEquals(_warehouseOutDeliveryPersons, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseOutDeliveryPersons != null)
                    {
                        _warehouseOutDeliveryPersons.CollectionChanged -= FixupWarehouseOutDeliveryPersons;
                    }
                    _warehouseOutDeliveryPersons = value;
                    if (_warehouseOutDeliveryPersons != null)
                    {
                        _warehouseOutDeliveryPersons.CollectionChanged += FixupWarehouseOutDeliveryPersons;
                    }
                    OnNavigationPropertyChanged("WarehouseOutDeliveryPersons");
                }
            }
        }
        private TrackableCollection<WarehouseOutDeliveryPerson> _warehouseOutDeliveryPersons;
    
        [DataMember]
        public TrackableCollection<DeliveryLine> SalesDeliveryLines
        {
            get
            {
                if (_salesDeliveryLines == null)
                {
                    _salesDeliveryLines = new TrackableCollection<DeliveryLine>();
                    _salesDeliveryLines.CollectionChanged += FixupSalesDeliveryLines;
                }
                return _salesDeliveryLines;
            }
            set
            {
                if (!ReferenceEquals(_salesDeliveryLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_salesDeliveryLines != null)
                    {
                        _salesDeliveryLines.CollectionChanged -= FixupSalesDeliveryLines;
                    }
                    _salesDeliveryLines = value;
                    if (_salesDeliveryLines != null)
                    {
                        _salesDeliveryLines.CollectionChanged += FixupSalesDeliveryLines;
                    }
                    OnNavigationPropertyChanged("SalesDeliveryLines");
                }
            }
        }
        private TrackableCollection<DeliveryLine> _salesDeliveryLines;
    
        [DataMember]
        public DeliveryLine PurchaseDeliveryLine
        {
            get { return _purchaseDeliveryLine; }
            set
            {
                if (!ReferenceEquals(_purchaseDeliveryLine, value))
                {
                    var previousValue = _purchaseDeliveryLine;
                    _purchaseDeliveryLine = value;
                    FixupPurchaseDeliveryLine(previousValue);
                    OnNavigationPropertyChanged("PurchaseDeliveryLine");
                }
            }
        }
        private DeliveryLine _purchaseDeliveryLine;
    
        [DataMember]
        public TrackableCollection<DeliveryLine> DeliveryLine11
        {
            get
            {
                if (_deliveryLine11 == null)
                {
                    _deliveryLine11 = new TrackableCollection<DeliveryLine>();
                    _deliveryLine11.CollectionChanged += FixupDeliveryLine11;
                }
                return _deliveryLine11;
            }
            set
            {
                if (!ReferenceEquals(_deliveryLine11, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveryLine11 != null)
                    {
                        _deliveryLine11.CollectionChanged -= FixupDeliveryLine11;
                    }
                    _deliveryLine11 = value;
                    if (_deliveryLine11 != null)
                    {
                        _deliveryLine11.CollectionChanged += FixupDeliveryLine11;
                    }
                    OnNavigationPropertyChanged("DeliveryLine11");
                }
            }
        }
        private TrackableCollection<DeliveryLine> _deliveryLine11;
    
        [DataMember]
        public DeliveryLine BaseDeliveryLine
        {
            get { return _baseDeliveryLine; }
            set
            {
                if (!ReferenceEquals(_baseDeliveryLine, value))
                {
                    var previousValue = _baseDeliveryLine;
                    _baseDeliveryLine = value;
                    FixupBaseDeliveryLine(previousValue);
                    OnNavigationPropertyChanged("BaseDeliveryLine");
                }
            }
        }
        private DeliveryLine _baseDeliveryLine;
    
        [DataMember]
        public ForeignDeliveryPoolLine ForeignDeliveryPoolLine
        {
            get { return _foreignDeliveryPoolLine; }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPoolLine, value))
                {
                    var previousValue = _foreignDeliveryPoolLine;
                    _foreignDeliveryPoolLine = value;
                    FixupForeignDeliveryPoolLine(previousValue);
                    OnNavigationPropertyChanged("ForeignDeliveryPoolLine");
                }
            }
        }
        private ForeignDeliveryPoolLine _foreignDeliveryPoolLine;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Brand = null;
            Country = null;
            Delivery = null;
            Specification = null;
            WarehouseInLines.Clear();
            CommodityType = null;
            WarehouseOutDeliveryPersons.Clear();
            SalesDeliveryLines.Clear();
            PurchaseDeliveryLine = null;
            DeliveryLine11.Clear();
            BaseDeliveryLine = null;
            ForeignDeliveryPoolLine = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBrand(Brand previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DeliveryLines.Contains(this))
            {
                previousValue.DeliveryLines.Remove(this);
            }
    
            if (Brand != null)
            {
                if (!Brand.DeliveryLines.Contains(this))
                {
                    Brand.DeliveryLines.Add(this);
                }
    
                BrandId = Brand.Id;
            }
            else if (!skipKeys)
            {
                BrandId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Brand")
                    && (ChangeTracker.OriginalValues["Brand"] == Brand))
                {
                    ChangeTracker.OriginalValues.Remove("Brand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Brand", previousValue);
                }
                if (Brand != null && !Brand.ChangeTracker.ChangeTrackingEnabled)
                {
                    Brand.StartTracking();
                }
            }
        }
    
        private void FixupCountry(Country previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DeliveryLines.Contains(this))
            {
                previousValue.DeliveryLines.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.DeliveryLines.Contains(this))
                {
                    Country.DeliveryLines.Add(this);
                }
    
                CountryId = Country.Id;
            }
            else if (!skipKeys)
            {
                CountryId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Country")
                    && (ChangeTracker.OriginalValues["Country"] == Country))
                {
                    ChangeTracker.OriginalValues.Remove("Country");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Country", previousValue);
                }
                if (Country != null && !Country.ChangeTracker.ChangeTrackingEnabled)
                {
                    Country.StartTracking();
                }
            }
        }
    
        private void FixupDelivery(Delivery previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DeliveryLines.Contains(this))
            {
                previousValue.DeliveryLines.Remove(this);
            }
    
            if (Delivery != null)
            {
                if (!Delivery.DeliveryLines.Contains(this))
                {
                    Delivery.DeliveryLines.Add(this);
                }
    
                DeliveryId = Delivery.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Delivery")
                    && (ChangeTracker.OriginalValues["Delivery"] == Delivery))
                {
                    ChangeTracker.OriginalValues.Remove("Delivery");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Delivery", previousValue);
                }
                if (Delivery != null && !Delivery.ChangeTracker.ChangeTrackingEnabled)
                {
                    Delivery.StartTracking();
                }
            }
        }
    
        private void FixupSpecification(Specification previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DeliveryLines.Contains(this))
            {
                previousValue.DeliveryLines.Remove(this);
            }
    
            if (Specification != null)
            {
                if (!Specification.DeliveryLines.Contains(this))
                {
                    Specification.DeliveryLines.Add(this);
                }
    
                SpecificationId = Specification.Id;
            }
            else if (!skipKeys)
            {
                SpecificationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Specification")
                    && (ChangeTracker.OriginalValues["Specification"] == Specification))
                {
                    ChangeTracker.OriginalValues.Remove("Specification");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Specification", previousValue);
                }
                if (Specification != null && !Specification.ChangeTracker.ChangeTrackingEnabled)
                {
                    Specification.StartTracking();
                }
            }
        }
    
        private void FixupCommodityType(CommodityType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DeliveryLines.Contains(this))
            {
                previousValue.DeliveryLines.Remove(this);
            }
    
            if (CommodityType != null)
            {
                if (!CommodityType.DeliveryLines.Contains(this))
                {
                    CommodityType.DeliveryLines.Add(this);
                }
    
                CommodityTypeId = CommodityType.Id;
            }
            else if (!skipKeys)
            {
                CommodityTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CommodityType")
                    && (ChangeTracker.OriginalValues["CommodityType"] == CommodityType))
                {
                    ChangeTracker.OriginalValues.Remove("CommodityType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CommodityType", previousValue);
                }
                if (CommodityType != null && !CommodityType.ChangeTracker.ChangeTrackingEnabled)
                {
                    CommodityType.StartTracking();
                }
            }
        }
    
        private void FixupPurchaseDeliveryLine(DeliveryLine previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SalesDeliveryLines.Contains(this))
            {
                previousValue.SalesDeliveryLines.Remove(this);
            }
    
            if (PurchaseDeliveryLine != null)
            {
                if (!PurchaseDeliveryLine.SalesDeliveryLines.Contains(this))
                {
                    PurchaseDeliveryLine.SalesDeliveryLines.Add(this);
                }
    
                TDeliveryLineId = PurchaseDeliveryLine.Id;
            }
            else if (!skipKeys)
            {
                TDeliveryLineId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PurchaseDeliveryLine")
                    && (ChangeTracker.OriginalValues["PurchaseDeliveryLine"] == PurchaseDeliveryLine))
                {
                    ChangeTracker.OriginalValues.Remove("PurchaseDeliveryLine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PurchaseDeliveryLine", previousValue);
                }
                if (PurchaseDeliveryLine != null && !PurchaseDeliveryLine.ChangeTracker.ChangeTrackingEnabled)
                {
                    PurchaseDeliveryLine.StartTracking();
                }
            }
        }
    
        private void FixupBaseDeliveryLine(DeliveryLine previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DeliveryLine11.Contains(this))
            {
                previousValue.DeliveryLine11.Remove(this);
            }
    
            if (BaseDeliveryLine != null)
            {
                if (!BaseDeliveryLine.DeliveryLine11.Contains(this))
                {
                    BaseDeliveryLine.DeliveryLine11.Add(this);
                }
    
                BaseDeliveryLineId = BaseDeliveryLine.Id;
            }
            else if (!skipKeys)
            {
                BaseDeliveryLineId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BaseDeliveryLine")
                    && (ChangeTracker.OriginalValues["BaseDeliveryLine"] == BaseDeliveryLine))
                {
                    ChangeTracker.OriginalValues.Remove("BaseDeliveryLine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BaseDeliveryLine", previousValue);
                }
                if (BaseDeliveryLine != null && !BaseDeliveryLine.ChangeTracker.ChangeTrackingEnabled)
                {
                    BaseDeliveryLine.StartTracking();
                }
            }
        }
    
        private void FixupForeignDeliveryPoolLine(ForeignDeliveryPoolLine previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DeliveryLines.Contains(this))
            {
                previousValue.DeliveryLines.Remove(this);
            }
    
            if (ForeignDeliveryPoolLine != null)
            {
                if (!ForeignDeliveryPoolLine.DeliveryLines.Contains(this))
                {
                    ForeignDeliveryPoolLine.DeliveryLines.Add(this);
                }
    
                FDPLineId = ForeignDeliveryPoolLine.Id;
            }
            else if (!skipKeys)
            {
                FDPLineId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ForeignDeliveryPoolLine")
                    && (ChangeTracker.OriginalValues["ForeignDeliveryPoolLine"] == ForeignDeliveryPoolLine))
                {
                    ChangeTracker.OriginalValues.Remove("ForeignDeliveryPoolLine");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ForeignDeliveryPoolLine", previousValue);
                }
                if (ForeignDeliveryPoolLine != null && !ForeignDeliveryPoolLine.ChangeTracker.ChangeTrackingEnabled)
                {
                    ForeignDeliveryPoolLine.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseInLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseInLine item in e.NewItems)
                {
                    item.DeliveryLine = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseInLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseInLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.DeliveryLine, this))
                    {
                        item.DeliveryLine = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseInLines", item);
                    }
                }
            }
        }
    
        private void FixupWarehouseOutDeliveryPersons(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseOutDeliveryPerson item in e.NewItems)
                {
                    item.DeliveryLine = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseOutDeliveryPersons", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseOutDeliveryPerson item in e.OldItems)
                {
                    if (ReferenceEquals(item.DeliveryLine, this))
                    {
                        item.DeliveryLine = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseOutDeliveryPersons", item);
                    }
                }
            }
        }
    
        private void FixupSalesDeliveryLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DeliveryLine item in e.NewItems)
                {
                    item.PurchaseDeliveryLine = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SalesDeliveryLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.PurchaseDeliveryLine, this))
                    {
                        item.PurchaseDeliveryLine = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SalesDeliveryLines", item);
                    }
                }
            }
        }
    
        private void FixupDeliveryLine11(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DeliveryLine item in e.NewItems)
                {
                    item.BaseDeliveryLine = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DeliveryLine11", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaseDeliveryLine, this))
                    {
                        item.BaseDeliveryLine = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DeliveryLine11", item);
                    }
                }
            }
        }

        #endregion

    }
}
