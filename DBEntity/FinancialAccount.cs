//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PaymentUsage))]
    [KnownType(typeof(FinancialAccount))]
    [KnownType(typeof(FundFlow))]
    public partial class FinancialAccount: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<int> ParentId
        {
            get { return _parentId; }
            set
            {
                if (_parentId != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentId", _parentId);
                    if (!IsDeserializing)
                    {
                        if (ParentAccount != null && ParentAccount.Id != value)
                        {
                            ParentAccount = null;
                        }
                    }
                    _parentId = value;
                    OnPropertyChanged("ParentId");
                }
            }
        }
        private Nullable<int> _parentId;
    
        [DataMember]
        public Nullable<int> AccountLevel
        {
            get { return _accountLevel; }
            set
            {
                if (_accountLevel != value)
                {
                    _accountLevel = value;
                    OnPropertyChanged("AccountLevel");
                }
            }
        }
        private Nullable<int> _accountLevel;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsIncludedInAPAR
        {
            get { return _isIncludedInAPAR; }
            set
            {
                if (_isIncludedInAPAR != value)
                {
                    _isIncludedInAPAR = value;
                    OnPropertyChanged("IsIncludedInAPAR");
                }
            }
        }
        private bool _isIncludedInAPAR;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<PaymentUsage> PaymentUsages
        {
            get
            {
                if (_paymentUsages == null)
                {
                    _paymentUsages = new TrackableCollection<PaymentUsage>();
                    _paymentUsages.CollectionChanged += FixupPaymentUsages;
                }
                return _paymentUsages;
            }
            set
            {
                if (!ReferenceEquals(_paymentUsages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentUsages != null)
                    {
                        _paymentUsages.CollectionChanged -= FixupPaymentUsages;
                    }
                    _paymentUsages = value;
                    if (_paymentUsages != null)
                    {
                        _paymentUsages.CollectionChanged += FixupPaymentUsages;
                    }
                    OnNavigationPropertyChanged("PaymentUsages");
                }
            }
        }
        private TrackableCollection<PaymentUsage> _paymentUsages;
    
        [DataMember]
        public TrackableCollection<FinancialAccount> Children
        {
            get
            {
                if (_children == null)
                {
                    _children = new TrackableCollection<FinancialAccount>();
                    _children.CollectionChanged += FixupChildren;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_children != null)
                    {
                        _children.CollectionChanged -= FixupChildren;
                    }
                    _children = value;
                    if (_children != null)
                    {
                        _children.CollectionChanged += FixupChildren;
                    }
                    OnNavigationPropertyChanged("Children");
                }
            }
        }
        private TrackableCollection<FinancialAccount> _children;
    
        [DataMember]
        public FinancialAccount ParentAccount
        {
            get { return _parentAccount; }
            set
            {
                if (!ReferenceEquals(_parentAccount, value))
                {
                    var previousValue = _parentAccount;
                    _parentAccount = value;
                    FixupParentAccount(previousValue);
                    OnNavigationPropertyChanged("ParentAccount");
                }
            }
        }
        private FinancialAccount _parentAccount;
    
        [DataMember]
        public TrackableCollection<FundFlow> FundFlows
        {
            get
            {
                if (_fundFlows == null)
                {
                    _fundFlows = new TrackableCollection<FundFlow>();
                    _fundFlows.CollectionChanged += FixupFundFlows;
                }
                return _fundFlows;
            }
            set
            {
                if (!ReferenceEquals(_fundFlows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged -= FixupFundFlows;
                    }
                    _fundFlows = value;
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged += FixupFundFlows;
                    }
                    OnNavigationPropertyChanged("FundFlows");
                }
            }
        }
        private TrackableCollection<FundFlow> _fundFlows;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PaymentUsages.Clear();
            Children.Clear();
            ParentAccount = null;
            FundFlows.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupParentAccount(FinancialAccount previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (ParentAccount != null)
            {
                if (!ParentAccount.Children.Contains(this))
                {
                    ParentAccount.Children.Add(this);
                }
    
                ParentId = ParentAccount.Id;
            }
            else if (!skipKeys)
            {
                ParentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentAccount")
                    && (ChangeTracker.OriginalValues["ParentAccount"] == ParentAccount))
                {
                    ChangeTracker.OriginalValues.Remove("ParentAccount");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentAccount", previousValue);
                }
                if (ParentAccount != null && !ParentAccount.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentAccount.StartTracking();
                }
            }
        }
    
        private void FixupPaymentUsages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentUsage item in e.NewItems)
                {
                    item.FinancialAccount = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentUsages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentUsage item in e.OldItems)
                {
                    if (ReferenceEquals(item.FinancialAccount, this))
                    {
                        item.FinancialAccount = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentUsages", item);
                    }
                }
            }
        }
    
        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FinancialAccount item in e.NewItems)
                {
                    item.ParentAccount = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Children", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FinancialAccount item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentAccount, this))
                    {
                        item.ParentAccount = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Children", item);
                    }
                }
            }
        }
    
        private void FixupFundFlows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FundFlow item in e.NewItems)
                {
                    item.FinancialAccount = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FundFlows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FundFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.FinancialAccount, this))
                    {
                        item.FinancialAccount = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FundFlows", item);
                    }
                }
            }
        }

        #endregion

    }
}
