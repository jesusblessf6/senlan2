//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Quota))]
    public partial class PSQuotaRel: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public int PQuotaId
        {
            get { return _pQuotaId; }
            set
            {
                if (_pQuotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("PQuotaId", _pQuotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _pQuotaId = value;
                    OnPropertyChanged("PQuotaId");
                }
            }
        }
        private int _pQuotaId;
    
        [DataMember]
        public int SQuotaId
        {
            get { return _sQuotaId; }
            set
            {
                if (_sQuotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("SQuotaId", _sQuotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota1 != null && Quota1.Id != value)
                        {
                            Quota1 = null;
                        }
                    }
                    _sQuotaId = value;
                    OnPropertyChanged("SQuotaId");
                }
            }
        }
        private int _sQuotaId;
    
        [DataMember]
        public decimal P2SQuantity
        {
            get { return _p2SQuantity; }
            set
            {
                if (_p2SQuantity != value)
                {
                    _p2SQuantity = value;
                    OnPropertyChanged("P2SQuantity");
                }
            }
        }
        private decimal _p2SQuantity;
    
        [DataMember]
        public decimal P2SVerQuantity
        {
            get { return _p2SVerQuantity; }
            set
            {
                if (_p2SVerQuantity != value)
                {
                    _p2SVerQuantity = value;
                    OnPropertyChanged("P2SVerQuantity");
                }
            }
        }
        private decimal _p2SVerQuantity;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public Quota Quota1
        {
            get { return _quota1; }
            set
            {
                if (!ReferenceEquals(_quota1, value))
                {
                    var previousValue = _quota1;
                    _quota1 = value;
                    FixupQuota1(previousValue);
                    OnNavigationPropertyChanged("Quota1");
                }
            }
        }
        private Quota _quota1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Quota = null;
            Quota1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupQuota(Quota previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PSQuotaRels.Contains(this))
            {
                previousValue.PSQuotaRels.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.PSQuotaRels.Contains(this))
                {
                    Quota.PSQuotaRels.Add(this);
                }
    
                PQuotaId = Quota.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupQuota1(Quota previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PSQuotaRels1.Contains(this))
            {
                previousValue.PSQuotaRels1.Remove(this);
            }
    
            if (Quota1 != null)
            {
                if (!Quota1.PSQuotaRels1.Contains(this))
                {
                    Quota1.PSQuotaRels1.Add(this);
                }
    
                SQuotaId = Quota1.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota1")
                    && (ChangeTracker.OriginalValues["Quota1"] == Quota1))
                {
                    ChangeTracker.OriginalValues.Remove("Quota1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota1", previousValue);
                }
                if (Quota1 != null && !Quota1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota1.StartTracking();
                }
            }
        }

        #endregion

    }
}
