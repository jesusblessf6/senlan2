//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Brand))]
    [KnownType(typeof(Commodity))]
    [KnownType(typeof(CommodityType))]
    [KnownType(typeof(Specification))]
    [KnownType(typeof(Warehouse))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(Document))]
    [KnownType(typeof(WarehouseOut))]
    [KnownType(typeof(FundFlow))]
    [KnownType(typeof(Approval))]
    [KnownType(typeof(CommercialInvoice))]
    [KnownType(typeof(VATInvoiceLine))]
    [KnownType(typeof(PaymentRequest))]
    [KnownType(typeof(Pricing))]
    [KnownType(typeof(Unpricing))]
    [KnownType(typeof(VATInvoiceRequestLine))]
    [KnownType(typeof(LMEPosition))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(HedgeLineQuota))]
    [KnownType(typeof(Contract))]
    [KnownType(typeof(LetterOfCredit))]
    [KnownType(typeof(QuotaBrandRel))]
    [KnownType(typeof(PSQuotaRel))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(PaymentMean))]
    public partial class Quota: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string QuotaNo
        {
            get { return _quotaNo; }
            set
            {
                if (_quotaNo != value)
                {
                    _quotaNo = value;
                    OnPropertyChanged("QuotaNo");
                }
            }
        }
        private string _quotaNo;
    
        [DataMember]
        public Nullable<System.DateTime> ImplementedDate
        {
            get { return _implementedDate; }
            set
            {
                if (_implementedDate != value)
                {
                    _implementedDate = value;
                    OnPropertyChanged("ImplementedDate");
                }
            }
        }
        private Nullable<System.DateTime> _implementedDate;
    
        [DataMember]
        public Nullable<decimal> Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private Nullable<decimal> _quantity;
    
        [DataMember]
        public Nullable<int> ApproveStatus
        {
            get { return _approveStatus; }
            set
            {
                if (_approveStatus != value)
                {
                    _approveStatus = value;
                    OnPropertyChanged("ApproveStatus");
                }
            }
        }
        private Nullable<int> _approveStatus;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public bool FinanceStatus
        {
            get { return _financeStatus; }
            set
            {
                if (_financeStatus != value)
                {
                    _financeStatus = value;
                    OnPropertyChanged("FinanceStatus");
                }
            }
        }
        private bool _financeStatus;
    
        [DataMember]
        public bool DeliveryStatus
        {
            get { return _deliveryStatus; }
            set
            {
                if (_deliveryStatus != value)
                {
                    _deliveryStatus = value;
                    OnPropertyChanged("DeliveryStatus");
                }
            }
        }
        private bool _deliveryStatus;
    
        [DataMember]
        public Nullable<int> CommodityId
        {
            get { return _commodityId; }
            set
            {
                if (_commodityId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityId", _commodityId);
                    if (!IsDeserializing)
                    {
                        if (Commodity != null && Commodity.Id != value)
                        {
                            Commodity = null;
                        }
                    }
                    _commodityId = value;
                    OnPropertyChanged("CommodityId");
                }
            }
        }
        private Nullable<int> _commodityId;
    
        [DataMember]
        public Nullable<int> CommodityTypeId
        {
            get { return _commodityTypeId; }
            set
            {
                if (_commodityTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityTypeId", _commodityTypeId);
                    if (!IsDeserializing)
                    {
                        if (CommodityType != null && CommodityType.Id != value)
                        {
                            CommodityType = null;
                        }
                    }
                    _commodityTypeId = value;
                    OnPropertyChanged("CommodityTypeId");
                }
            }
        }
        private Nullable<int> _commodityTypeId;
    
        [DataMember]
        public Nullable<int> BrandId
        {
            get { return _brandId; }
            set
            {
                if (_brandId != value)
                {
                    ChangeTracker.RecordOriginalValue("BrandId", _brandId);
                    if (!IsDeserializing)
                    {
                        if (Brand != null && Brand.Id != value)
                        {
                            Brand = null;
                        }
                    }
                    _brandId = value;
                    OnPropertyChanged("BrandId");
                }
            }
        }
        private Nullable<int> _brandId;
    
        [DataMember]
        public Nullable<int> SpecificationId
        {
            get { return _specificationId; }
            set
            {
                if (_specificationId != value)
                {
                    ChangeTracker.RecordOriginalValue("SpecificationId", _specificationId);
                    if (!IsDeserializing)
                    {
                        if (Specification != null && Specification.Id != value)
                        {
                            Specification = null;
                        }
                    }
                    _specificationId = value;
                    OnPropertyChanged("SpecificationId");
                }
            }
        }
        private Nullable<int> _specificationId;
    
        [DataMember]
        public int PricingType
        {
            get { return _pricingType; }
            set
            {
                if (_pricingType != value)
                {
                    _pricingType = value;
                    OnPropertyChanged("PricingType");
                }
            }
        }
        private int _pricingType;
    
        [DataMember]
        public Nullable<int> PricingBasis
        {
            get { return _pricingBasis; }
            set
            {
                if (_pricingBasis != value)
                {
                    _pricingBasis = value;
                    OnPropertyChanged("PricingBasis");
                }
            }
        }
        private Nullable<int> _pricingBasis;
    
        [DataMember]
        public Nullable<System.DateTime> PricingStartDate
        {
            get { return _pricingStartDate; }
            set
            {
                if (_pricingStartDate != value)
                {
                    _pricingStartDate = value;
                    OnPropertyChanged("PricingStartDate");
                }
            }
        }
        private Nullable<System.DateTime> _pricingStartDate;
    
        [DataMember]
        public Nullable<System.DateTime> PricingEndDate
        {
            get { return _pricingEndDate; }
            set
            {
                if (_pricingEndDate != value)
                {
                    _pricingEndDate = value;
                    OnPropertyChanged("PricingEndDate");
                }
            }
        }
        private Nullable<System.DateTime> _pricingEndDate;
    
        [DataMember]
        public int PricingSide
        {
            get { return _pricingSide; }
            set
            {
                if (_pricingSide != value)
                {
                    _pricingSide = value;
                    OnPropertyChanged("PricingSide");
                }
            }
        }
        private int _pricingSide;
    
        [DataMember]
        public Nullable<decimal> Premium
        {
            get { return _premium; }
            set
            {
                if (_premium != value)
                {
                    _premium = value;
                    OnPropertyChanged("Premium");
                }
            }
        }
        private Nullable<decimal> _premium;
    
        [DataMember]
        public Nullable<int> WarehouseId
        {
            get { return _warehouseId; }
            set
            {
                if (_warehouseId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseId", _warehouseId);
                    if (!IsDeserializing)
                    {
                        if (Warehouse != null && Warehouse.Id != value)
                        {
                            Warehouse = null;
                        }
                    }
                    _warehouseId = value;
                    OnPropertyChanged("WarehouseId");
                }
            }
        }
        private Nullable<int> _warehouseId;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedBy", _createdBy);
                    if (!IsDeserializing)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                    }
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public int ContractId
        {
            get { return _contractId; }
            set
            {
                if (_contractId != value)
                {
                    ChangeTracker.RecordOriginalValue("ContractId", _contractId);
                    if (!IsDeserializing)
                    {
                        if (Contract != null && Contract.Id != value)
                        {
                            Contract = null;
                        }
                    }
                    _contractId = value;
                    OnPropertyChanged("ContractId");
                }
            }
        }
        private int _contractId;
    
        [DataMember]
        public Nullable<System.DateTime> DeliveryDate
        {
            get { return _deliveryDate; }
            set
            {
                if (_deliveryDate != value)
                {
                    _deliveryDate = value;
                    OnPropertyChanged("DeliveryDate");
                }
            }
        }
        private Nullable<System.DateTime> _deliveryDate;
    
        [DataMember]
        public Nullable<int> DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentId", _documentId);
                    if (!IsDeserializing)
                    {
                        if (Document != null && Document.Id != value)
                        {
                            Document = null;
                        }
                    }
                    _documentId = value;
                    OnPropertyChanged("DocumentId");
                }
            }
        }
        private Nullable<int> _documentId;
    
        [DataMember]
        public Nullable<int> ApprovalId
        {
            get { return _approvalId; }
            set
            {
                if (_approvalId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalId", _approvalId);
                    if (!IsDeserializing)
                    {
                        if (Approval != null && Approval.Id != value)
                        {
                            Approval = null;
                        }
                    }
                    _approvalId = value;
                    OnPropertyChanged("ApprovalId");
                }
            }
        }
        private Nullable<int> _approvalId;
    
        [DataMember]
        public Nullable<int> ApprovalStageIndex
        {
            get { return _approvalStageIndex; }
            set
            {
                if (_approvalStageIndex != value)
                {
                    _approvalStageIndex = value;
                    OnPropertyChanged("ApprovalStageIndex");
                }
            }
        }
        private Nullable<int> _approvalStageIndex;
    
        [DataMember]
        public Nullable<int> PricingStatus
        {
            get { return _pricingStatus; }
            set
            {
                if (_pricingStatus != value)
                {
                    _pricingStatus = value;
                    OnPropertyChanged("PricingStatus");
                }
            }
        }
        private Nullable<int> _pricingStatus;
    
        [DataMember]
        public Nullable<int> VATStatus
        {
            get { return _vATStatus; }
            set
            {
                if (_vATStatus != value)
                {
                    _vATStatus = value;
                    OnPropertyChanged("VATStatus");
                }
            }
        }
        private Nullable<int> _vATStatus;
    
        [DataMember]
        public string RejectReason
        {
            get { return _rejectReason; }
            set
            {
                if (_rejectReason != value)
                {
                    _rejectReason = value;
                    OnPropertyChanged("RejectReason");
                }
            }
        }
        private string _rejectReason;
    
        [DataMember]
        public Nullable<int> PricingCurrencyId
        {
            get { return _pricingCurrencyId; }
            set
            {
                if (_pricingCurrencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("PricingCurrencyId", _pricingCurrencyId);
                    if (!IsDeserializing)
                    {
                        if (Currency != null && Currency.Id != value)
                        {
                            Currency = null;
                        }
                    }
                    _pricingCurrencyId = value;
                    OnPropertyChanged("PricingCurrencyId");
                }
            }
        }
        private Nullable<int> _pricingCurrencyId;
    
        [DataMember]
        public bool IsHedged
        {
            get { return _isHedged; }
            set
            {
                if (_isHedged != value)
                {
                    _isHedged = value;
                    OnPropertyChanged("IsHedged");
                }
            }
        }
        private bool _isHedged;
    
        [DataMember]
        public string ShipTerm
        {
            get { return _shipTerm; }
            set
            {
                if (_shipTerm != value)
                {
                    _shipTerm = value;
                    OnPropertyChanged("ShipTerm");
                }
            }
        }
        private string _shipTerm;
    
        [DataMember]
        public string ExQuotaNo
        {
            get { return _exQuotaNo; }
            set
            {
                if (_exQuotaNo != value)
                {
                    _exQuotaNo = value;
                    OnPropertyChanged("ExQuotaNo");
                }
            }
        }
        private string _exQuotaNo;
    
        [DataMember]
        public decimal VerifiedQuantity
        {
            get { return _verifiedQuantity; }
            set
            {
                if (_verifiedQuantity != value)
                {
                    _verifiedQuantity = value;
                    OnPropertyChanged("VerifiedQuantity");
                }
            }
        }
        private decimal _verifiedQuantity;
    
        [DataMember]
        public Nullable<decimal> PaidAmount
        {
            get { return _paidAmount; }
            set
            {
                if (_paidAmount != value)
                {
                    _paidAmount = value;
                    OnPropertyChanged("PaidAmount");
                }
            }
        }
        private Nullable<decimal> _paidAmount;
    
        [DataMember]
        public Nullable<decimal> ReceivedAmount
        {
            get { return _receivedAmount; }
            set
            {
                if (_receivedAmount != value)
                {
                    _receivedAmount = value;
                    OnPropertyChanged("ReceivedAmount");
                }
            }
        }
        private Nullable<decimal> _receivedAmount;
    
        [DataMember]
        public Nullable<decimal> Equality
        {
            get { return _equality; }
            set
            {
                if (_equality != value)
                {
                    _equality = value;
                    OnPropertyChanged("Equality");
                }
            }
        }
        private Nullable<decimal> _equality;
    
        [DataMember]
        public Nullable<decimal> VATInvoicedQuantity
        {
            get { return _vATInvoicedQuantity; }
            set
            {
                if (_vATInvoicedQuantity != value)
                {
                    _vATInvoicedQuantity = value;
                    OnPropertyChanged("VATInvoicedQuantity");
                }
            }
        }
        private Nullable<decimal> _vATInvoicedQuantity;
    
        [DataMember]
        public Nullable<decimal> FinalPrice
        {
            get { return _finalPrice; }
            set
            {
                if (_finalPrice != value)
                {
                    _finalPrice = value;
                    OnPropertyChanged("FinalPrice");
                }
            }
        }
        private Nullable<decimal> _finalPrice;
    
        [DataMember]
        public Nullable<int> RelQuotaId
        {
            get { return _relQuotaId; }
            set
            {
                if (_relQuotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("RelQuotaId", _relQuotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota2 != null && Quota2.Id != value)
                        {
                            Quota2 = null;
                        }
                    }
                    _relQuotaId = value;
                    OnPropertyChanged("RelQuotaId");
                }
            }
        }
        private Nullable<int> _relQuotaId;
    
        [DataMember]
        public Nullable<decimal> RelPrice
        {
            get { return _relPrice; }
            set
            {
                if (_relPrice != value)
                {
                    _relPrice = value;
                    OnPropertyChanged("RelPrice");
                }
            }
        }
        private Nullable<decimal> _relPrice;
    
        [DataMember]
        public Nullable<int> RelQuotaStage
        {
            get { return _relQuotaStage; }
            set
            {
                if (_relQuotaStage != value)
                {
                    _relQuotaStage = value;
                    OnPropertyChanged("RelQuotaStage");
                }
            }
        }
        private Nullable<int> _relQuotaStage;
    
        [DataMember]
        public string RelQuotaStr
        {
            get { return _relQuotaStr; }
            set
            {
                if (_relQuotaStr != value)
                {
                    _relQuotaStr = value;
                    OnPropertyChanged("RelQuotaStr");
                }
            }
        }
        private string _relQuotaStr;
    
        [DataMember]
        public bool IsAutoGenerated
        {
            get { return _isAutoGenerated; }
            set
            {
                if (_isAutoGenerated != value)
                {
                    _isAutoGenerated = value;
                    OnPropertyChanged("IsAutoGenerated");
                }
            }
        }
        private bool _isAutoGenerated;
    
        [DataMember]
        public Nullable<bool> IsPaymentRequestFinished
        {
            get { return _isPaymentRequestFinished; }
            set
            {
                if (_isPaymentRequestFinished != value)
                {
                    _isPaymentRequestFinished = value;
                    OnPropertyChanged("IsPaymentRequestFinished");
                }
            }
        }
        private Nullable<bool> _isPaymentRequestFinished;
    
        [DataMember]
        public Nullable<int> QuotaGroupId
        {
            get { return _quotaGroupId; }
            set
            {
                if (_quotaGroupId != value)
                {
                    _quotaGroupId = value;
                    OnPropertyChanged("QuotaGroupId");
                }
            }
        }
        private Nullable<int> _quotaGroupId;
    
        [DataMember]
        public decimal VatInvoicedAmount
        {
            get { return _vatInvoicedAmount; }
            set
            {
                if (_vatInvoicedAmount != value)
                {
                    _vatInvoicedAmount = value;
                    OnPropertyChanged("VatInvoicedAmount");
                }
            }
        }
        private decimal _vatInvoicedAmount;
    
        [DataMember]
        public Nullable<bool> IsVatRequestFinished
        {
            get { return _isVatRequestFinished; }
            set
            {
                if (_isVatRequestFinished != value)
                {
                    _isVatRequestFinished = value;
                    OnPropertyChanged("IsVatRequestFinished");
                }
            }
        }
        private Nullable<bool> _isVatRequestFinished;
    
        [DataMember]
        public Nullable<System.DateTime> VATInvoiceDate
        {
            get { return _vATInvoiceDate; }
            set
            {
                if (_vATInvoiceDate != value)
                {
                    _vATInvoiceDate = value;
                    OnPropertyChanged("VATInvoiceDate");
                }
            }
        }
        private Nullable<System.DateTime> _vATInvoiceDate;
    
        [DataMember]
        public Nullable<int> PaymentMeanId
        {
            get { return _paymentMeanId; }
            set
            {
                if (_paymentMeanId != value)
                {
                    ChangeTracker.RecordOriginalValue("PaymentMeanId", _paymentMeanId);
                    if (!IsDeserializing)
                    {
                        if (PaymentMean != null && PaymentMean.Id != value)
                        {
                            PaymentMean = null;
                        }
                    }
                    _paymentMeanId = value;
                    OnPropertyChanged("PaymentMeanId");
                }
            }
        }
        private Nullable<int> _paymentMeanId;
    
        [DataMember]
        public Nullable<bool> IsFundflowFinished
        {
            get { return _isFundflowFinished; }
            set
            {
                if (_isFundflowFinished != value)
                {
                    _isFundflowFinished = value;
                    OnPropertyChanged("IsFundflowFinished");
                }
            }
        }
        private Nullable<bool> _isFundflowFinished;
    
        [DataMember]
        public Nullable<bool> IsCIFinished
        {
            get { return _isCIFinished; }
            set
            {
                if (_isCIFinished != value)
                {
                    _isCIFinished = value;
                    OnPropertyChanged("IsCIFinished");
                }
            }
        }
        private Nullable<bool> _isCIFinished;
    
        [DataMember]
        public Nullable<decimal> TempPrice
        {
            get { return _tempPrice; }
            set
            {
                if (_tempPrice != value)
                {
                    _tempPrice = value;
                    OnPropertyChanged("TempPrice");
                }
            }
        }
        private Nullable<decimal> _tempPrice;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Brand Brand
        {
            get { return _brand; }
            set
            {
                if (!ReferenceEquals(_brand, value))
                {
                    var previousValue = _brand;
                    _brand = value;
                    FixupBrand(previousValue);
                    OnNavigationPropertyChanged("Brand");
                }
            }
        }
        private Brand _brand;
    
        [DataMember]
        public Commodity Commodity
        {
            get { return _commodity; }
            set
            {
                if (!ReferenceEquals(_commodity, value))
                {
                    var previousValue = _commodity;
                    _commodity = value;
                    FixupCommodity(previousValue);
                    OnNavigationPropertyChanged("Commodity");
                }
            }
        }
        private Commodity _commodity;
    
        [DataMember]
        public CommodityType CommodityType
        {
            get { return _commodityType; }
            set
            {
                if (!ReferenceEquals(_commodityType, value))
                {
                    var previousValue = _commodityType;
                    _commodityType = value;
                    FixupCommodityType(previousValue);
                    OnNavigationPropertyChanged("CommodityType");
                }
            }
        }
        private CommodityType _commodityType;
    
        [DataMember]
        public Specification Specification
        {
            get { return _specification; }
            set
            {
                if (!ReferenceEquals(_specification, value))
                {
                    var previousValue = _specification;
                    _specification = value;
                    FixupSpecification(previousValue);
                    OnNavigationPropertyChanged("Specification");
                }
            }
        }
        private Specification _specification;
    
        [DataMember]
        public Warehouse Warehouse
        {
            get { return _warehouse; }
            set
            {
                if (!ReferenceEquals(_warehouse, value))
                {
                    var previousValue = _warehouse;
                    _warehouse = value;
                    FixupWarehouse(previousValue);
                    OnNavigationPropertyChanged("Warehouse");
                }
            }
        }
        private Warehouse _warehouse;
    
        [DataMember]
        public TrackableCollection<Delivery> Deliveries
        {
            get
            {
                if (_deliveries == null)
                {
                    _deliveries = new TrackableCollection<Delivery>();
                    _deliveries.CollectionChanged += FixupDeliveries;
                }
                return _deliveries;
            }
            set
            {
                if (!ReferenceEquals(_deliveries, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged -= FixupDeliveries;
                    }
                    _deliveries = value;
                    if (_deliveries != null)
                    {
                        _deliveries.CollectionChanged += FixupDeliveries;
                    }
                    OnNavigationPropertyChanged("Deliveries");
                }
            }
        }
        private TrackableCollection<Delivery> _deliveries;
    
        [DataMember]
        public Document Document
        {
            get { return _document; }
            set
            {
                if (!ReferenceEquals(_document, value))
                {
                    var previousValue = _document;
                    _document = value;
                    FixupDocument(previousValue);
                    OnNavigationPropertyChanged("Document");
                }
            }
        }
        private Document _document;
    
        [DataMember]
        public TrackableCollection<WarehouseOut> WarehouseOuts
        {
            get
            {
                if (_warehouseOuts == null)
                {
                    _warehouseOuts = new TrackableCollection<WarehouseOut>();
                    _warehouseOuts.CollectionChanged += FixupWarehouseOuts;
                }
                return _warehouseOuts;
            }
            set
            {
                if (!ReferenceEquals(_warehouseOuts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_warehouseOuts != null)
                    {
                        _warehouseOuts.CollectionChanged -= FixupWarehouseOuts;
                    }
                    _warehouseOuts = value;
                    if (_warehouseOuts != null)
                    {
                        _warehouseOuts.CollectionChanged += FixupWarehouseOuts;
                    }
                    OnNavigationPropertyChanged("WarehouseOuts");
                }
            }
        }
        private TrackableCollection<WarehouseOut> _warehouseOuts;
    
        [DataMember]
        public TrackableCollection<FundFlow> FundFlows
        {
            get
            {
                if (_fundFlows == null)
                {
                    _fundFlows = new TrackableCollection<FundFlow>();
                    _fundFlows.CollectionChanged += FixupFundFlows;
                }
                return _fundFlows;
            }
            set
            {
                if (!ReferenceEquals(_fundFlows, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged -= FixupFundFlows;
                    }
                    _fundFlows = value;
                    if (_fundFlows != null)
                    {
                        _fundFlows.CollectionChanged += FixupFundFlows;
                    }
                    OnNavigationPropertyChanged("FundFlows");
                }
            }
        }
        private TrackableCollection<FundFlow> _fundFlows;
    
        [DataMember]
        public Approval Approval
        {
            get { return _approval; }
            set
            {
                if (!ReferenceEquals(_approval, value))
                {
                    var previousValue = _approval;
                    _approval = value;
                    FixupApproval(previousValue);
                    OnNavigationPropertyChanged("Approval");
                }
            }
        }
        private Approval _approval;
    
        [DataMember]
        public TrackableCollection<CommercialInvoice> CommercialInvoices
        {
            get
            {
                if (_commercialInvoices == null)
                {
                    _commercialInvoices = new TrackableCollection<CommercialInvoice>();
                    _commercialInvoices.CollectionChanged += FixupCommercialInvoices;
                }
                return _commercialInvoices;
            }
            set
            {
                if (!ReferenceEquals(_commercialInvoices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_commercialInvoices != null)
                    {
                        _commercialInvoices.CollectionChanged -= FixupCommercialInvoices;
                    }
                    _commercialInvoices = value;
                    if (_commercialInvoices != null)
                    {
                        _commercialInvoices.CollectionChanged += FixupCommercialInvoices;
                    }
                    OnNavigationPropertyChanged("CommercialInvoices");
                }
            }
        }
        private TrackableCollection<CommercialInvoice> _commercialInvoices;
    
        [DataMember]
        public TrackableCollection<VATInvoiceLine> VATInvoiceLines
        {
            get
            {
                if (_vATInvoiceLines == null)
                {
                    _vATInvoiceLines = new TrackableCollection<VATInvoiceLine>();
                    _vATInvoiceLines.CollectionChanged += FixupVATInvoiceLines;
                }
                return _vATInvoiceLines;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoiceLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoiceLines != null)
                    {
                        _vATInvoiceLines.CollectionChanged -= FixupVATInvoiceLines;
                    }
                    _vATInvoiceLines = value;
                    if (_vATInvoiceLines != null)
                    {
                        _vATInvoiceLines.CollectionChanged += FixupVATInvoiceLines;
                    }
                    OnNavigationPropertyChanged("VATInvoiceLines");
                }
            }
        }
        private TrackableCollection<VATInvoiceLine> _vATInvoiceLines;
    
        [DataMember]
        public TrackableCollection<PaymentRequest> PaymentRequests
        {
            get
            {
                if (_paymentRequests == null)
                {
                    _paymentRequests = new TrackableCollection<PaymentRequest>();
                    _paymentRequests.CollectionChanged += FixupPaymentRequests;
                }
                return _paymentRequests;
            }
            set
            {
                if (!ReferenceEquals(_paymentRequests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged -= FixupPaymentRequests;
                    }
                    _paymentRequests = value;
                    if (_paymentRequests != null)
                    {
                        _paymentRequests.CollectionChanged += FixupPaymentRequests;
                    }
                    OnNavigationPropertyChanged("PaymentRequests");
                }
            }
        }
        private TrackableCollection<PaymentRequest> _paymentRequests;
    
        [DataMember]
        public TrackableCollection<Pricing> Pricings
        {
            get
            {
                if (_pricings == null)
                {
                    _pricings = new TrackableCollection<Pricing>();
                    _pricings.CollectionChanged += FixupPricings;
                }
                return _pricings;
            }
            set
            {
                if (!ReferenceEquals(_pricings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pricings != null)
                    {
                        _pricings.CollectionChanged -= FixupPricings;
                    }
                    _pricings = value;
                    if (_pricings != null)
                    {
                        _pricings.CollectionChanged += FixupPricings;
                    }
                    OnNavigationPropertyChanged("Pricings");
                }
            }
        }
        private TrackableCollection<Pricing> _pricings;
    
        [DataMember]
        public TrackableCollection<Unpricing> Unpricings
        {
            get
            {
                if (_unpricings == null)
                {
                    _unpricings = new TrackableCollection<Unpricing>();
                    _unpricings.CollectionChanged += FixupUnpricings;
                }
                return _unpricings;
            }
            set
            {
                if (!ReferenceEquals(_unpricings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_unpricings != null)
                    {
                        _unpricings.CollectionChanged -= FixupUnpricings;
                    }
                    _unpricings = value;
                    if (_unpricings != null)
                    {
                        _unpricings.CollectionChanged += FixupUnpricings;
                    }
                    OnNavigationPropertyChanged("Unpricings");
                }
            }
        }
        private TrackableCollection<Unpricing> _unpricings;
    
        [DataMember]
        public TrackableCollection<VATInvoiceRequestLine> VATInvoiceRequestLines
        {
            get
            {
                if (_vATInvoiceRequestLines == null)
                {
                    _vATInvoiceRequestLines = new TrackableCollection<VATInvoiceRequestLine>();
                    _vATInvoiceRequestLines.CollectionChanged += FixupVATInvoiceRequestLines;
                }
                return _vATInvoiceRequestLines;
            }
            set
            {
                if (!ReferenceEquals(_vATInvoiceRequestLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_vATInvoiceRequestLines != null)
                    {
                        _vATInvoiceRequestLines.CollectionChanged -= FixupVATInvoiceRequestLines;
                    }
                    _vATInvoiceRequestLines = value;
                    if (_vATInvoiceRequestLines != null)
                    {
                        _vATInvoiceRequestLines.CollectionChanged += FixupVATInvoiceRequestLines;
                    }
                    OnNavigationPropertyChanged("VATInvoiceRequestLines");
                }
            }
        }
        private TrackableCollection<VATInvoiceRequestLine> _vATInvoiceRequestLines;
    
        [DataMember]
        public TrackableCollection<LMEPosition> LMEPositions
        {
            get
            {
                if (_lMEPositions == null)
                {
                    _lMEPositions = new TrackableCollection<LMEPosition>();
                    _lMEPositions.CollectionChanged += FixupLMEPositions;
                }
                return _lMEPositions;
            }
            set
            {
                if (!ReferenceEquals(_lMEPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lMEPositions != null)
                    {
                        _lMEPositions.CollectionChanged -= FixupLMEPositions;
                    }
                    _lMEPositions = value;
                    if (_lMEPositions != null)
                    {
                        _lMEPositions.CollectionChanged += FixupLMEPositions;
                    }
                    OnNavigationPropertyChanged("LMEPositions");
                }
            }
        }
        private TrackableCollection<LMEPosition> _lMEPositions;
    
        [DataMember]
        public Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                    OnNavigationPropertyChanged("Currency");
                }
            }
        }
        private Currency _currency;
    
        [DataMember]
        public TrackableCollection<HedgeLineQuota> HedgeLineQuotas
        {
            get
            {
                if (_hedgeLineQuotas == null)
                {
                    _hedgeLineQuotas = new TrackableCollection<HedgeLineQuota>();
                    _hedgeLineQuotas.CollectionChanged += FixupHedgeLineQuotas;
                }
                return _hedgeLineQuotas;
            }
            set
            {
                if (!ReferenceEquals(_hedgeLineQuotas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hedgeLineQuotas != null)
                    {
                        _hedgeLineQuotas.CollectionChanged -= FixupHedgeLineQuotas;
                    }
                    _hedgeLineQuotas = value;
                    if (_hedgeLineQuotas != null)
                    {
                        _hedgeLineQuotas.CollectionChanged += FixupHedgeLineQuotas;
                    }
                    OnNavigationPropertyChanged("HedgeLineQuotas");
                }
            }
        }
        private TrackableCollection<HedgeLineQuota> _hedgeLineQuotas;
    
        [DataMember]
        public Contract Contract
        {
            get { return _contract; }
            set
            {
                if (!ReferenceEquals(_contract, value))
                {
                    var previousValue = _contract;
                    _contract = value;
                    FixupContract(previousValue);
                    OnNavigationPropertyChanged("Contract");
                }
            }
        }
        private Contract _contract;
    
        [DataMember]
        public TrackableCollection<LetterOfCredit> LetterOfCredits
        {
            get
            {
                if (_letterOfCredits == null)
                {
                    _letterOfCredits = new TrackableCollection<LetterOfCredit>();
                    _letterOfCredits.CollectionChanged += FixupLetterOfCredits;
                }
                return _letterOfCredits;
            }
            set
            {
                if (!ReferenceEquals(_letterOfCredits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_letterOfCredits != null)
                    {
                        _letterOfCredits.CollectionChanged -= FixupLetterOfCredits;
                    }
                    _letterOfCredits = value;
                    if (_letterOfCredits != null)
                    {
                        _letterOfCredits.CollectionChanged += FixupLetterOfCredits;
                    }
                    OnNavigationPropertyChanged("LetterOfCredits");
                }
            }
        }
        private TrackableCollection<LetterOfCredit> _letterOfCredits;
    
        [DataMember]
        public TrackableCollection<QuotaBrandRel> QuotaBrandRels
        {
            get
            {
                if (_quotaBrandRels == null)
                {
                    _quotaBrandRels = new TrackableCollection<QuotaBrandRel>();
                    _quotaBrandRels.CollectionChanged += FixupQuotaBrandRels;
                }
                return _quotaBrandRels;
            }
            set
            {
                if (!ReferenceEquals(_quotaBrandRels, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_quotaBrandRels != null)
                    {
                        _quotaBrandRels.CollectionChanged -= FixupQuotaBrandRels;
                    }
                    _quotaBrandRels = value;
                    if (_quotaBrandRels != null)
                    {
                        _quotaBrandRels.CollectionChanged += FixupQuotaBrandRels;
                    }
                    OnNavigationPropertyChanged("QuotaBrandRels");
                }
            }
        }
        private TrackableCollection<QuotaBrandRel> _quotaBrandRels;
    
        [DataMember]
        public TrackableCollection<PSQuotaRel> PSQuotaRels
        {
            get
            {
                if (_pSQuotaRels == null)
                {
                    _pSQuotaRels = new TrackableCollection<PSQuotaRel>();
                    _pSQuotaRels.CollectionChanged += FixupPSQuotaRels;
                }
                return _pSQuotaRels;
            }
            set
            {
                if (!ReferenceEquals(_pSQuotaRels, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pSQuotaRels != null)
                    {
                        _pSQuotaRels.CollectionChanged -= FixupPSQuotaRels;
                    }
                    _pSQuotaRels = value;
                    if (_pSQuotaRels != null)
                    {
                        _pSQuotaRels.CollectionChanged += FixupPSQuotaRels;
                    }
                    OnNavigationPropertyChanged("PSQuotaRels");
                }
            }
        }
        private TrackableCollection<PSQuotaRel> _pSQuotaRels;
    
        [DataMember]
        public TrackableCollection<PSQuotaRel> PSQuotaRels1
        {
            get
            {
                if (_pSQuotaRels1 == null)
                {
                    _pSQuotaRels1 = new TrackableCollection<PSQuotaRel>();
                    _pSQuotaRels1.CollectionChanged += FixupPSQuotaRels1;
                }
                return _pSQuotaRels1;
            }
            set
            {
                if (!ReferenceEquals(_pSQuotaRels1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pSQuotaRels1 != null)
                    {
                        _pSQuotaRels1.CollectionChanged -= FixupPSQuotaRels1;
                    }
                    _pSQuotaRels1 = value;
                    if (_pSQuotaRels1 != null)
                    {
                        _pSQuotaRels1.CollectionChanged += FixupPSQuotaRels1;
                    }
                    OnNavigationPropertyChanged("PSQuotaRels1");
                }
            }
        }
        private TrackableCollection<PSQuotaRel> _pSQuotaRels1;
    
        [DataMember]
        public User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                    OnNavigationPropertyChanged("User");
                }
            }
        }
        private User _user;
    
        [DataMember]
        public TrackableCollection<Quota> Quota1
        {
            get
            {
                if (_quota1 == null)
                {
                    _quota1 = new TrackableCollection<Quota>();
                    _quota1.CollectionChanged += FixupQuota1;
                }
                return _quota1;
            }
            set
            {
                if (!ReferenceEquals(_quota1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_quota1 != null)
                    {
                        _quota1.CollectionChanged -= FixupQuota1;
                    }
                    _quota1 = value;
                    if (_quota1 != null)
                    {
                        _quota1.CollectionChanged += FixupQuota1;
                    }
                    OnNavigationPropertyChanged("Quota1");
                }
            }
        }
        private TrackableCollection<Quota> _quota1;
    
        [DataMember]
        public Quota Quota2
        {
            get { return _quota2; }
            set
            {
                if (!ReferenceEquals(_quota2, value))
                {
                    var previousValue = _quota2;
                    _quota2 = value;
                    FixupQuota2(previousValue);
                    OnNavigationPropertyChanged("Quota2");
                }
            }
        }
        private Quota _quota2;
    
        [DataMember]
        public PaymentMean PaymentMean
        {
            get { return _paymentMean; }
            set
            {
                if (!ReferenceEquals(_paymentMean, value))
                {
                    var previousValue = _paymentMean;
                    _paymentMean = value;
                    FixupPaymentMean(previousValue);
                    OnNavigationPropertyChanged("PaymentMean");
                }
            }
        }
        private PaymentMean _paymentMean;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Brand = null;
            Commodity = null;
            CommodityType = null;
            Specification = null;
            Warehouse = null;
            Deliveries.Clear();
            Document = null;
            WarehouseOuts.Clear();
            FundFlows.Clear();
            Approval = null;
            CommercialInvoices.Clear();
            VATInvoiceLines.Clear();
            PaymentRequests.Clear();
            Pricings.Clear();
            Unpricings.Clear();
            VATInvoiceRequestLines.Clear();
            LMEPositions.Clear();
            Currency = null;
            HedgeLineQuotas.Clear();
            Contract = null;
            LetterOfCredits.Clear();
            QuotaBrandRels.Clear();
            PSQuotaRels.Clear();
            PSQuotaRels1.Clear();
            User = null;
            Quota1.Clear();
            Quota2 = null;
            PaymentMean = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBrand(Brand previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (Brand != null)
            {
                if (!Brand.Quotas.Contains(this))
                {
                    Brand.Quotas.Add(this);
                }
    
                BrandId = Brand.Id;
            }
            else if (!skipKeys)
            {
                BrandId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Brand")
                    && (ChangeTracker.OriginalValues["Brand"] == Brand))
                {
                    ChangeTracker.OriginalValues.Remove("Brand");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Brand", previousValue);
                }
                if (Brand != null && !Brand.ChangeTracker.ChangeTrackingEnabled)
                {
                    Brand.StartTracking();
                }
            }
        }
    
        private void FixupCommodity(Commodity previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (Commodity != null)
            {
                if (!Commodity.Quotas.Contains(this))
                {
                    Commodity.Quotas.Add(this);
                }
    
                CommodityId = Commodity.Id;
            }
            else if (!skipKeys)
            {
                CommodityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Commodity")
                    && (ChangeTracker.OriginalValues["Commodity"] == Commodity))
                {
                    ChangeTracker.OriginalValues.Remove("Commodity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Commodity", previousValue);
                }
                if (Commodity != null && !Commodity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Commodity.StartTracking();
                }
            }
        }
    
        private void FixupCommodityType(CommodityType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (CommodityType != null)
            {
                if (!CommodityType.Quotas.Contains(this))
                {
                    CommodityType.Quotas.Add(this);
                }
    
                CommodityTypeId = CommodityType.Id;
            }
            else if (!skipKeys)
            {
                CommodityTypeId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CommodityType")
                    && (ChangeTracker.OriginalValues["CommodityType"] == CommodityType))
                {
                    ChangeTracker.OriginalValues.Remove("CommodityType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CommodityType", previousValue);
                }
                if (CommodityType != null && !CommodityType.ChangeTracker.ChangeTrackingEnabled)
                {
                    CommodityType.StartTracking();
                }
            }
        }
    
        private void FixupSpecification(Specification previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (Specification != null)
            {
                if (!Specification.Quotas.Contains(this))
                {
                    Specification.Quotas.Add(this);
                }
    
                SpecificationId = Specification.Id;
            }
            else if (!skipKeys)
            {
                SpecificationId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Specification")
                    && (ChangeTracker.OriginalValues["Specification"] == Specification))
                {
                    ChangeTracker.OriginalValues.Remove("Specification");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Specification", previousValue);
                }
                if (Specification != null && !Specification.ChangeTracker.ChangeTrackingEnabled)
                {
                    Specification.StartTracking();
                }
            }
        }
    
        private void FixupWarehouse(Warehouse previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (Warehouse != null)
            {
                if (!Warehouse.Quotas.Contains(this))
                {
                    Warehouse.Quotas.Add(this);
                }
    
                WarehouseId = Warehouse.Id;
            }
            else if (!skipKeys)
            {
                WarehouseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Warehouse")
                    && (ChangeTracker.OriginalValues["Warehouse"] == Warehouse))
                {
                    ChangeTracker.OriginalValues.Remove("Warehouse");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Warehouse", previousValue);
                }
                if (Warehouse != null && !Warehouse.ChangeTracker.ChangeTrackingEnabled)
                {
                    Warehouse.StartTracking();
                }
            }
        }
    
        private void FixupDocument(Document previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (Document != null)
            {
                if (!Document.Quotas.Contains(this))
                {
                    Document.Quotas.Add(this);
                }
    
                DocumentId = Document.Id;
            }
            else if (!skipKeys)
            {
                DocumentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Document")
                    && (ChangeTracker.OriginalValues["Document"] == Document))
                {
                    ChangeTracker.OriginalValues.Remove("Document");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Document", previousValue);
                }
                if (Document != null && !Document.ChangeTracker.ChangeTrackingEnabled)
                {
                    Document.StartTracking();
                }
            }
        }
    
        private void FixupApproval(Approval previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (Approval != null)
            {
                if (!Approval.Quotas.Contains(this))
                {
                    Approval.Quotas.Add(this);
                }
    
                ApprovalId = Approval.Id;
            }
            else if (!skipKeys)
            {
                ApprovalId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Approval")
                    && (ChangeTracker.OriginalValues["Approval"] == Approval))
                {
                    ChangeTracker.OriginalValues.Remove("Approval");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Approval", previousValue);
                }
                if (Approval != null && !Approval.ChangeTracker.ChangeTrackingEnabled)
                {
                    Approval.StartTracking();
                }
            }
        }
    
        private void FixupCurrency(Currency previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.Quotas.Contains(this))
                {
                    Currency.Quotas.Add(this);
                }
    
                PricingCurrencyId = Currency.Id;
            }
            else if (!skipKeys)
            {
                PricingCurrencyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Currency")
                    && (ChangeTracker.OriginalValues["Currency"] == Currency))
                {
                    ChangeTracker.OriginalValues.Remove("Currency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Currency", previousValue);
                }
                if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
                {
                    Currency.StartTracking();
                }
            }
        }
    
        private void FixupContract(Contract previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (Contract != null)
            {
                if (!Contract.Quotas.Contains(this))
                {
                    Contract.Quotas.Add(this);
                }
    
                ContractId = Contract.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Contract")
                    && (ChangeTracker.OriginalValues["Contract"] == Contract))
                {
                    ChangeTracker.OriginalValues.Remove("Contract");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Contract", previousValue);
                }
                if (Contract != null && !Contract.ChangeTracker.ChangeTrackingEnabled)
                {
                    Contract.StartTracking();
                }
            }
        }
    
        private void FixupUser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Quotas.Contains(this))
                {
                    User.Quotas.Add(this);
                }
    
                CreatedBy = User.Id;
            }
            else if (!skipKeys)
            {
                CreatedBy = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("User")
                    && (ChangeTracker.OriginalValues["User"] == User))
                {
                    ChangeTracker.OriginalValues.Remove("User");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("User", previousValue);
                }
                if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
                {
                    User.StartTracking();
                }
            }
        }
    
        private void FixupQuota2(Quota previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quota1.Contains(this))
            {
                previousValue.Quota1.Remove(this);
            }
    
            if (Quota2 != null)
            {
                if (!Quota2.Quota1.Contains(this))
                {
                    Quota2.Quota1.Add(this);
                }
    
                RelQuotaId = Quota2.Id;
            }
            else if (!skipKeys)
            {
                RelQuotaId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota2")
                    && (ChangeTracker.OriginalValues["Quota2"] == Quota2))
                {
                    ChangeTracker.OriginalValues.Remove("Quota2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota2", previousValue);
                }
                if (Quota2 != null && !Quota2.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota2.StartTracking();
                }
            }
        }
    
        private void FixupPaymentMean(PaymentMean previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Quotas.Contains(this))
            {
                previousValue.Quotas.Remove(this);
            }
    
            if (PaymentMean != null)
            {
                if (!PaymentMean.Quotas.Contains(this))
                {
                    PaymentMean.Quotas.Add(this);
                }
    
                PaymentMeanId = PaymentMean.Id;
            }
            else if (!skipKeys)
            {
                PaymentMeanId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentMean")
                    && (ChangeTracker.OriginalValues["PaymentMean"] == PaymentMean))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentMean");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentMean", previousValue);
                }
                if (PaymentMean != null && !PaymentMean.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentMean.StartTracking();
                }
            }
        }
    
        private void FixupDeliveries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deliveries", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deliveries", item);
                    }
                }
            }
        }
    
        private void FixupWarehouseOuts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (WarehouseOut item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WarehouseOuts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WarehouseOut item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseOuts", item);
                    }
                }
            }
        }
    
        private void FixupFundFlows(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FundFlow item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FundFlows", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FundFlow item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FundFlows", item);
                    }
                }
            }
        }
    
        private void FixupCommercialInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CommercialInvoice item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CommercialInvoices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommercialInvoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CommercialInvoices", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoiceLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoiceLine item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoiceLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoiceLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoiceLines", item);
                    }
                }
            }
        }
    
        private void FixupPaymentRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PaymentRequest item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PaymentRequests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PaymentRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PaymentRequests", item);
                    }
                }
            }
        }
    
        private void FixupPricings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Pricing item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Pricings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pricing item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Pricings", item);
                    }
                }
            }
        }
    
        private void FixupUnpricings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Unpricing item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Unpricings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Unpricing item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Unpricings", item);
                    }
                }
            }
        }
    
        private void FixupVATInvoiceRequestLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VATInvoiceRequestLine item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VATInvoiceRequestLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VATInvoiceRequestLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VATInvoiceRequestLines", item);
                    }
                }
            }
        }
    
        private void FixupLMEPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LMEPosition item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LMEPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LMEPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LMEPositions", item);
                    }
                }
            }
        }
    
        private void FixupHedgeLineQuotas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HedgeLineQuota item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HedgeLineQuotas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HedgeLineQuota item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HedgeLineQuotas", item);
                    }
                }
            }
        }
    
        private void FixupLetterOfCredits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LetterOfCredit item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LetterOfCredits", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LetterOfCredit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LetterOfCredits", item);
                    }
                }
            }
        }
    
        private void FixupQuotaBrandRels(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (QuotaBrandRel item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("QuotaBrandRels", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (QuotaBrandRel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("QuotaBrandRels", item);
                    }
                }
            }
        }
    
        private void FixupPSQuotaRels(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PSQuotaRel item in e.NewItems)
                {
                    item.Quota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PSQuotaRels", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PSQuotaRel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota, this))
                    {
                        item.Quota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PSQuotaRels", item);
                    }
                }
            }
        }
    
        private void FixupPSQuotaRels1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PSQuotaRel item in e.NewItems)
                {
                    item.Quota1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PSQuotaRels1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PSQuotaRel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota1, this))
                    {
                        item.Quota1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PSQuotaRels1", item);
                    }
                }
            }
        }
    
        private void FixupQuota1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Quota item in e.NewItems)
                {
                    item.Quota2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Quota1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Quota item in e.OldItems)
                {
                    if (ReferenceEquals(item.Quota2, this))
                    {
                        item.Quota2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Quota1", item);
                    }
                }
            }
        }

        #endregion

    }
}
