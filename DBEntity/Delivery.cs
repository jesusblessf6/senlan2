//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BusinessPartner))]
    [KnownType(typeof(Country))]
    [KnownType(typeof(Port))]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(Warehouse))]
    [KnownType(typeof(DeliveryLine))]
    [KnownType(typeof(Approval))]
    [KnownType(typeof(Document))]
    [KnownType(typeof(CommercialInvoice))]
    [KnownType(typeof(LetterOfCredit))]
    [KnownType(typeof(PaymentRequest))]
    [KnownType(typeof(Delivery))]
    [KnownType(typeof(ForeignDeliveryPool))]
    public partial class Delivery: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private int _quotaId;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public string DeliveryNo
        {
            get { return _deliveryNo; }
            set
            {
                if (_deliveryNo != value)
                {
                    _deliveryNo = value;
                    OnPropertyChanged("DeliveryNo");
                }
            }
        }
        private string _deliveryNo;
    
        [DataMember]
        public int DeliveryType
        {
            get { return _deliveryType; }
            set
            {
                if (_deliveryType != value)
                {
                    _deliveryType = value;
                    OnPropertyChanged("DeliveryType");
                }
            }
        }
        private int _deliveryType;
    
        [DataMember]
        public Nullable<bool> FinanceStatus
        {
            get { return _financeStatus; }
            set
            {
                if (_financeStatus != value)
                {
                    _financeStatus = value;
                    OnPropertyChanged("FinanceStatus");
                }
            }
        }
        private Nullable<bool> _financeStatus;
    
        [DataMember]
        public Nullable<int> ApproveStatus
        {
            get { return _approveStatus; }
            set
            {
                if (_approveStatus != value)
                {
                    _approveStatus = value;
                    OnPropertyChanged("ApproveStatus");
                }
            }
        }
        private Nullable<int> _approveStatus;
    
        [DataMember]
        public Nullable<System.DateTime> IssueDate
        {
            get { return _issueDate; }
            set
            {
                if (_issueDate != value)
                {
                    _issueDate = value;
                    OnPropertyChanged("IssueDate");
                }
            }
        }
        private Nullable<System.DateTime> _issueDate;
    
        [DataMember]
        public Nullable<int> WarehouseProviderId
        {
            get { return _warehouseProviderId; }
            set
            {
                if (_warehouseProviderId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseProviderId", _warehouseProviderId);
                    if (!IsDeserializing)
                    {
                        if (WarehouseProvider != null && WarehouseProvider.Id != value)
                        {
                            WarehouseProvider = null;
                        }
                    }
                    _warehouseProviderId = value;
                    OnPropertyChanged("WarehouseProviderId");
                }
            }
        }
        private Nullable<int> _warehouseProviderId;
    
        [DataMember]
        public Nullable<int> WarehouseId
        {
            get { return _warehouseId; }
            set
            {
                if (_warehouseId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarehouseId", _warehouseId);
                    if (!IsDeserializing)
                    {
                        if (Warehouse != null && Warehouse.Id != value)
                        {
                            Warehouse = null;
                        }
                    }
                    _warehouseId = value;
                    OnPropertyChanged("WarehouseId");
                }
            }
        }
        private Nullable<int> _warehouseId;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public bool IsCopy
        {
            get { return _isCopy; }
            set
            {
                if (_isCopy != value)
                {
                    _isCopy = value;
                    OnPropertyChanged("IsCopy");
                }
            }
        }
        private bool _isCopy;
    
        [DataMember]
        public Nullable<int> ShipperId
        {
            get { return _shipperId; }
            set
            {
                if (_shipperId != value)
                {
                    ChangeTracker.RecordOriginalValue("ShipperId", _shipperId);
                    if (!IsDeserializing)
                    {
                        if (Shipper != null && Shipper.Id != value)
                        {
                            Shipper = null;
                        }
                    }
                    _shipperId = value;
                    OnPropertyChanged("ShipperId");
                }
            }
        }
        private Nullable<int> _shipperId;
    
        [DataMember]
        public Nullable<int> NotifyPartyId
        {
            get { return _notifyPartyId; }
            set
            {
                if (_notifyPartyId != value)
                {
                    ChangeTracker.RecordOriginalValue("NotifyPartyId", _notifyPartyId);
                    if (!IsDeserializing)
                    {
                        if (NotifyParty != null && NotifyParty.Id != value)
                        {
                            NotifyParty = null;
                        }
                    }
                    _notifyPartyId = value;
                    OnPropertyChanged("NotifyPartyId");
                }
            }
        }
        private Nullable<int> _notifyPartyId;
    
        [DataMember]
        public Nullable<int> ShippingPartyId
        {
            get { return _shippingPartyId; }
            set
            {
                if (_shippingPartyId != value)
                {
                    ChangeTracker.RecordOriginalValue("ShippingPartyId", _shippingPartyId);
                    if (!IsDeserializing)
                    {
                        if (ShippingParty != null && ShippingParty.Id != value)
                        {
                            ShippingParty = null;
                        }
                    }
                    _shippingPartyId = value;
                    OnPropertyChanged("ShippingPartyId");
                }
            }
        }
        private Nullable<int> _shippingPartyId;
    
        [DataMember]
        public Nullable<System.DateTime> OnBoardDate
        {
            get { return _onBoardDate; }
            set
            {
                if (_onBoardDate != value)
                {
                    _onBoardDate = value;
                    OnPropertyChanged("OnBoardDate");
                }
            }
        }
        private Nullable<System.DateTime> _onBoardDate;
    
        [DataMember]
        public Nullable<System.DateTime> ArrivedDate
        {
            get { return _arrivedDate; }
            set
            {
                if (_arrivedDate != value)
                {
                    _arrivedDate = value;
                    OnPropertyChanged("ArrivedDate");
                }
            }
        }
        private Nullable<System.DateTime> _arrivedDate;
    
        [DataMember]
        public bool IsCustomed
        {
            get { return _isCustomed; }
            set
            {
                if (_isCustomed != value)
                {
                    _isCustomed = value;
                    OnPropertyChanged("IsCustomed");
                }
            }
        }
        private bool _isCustomed;
    
        [DataMember]
        public string VesselNo
        {
            get { return _vesselNo; }
            set
            {
                if (_vesselNo != value)
                {
                    _vesselNo = value;
                    OnPropertyChanged("VesselNo");
                }
            }
        }
        private string _vesselNo;
    
        [DataMember]
        public Nullable<int> LoadingPortId
        {
            get { return _loadingPortId; }
            set
            {
                if (_loadingPortId != value)
                {
                    ChangeTracker.RecordOriginalValue("LoadingPortId", _loadingPortId);
                    if (!IsDeserializing)
                    {
                        if (LoadingPort != null && LoadingPort.Id != value)
                        {
                            LoadingPort = null;
                        }
                    }
                    _loadingPortId = value;
                    OnPropertyChanged("LoadingPortId");
                }
            }
        }
        private Nullable<int> _loadingPortId;
    
        [DataMember]
        public Nullable<int> LoadingPlaceId
        {
            get { return _loadingPlaceId; }
            set
            {
                if (_loadingPlaceId != value)
                {
                    ChangeTracker.RecordOriginalValue("LoadingPlaceId", _loadingPlaceId);
                    if (!IsDeserializing)
                    {
                        if (LoadingPlace != null && LoadingPlace.Id != value)
                        {
                            LoadingPlace = null;
                        }
                    }
                    _loadingPlaceId = value;
                    OnPropertyChanged("LoadingPlaceId");
                }
            }
        }
        private Nullable<int> _loadingPlaceId;
    
        [DataMember]
        public Nullable<int> DischargePortId
        {
            get { return _dischargePortId; }
            set
            {
                if (_dischargePortId != value)
                {
                    ChangeTracker.RecordOriginalValue("DischargePortId", _dischargePortId);
                    if (!IsDeserializing)
                    {
                        if (DischargePort != null && DischargePort.Id != value)
                        {
                            DischargePort = null;
                        }
                    }
                    _dischargePortId = value;
                    OnPropertyChanged("DischargePortId");
                }
            }
        }
        private Nullable<int> _dischargePortId;
    
        [DataMember]
        public Nullable<int> DischargePlaceId
        {
            get { return _dischargePlaceId; }
            set
            {
                if (_dischargePlaceId != value)
                {
                    ChangeTracker.RecordOriginalValue("DischargePlaceId", _dischargePlaceId);
                    if (!IsDeserializing)
                    {
                        if (DischargePlace != null && DischargePlace.Id != value)
                        {
                            DischargePlace = null;
                        }
                    }
                    _dischargePlaceId = value;
                    OnPropertyChanged("DischargePlaceId");
                }
            }
        }
        private Nullable<int> _dischargePlaceId;
    
        [DataMember]
        public string PackingStandard
        {
            get { return _packingStandard; }
            set
            {
                if (_packingStandard != value)
                {
                    _packingStandard = value;
                    OnPropertyChanged("PackingStandard");
                }
            }
        }
        private string _packingStandard;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<int> ApprovalId
        {
            get { return _approvalId; }
            set
            {
                if (_approvalId != value)
                {
                    ChangeTracker.RecordOriginalValue("ApprovalId", _approvalId);
                    if (!IsDeserializing)
                    {
                        if (Approval != null && Approval.Id != value)
                        {
                            Approval = null;
                        }
                    }
                    _approvalId = value;
                    OnPropertyChanged("ApprovalId");
                }
            }
        }
        private Nullable<int> _approvalId;
    
        [DataMember]
        public Nullable<int> ApprovalStageIndex
        {
            get { return _approvalStageIndex; }
            set
            {
                if (_approvalStageIndex != value)
                {
                    _approvalStageIndex = value;
                    OnPropertyChanged("ApprovalStageIndex");
                }
            }
        }
        private Nullable<int> _approvalStageIndex;
    
        [DataMember]
        public Nullable<int> DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    ChangeTracker.RecordOriginalValue("DocumentId", _documentId);
                    if (!IsDeserializing)
                    {
                        if (Document != null && Document.Id != value)
                        {
                            Document = null;
                        }
                    }
                    _documentId = value;
                    OnPropertyChanged("DocumentId");
                }
            }
        }
        private Nullable<int> _documentId;
    
        [DataMember]
        public string RejectReason
        {
            get { return _rejectReason; }
            set
            {
                if (_rejectReason != value)
                {
                    _rejectReason = value;
                    OnPropertyChanged("RejectReason");
                }
            }
        }
        private string _rejectReason;
    
        [DataMember]
        public string CirculNo
        {
            get { return _circulNo; }
            set
            {
                if (_circulNo != value)
                {
                    _circulNo = value;
                    OnPropertyChanged("CirculNo");
                }
            }
        }
        private string _circulNo;
    
        [DataMember]
        public Nullable<bool> IsVerified
        {
            get { return _isVerified; }
            set
            {
                if (_isVerified != value)
                {
                    _isVerified = value;
                    OnPropertyChanged("IsVerified");
                }
            }
        }
        private Nullable<bool> _isVerified;
    
        [DataMember]
        public Nullable<int> CommercialInvoiceId
        {
            get { return _commercialInvoiceId; }
            set
            {
                if (_commercialInvoiceId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommercialInvoiceId", _commercialInvoiceId);
                    if (!IsDeserializing)
                    {
                        if (CommercialInvoice != null && CommercialInvoice.Id != value)
                        {
                            CommercialInvoice = null;
                        }
                    }
                    _commercialInvoiceId = value;
                    OnPropertyChanged("CommercialInvoiceId");
                }
            }
        }
        private Nullable<int> _commercialInvoiceId;
    
        [DataMember]
        public Nullable<int> LCId
        {
            get { return _lCId; }
            set
            {
                if (_lCId != value)
                {
                    ChangeTracker.RecordOriginalValue("LCId", _lCId);
                    if (!IsDeserializing)
                    {
                        if (LetterOfCredit != null && LetterOfCredit.Id != value)
                        {
                            LetterOfCredit = null;
                        }
                    }
                    _lCId = value;
                    OnPropertyChanged("LCId");
                }
            }
        }
        private Nullable<int> _lCId;
    
        [DataMember]
        public Nullable<int> PaymentRequestId
        {
            get { return _paymentRequestId; }
            set
            {
                if (_paymentRequestId != value)
                {
                    ChangeTracker.RecordOriginalValue("PaymentRequestId", _paymentRequestId);
                    if (!IsDeserializing)
                    {
                        if (PaymentRequest != null && PaymentRequest.Id != value)
                        {
                            PaymentRequest = null;
                        }
                    }
                    _paymentRequestId = value;
                    OnPropertyChanged("PaymentRequestId");
                }
            }
        }
        private Nullable<int> _paymentRequestId;
    
        [DataMember]
        public Nullable<int> ActualDeliveryBPId
        {
            get { return _actualDeliveryBPId; }
            set
            {
                if (_actualDeliveryBPId != value)
                {
                    ChangeTracker.RecordOriginalValue("ActualDeliveryBPId", _actualDeliveryBPId);
                    if (!IsDeserializing)
                    {
                        if (BusinessPartner != null && BusinessPartner.Id != value)
                        {
                            BusinessPartner = null;
                        }
                    }
                    _actualDeliveryBPId = value;
                    OnPropertyChanged("ActualDeliveryBPId");
                }
            }
        }
        private Nullable<int> _actualDeliveryBPId;
    
        [DataMember]
        public Nullable<int> RelDeliveryId
        {
            get { return _relDeliveryId; }
            set
            {
                if (_relDeliveryId != value)
                {
                    ChangeTracker.RecordOriginalValue("RelDeliveryId", _relDeliveryId);
                    if (!IsDeserializing)
                    {
                        if (Delivery2_1 != null && Delivery2_1.Id != value)
                        {
                            Delivery2_1 = null;
                        }
                    }
                    _relDeliveryId = value;
                    OnPropertyChanged("RelDeliveryId");
                }
            }
        }
        private Nullable<int> _relDeliveryId;
    
        [DataMember]
        public Nullable<int> FDPId
        {
            get { return _fDPId; }
            set
            {
                if (_fDPId != value)
                {
                    ChangeTracker.RecordOriginalValue("FDPId", _fDPId);
                    if (!IsDeserializing)
                    {
                        if (ForeignDeliveryPool != null && ForeignDeliveryPool.Id != value)
                        {
                            ForeignDeliveryPool = null;
                        }
                    }
                    _fDPId = value;
                    OnPropertyChanged("FDPId");
                }
            }
        }
        private Nullable<int> _fDPId;
    
        [DataMember]
        public string BrandId
        {
            get { return _brandId; }
            set
            {
                if (_brandId != value)
                {
                    _brandId = value;
                    OnPropertyChanged("BrandId");
                }
            }
        }
        private string _brandId;
    
        [DataMember]
        public Nullable<bool> DeliveryStatus
        {
            get { return _deliveryStatus; }
            set
            {
                if (_deliveryStatus != value)
                {
                    _deliveryStatus = value;
                    OnPropertyChanged("DeliveryStatus");
                }
            }
        }
        private Nullable<bool> _deliveryStatus;
    
        [DataMember]
        public Nullable<int> WarrantId
        {
            get { return _warrantId; }
            set
            {
                if (_warrantId != value)
                {
                    ChangeTracker.RecordOriginalValue("WarrantId", _warrantId);
                    if (!IsDeserializing)
                    {
                        if (ConvertedTd != null && ConvertedTd.Id != value)
                        {
                            ConvertedTd = null;
                        }
                    }
                    _warrantId = value;
                    OnPropertyChanged("WarrantId");
                }
            }
        }
        private Nullable<int> _warrantId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BusinessPartner NotifyParty
        {
            get { return _notifyParty; }
            set
            {
                if (!ReferenceEquals(_notifyParty, value))
                {
                    var previousValue = _notifyParty;
                    _notifyParty = value;
                    FixupNotifyParty(previousValue);
                    OnNavigationPropertyChanged("NotifyParty");
                }
            }
        }
        private BusinessPartner _notifyParty;
    
        [DataMember]
        public BusinessPartner Shipper
        {
            get { return _shipper; }
            set
            {
                if (!ReferenceEquals(_shipper, value))
                {
                    var previousValue = _shipper;
                    _shipper = value;
                    FixupShipper(previousValue);
                    OnNavigationPropertyChanged("Shipper");
                }
            }
        }
        private BusinessPartner _shipper;
    
        [DataMember]
        public BusinessPartner ShippingParty
        {
            get { return _shippingParty; }
            set
            {
                if (!ReferenceEquals(_shippingParty, value))
                {
                    var previousValue = _shippingParty;
                    _shippingParty = value;
                    FixupShippingParty(previousValue);
                    OnNavigationPropertyChanged("ShippingParty");
                }
            }
        }
        private BusinessPartner _shippingParty;
    
        [DataMember]
        public BusinessPartner WarehouseProvider
        {
            get { return _warehouseProvider; }
            set
            {
                if (!ReferenceEquals(_warehouseProvider, value))
                {
                    var previousValue = _warehouseProvider;
                    _warehouseProvider = value;
                    FixupWarehouseProvider(previousValue);
                    OnNavigationPropertyChanged("WarehouseProvider");
                }
            }
        }
        private BusinessPartner _warehouseProvider;
    
        [DataMember]
        public Country DischargePlace
        {
            get { return _dischargePlace; }
            set
            {
                if (!ReferenceEquals(_dischargePlace, value))
                {
                    var previousValue = _dischargePlace;
                    _dischargePlace = value;
                    FixupDischargePlace(previousValue);
                    OnNavigationPropertyChanged("DischargePlace");
                }
            }
        }
        private Country _dischargePlace;
    
        [DataMember]
        public Country LoadingPlace
        {
            get { return _loadingPlace; }
            set
            {
                if (!ReferenceEquals(_loadingPlace, value))
                {
                    var previousValue = _loadingPlace;
                    _loadingPlace = value;
                    FixupLoadingPlace(previousValue);
                    OnNavigationPropertyChanged("LoadingPlace");
                }
            }
        }
        private Country _loadingPlace;
    
        [DataMember]
        public Port DischargePort
        {
            get { return _dischargePort; }
            set
            {
                if (!ReferenceEquals(_dischargePort, value))
                {
                    var previousValue = _dischargePort;
                    _dischargePort = value;
                    FixupDischargePort(previousValue);
                    OnNavigationPropertyChanged("DischargePort");
                }
            }
        }
        private Port _dischargePort;
    
        [DataMember]
        public Port LoadingPort
        {
            get { return _loadingPort; }
            set
            {
                if (!ReferenceEquals(_loadingPort, value))
                {
                    var previousValue = _loadingPort;
                    _loadingPort = value;
                    FixupLoadingPort(previousValue);
                    OnNavigationPropertyChanged("LoadingPort");
                }
            }
        }
        private Port _loadingPort;
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public Warehouse Warehouse
        {
            get { return _warehouse; }
            set
            {
                if (!ReferenceEquals(_warehouse, value))
                {
                    var previousValue = _warehouse;
                    _warehouse = value;
                    FixupWarehouse(previousValue);
                    OnNavigationPropertyChanged("Warehouse");
                }
            }
        }
        private Warehouse _warehouse;
    
        [DataMember]
        public TrackableCollection<DeliveryLine> DeliveryLines
        {
            get
            {
                if (_deliveryLines == null)
                {
                    _deliveryLines = new TrackableCollection<DeliveryLine>();
                    _deliveryLines.CollectionChanged += FixupDeliveryLines;
                }
                return _deliveryLines;
            }
            set
            {
                if (!ReferenceEquals(_deliveryLines, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deliveryLines != null)
                    {
                        _deliveryLines.CollectionChanged -= FixupDeliveryLines;
                    }
                    _deliveryLines = value;
                    if (_deliveryLines != null)
                    {
                        _deliveryLines.CollectionChanged += FixupDeliveryLines;
                    }
                    OnNavigationPropertyChanged("DeliveryLines");
                }
            }
        }
        private TrackableCollection<DeliveryLine> _deliveryLines;
    
        [DataMember]
        public Approval Approval
        {
            get { return _approval; }
            set
            {
                if (!ReferenceEquals(_approval, value))
                {
                    var previousValue = _approval;
                    _approval = value;
                    FixupApproval(previousValue);
                    OnNavigationPropertyChanged("Approval");
                }
            }
        }
        private Approval _approval;
    
        [DataMember]
        public Document Document
        {
            get { return _document; }
            set
            {
                if (!ReferenceEquals(_document, value))
                {
                    var previousValue = _document;
                    _document = value;
                    FixupDocument(previousValue);
                    OnNavigationPropertyChanged("Document");
                }
            }
        }
        private Document _document;
    
        [DataMember]
        public CommercialInvoice CommercialInvoice
        {
            get { return _commercialInvoice; }
            set
            {
                if (!ReferenceEquals(_commercialInvoice, value))
                {
                    var previousValue = _commercialInvoice;
                    _commercialInvoice = value;
                    FixupCommercialInvoice(previousValue);
                    OnNavigationPropertyChanged("CommercialInvoice");
                }
            }
        }
        private CommercialInvoice _commercialInvoice;
    
        [DataMember]
        public LetterOfCredit LetterOfCredit
        {
            get { return _letterOfCredit; }
            set
            {
                if (!ReferenceEquals(_letterOfCredit, value))
                {
                    var previousValue = _letterOfCredit;
                    _letterOfCredit = value;
                    FixupLetterOfCredit(previousValue);
                    OnNavigationPropertyChanged("LetterOfCredit");
                }
            }
        }
        private LetterOfCredit _letterOfCredit;
    
        [DataMember]
        public PaymentRequest PaymentRequest
        {
            get { return _paymentRequest; }
            set
            {
                if (!ReferenceEquals(_paymentRequest, value))
                {
                    var previousValue = _paymentRequest;
                    _paymentRequest = value;
                    FixupPaymentRequest(previousValue);
                    OnNavigationPropertyChanged("PaymentRequest");
                }
            }
        }
        private PaymentRequest _paymentRequest;
    
        [DataMember]
        public BusinessPartner BusinessPartner
        {
            get { return _businessPartner; }
            set
            {
                if (!ReferenceEquals(_businessPartner, value))
                {
                    var previousValue = _businessPartner;
                    _businessPartner = value;
                    FixupBusinessPartner(previousValue);
                    OnNavigationPropertyChanged("BusinessPartner");
                }
            }
        }
        private BusinessPartner _businessPartner;
    
        [DataMember]
        public TrackableCollection<Delivery> Delivery1_1
        {
            get
            {
                if (_delivery1_1 == null)
                {
                    _delivery1_1 = new TrackableCollection<Delivery>();
                    _delivery1_1.CollectionChanged += FixupDelivery1_1;
                }
                return _delivery1_1;
            }
            set
            {
                if (!ReferenceEquals(_delivery1_1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_delivery1_1 != null)
                    {
                        _delivery1_1.CollectionChanged -= FixupDelivery1_1;
                    }
                    _delivery1_1 = value;
                    if (_delivery1_1 != null)
                    {
                        _delivery1_1.CollectionChanged += FixupDelivery1_1;
                    }
                    OnNavigationPropertyChanged("Delivery1_1");
                }
            }
        }
        private TrackableCollection<Delivery> _delivery1_1;
    
        [DataMember]
        public Delivery Delivery2_1
        {
            get { return _delivery2_1; }
            set
            {
                if (!ReferenceEquals(_delivery2_1, value))
                {
                    var previousValue = _delivery2_1;
                    _delivery2_1 = value;
                    FixupDelivery2_1(previousValue);
                    OnNavigationPropertyChanged("Delivery2_1");
                }
            }
        }
        private Delivery _delivery2_1;
    
        [DataMember]
        public ForeignDeliveryPool ForeignDeliveryPool
        {
            get { return _foreignDeliveryPool; }
            set
            {
                if (!ReferenceEquals(_foreignDeliveryPool, value))
                {
                    var previousValue = _foreignDeliveryPool;
                    _foreignDeliveryPool = value;
                    FixupForeignDeliveryPool(previousValue);
                    OnNavigationPropertyChanged("ForeignDeliveryPool");
                }
            }
        }
        private ForeignDeliveryPool _foreignDeliveryPool;
    
        [DataMember]
        public TrackableCollection<Delivery> WRDelivery
        {
            get
            {
                if (_wRDelivery == null)
                {
                    _wRDelivery = new TrackableCollection<Delivery>();
                    _wRDelivery.CollectionChanged += FixupWRDelivery;
                }
                return _wRDelivery;
            }
            set
            {
                if (!ReferenceEquals(_wRDelivery, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_wRDelivery != null)
                    {
                        _wRDelivery.CollectionChanged -= FixupWRDelivery;
                    }
                    _wRDelivery = value;
                    if (_wRDelivery != null)
                    {
                        _wRDelivery.CollectionChanged += FixupWRDelivery;
                    }
                    OnNavigationPropertyChanged("WRDelivery");
                }
            }
        }
        private TrackableCollection<Delivery> _wRDelivery;
    
        [DataMember]
        public Delivery ConvertedTd
        {
            get { return _convertedTd; }
            set
            {
                if (!ReferenceEquals(_convertedTd, value))
                {
                    var previousValue = _convertedTd;
                    _convertedTd = value;
                    FixupConvertedTd(previousValue);
                    OnNavigationPropertyChanged("ConvertedTd");
                }
            }
        }
        private Delivery _convertedTd;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            NotifyParty = null;
            Shipper = null;
            ShippingParty = null;
            WarehouseProvider = null;
            DischargePlace = null;
            LoadingPlace = null;
            DischargePort = null;
            LoadingPort = null;
            Quota = null;
            Warehouse = null;
            DeliveryLines.Clear();
            Approval = null;
            Document = null;
            CommercialInvoice = null;
            LetterOfCredit = null;
            PaymentRequest = null;
            BusinessPartner = null;
            Delivery1_1.Clear();
            Delivery2_1 = null;
            ForeignDeliveryPool = null;
            WRDelivery.Clear();
            ConvertedTd = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupNotifyParty(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (NotifyParty != null)
            {
                if (!NotifyParty.Deliveries.Contains(this))
                {
                    NotifyParty.Deliveries.Add(this);
                }
    
                NotifyPartyId = NotifyParty.Id;
            }
            else if (!skipKeys)
            {
                NotifyPartyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NotifyParty")
                    && (ChangeTracker.OriginalValues["NotifyParty"] == NotifyParty))
                {
                    ChangeTracker.OriginalValues.Remove("NotifyParty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NotifyParty", previousValue);
                }
                if (NotifyParty != null && !NotifyParty.ChangeTracker.ChangeTrackingEnabled)
                {
                    NotifyParty.StartTracking();
                }
            }
        }
    
        private void FixupShipper(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries2.Contains(this))
            {
                previousValue.Deliveries2.Remove(this);
            }
    
            if (Shipper != null)
            {
                if (!Shipper.Deliveries2.Contains(this))
                {
                    Shipper.Deliveries2.Add(this);
                }
    
                ShipperId = Shipper.Id;
            }
            else if (!skipKeys)
            {
                ShipperId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Shipper")
                    && (ChangeTracker.OriginalValues["Shipper"] == Shipper))
                {
                    ChangeTracker.OriginalValues.Remove("Shipper");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Shipper", previousValue);
                }
                if (Shipper != null && !Shipper.ChangeTracker.ChangeTrackingEnabled)
                {
                    Shipper.StartTracking();
                }
            }
        }
    
        private void FixupShippingParty(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries3.Contains(this))
            {
                previousValue.Deliveries3.Remove(this);
            }
    
            if (ShippingParty != null)
            {
                if (!ShippingParty.Deliveries3.Contains(this))
                {
                    ShippingParty.Deliveries3.Add(this);
                }
    
                ShippingPartyId = ShippingParty.Id;
            }
            else if (!skipKeys)
            {
                ShippingPartyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ShippingParty")
                    && (ChangeTracker.OriginalValues["ShippingParty"] == ShippingParty))
                {
                    ChangeTracker.OriginalValues.Remove("ShippingParty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ShippingParty", previousValue);
                }
                if (ShippingParty != null && !ShippingParty.ChangeTracker.ChangeTrackingEnabled)
                {
                    ShippingParty.StartTracking();
                }
            }
        }
    
        private void FixupWarehouseProvider(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries4.Contains(this))
            {
                previousValue.Deliveries4.Remove(this);
            }
    
            if (WarehouseProvider != null)
            {
                if (!WarehouseProvider.Deliveries4.Contains(this))
                {
                    WarehouseProvider.Deliveries4.Add(this);
                }
    
                WarehouseProviderId = WarehouseProvider.Id;
            }
            else if (!skipKeys)
            {
                WarehouseProviderId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WarehouseProvider")
                    && (ChangeTracker.OriginalValues["WarehouseProvider"] == WarehouseProvider))
                {
                    ChangeTracker.OriginalValues.Remove("WarehouseProvider");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WarehouseProvider", previousValue);
                }
                if (WarehouseProvider != null && !WarehouseProvider.ChangeTracker.ChangeTrackingEnabled)
                {
                    WarehouseProvider.StartTracking();
                }
            }
        }
    
        private void FixupDischargePlace(Country previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (DischargePlace != null)
            {
                if (!DischargePlace.Deliveries.Contains(this))
                {
                    DischargePlace.Deliveries.Add(this);
                }
    
                DischargePlaceId = DischargePlace.Id;
            }
            else if (!skipKeys)
            {
                DischargePlaceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DischargePlace")
                    && (ChangeTracker.OriginalValues["DischargePlace"] == DischargePlace))
                {
                    ChangeTracker.OriginalValues.Remove("DischargePlace");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DischargePlace", previousValue);
                }
                if (DischargePlace != null && !DischargePlace.ChangeTracker.ChangeTrackingEnabled)
                {
                    DischargePlace.StartTracking();
                }
            }
        }
    
        private void FixupLoadingPlace(Country previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries1.Contains(this))
            {
                previousValue.Deliveries1.Remove(this);
            }
    
            if (LoadingPlace != null)
            {
                if (!LoadingPlace.Deliveries1.Contains(this))
                {
                    LoadingPlace.Deliveries1.Add(this);
                }
    
                LoadingPlaceId = LoadingPlace.Id;
            }
            else if (!skipKeys)
            {
                LoadingPlaceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LoadingPlace")
                    && (ChangeTracker.OriginalValues["LoadingPlace"] == LoadingPlace))
                {
                    ChangeTracker.OriginalValues.Remove("LoadingPlace");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LoadingPlace", previousValue);
                }
                if (LoadingPlace != null && !LoadingPlace.ChangeTracker.ChangeTrackingEnabled)
                {
                    LoadingPlace.StartTracking();
                }
            }
        }
    
        private void FixupDischargePort(Port previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (DischargePort != null)
            {
                if (!DischargePort.Deliveries.Contains(this))
                {
                    DischargePort.Deliveries.Add(this);
                }
    
                DischargePortId = DischargePort.Id;
            }
            else if (!skipKeys)
            {
                DischargePortId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DischargePort")
                    && (ChangeTracker.OriginalValues["DischargePort"] == DischargePort))
                {
                    ChangeTracker.OriginalValues.Remove("DischargePort");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DischargePort", previousValue);
                }
                if (DischargePort != null && !DischargePort.ChangeTracker.ChangeTrackingEnabled)
                {
                    DischargePort.StartTracking();
                }
            }
        }
    
        private void FixupLoadingPort(Port previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries1.Contains(this))
            {
                previousValue.Deliveries1.Remove(this);
            }
    
            if (LoadingPort != null)
            {
                if (!LoadingPort.Deliveries1.Contains(this))
                {
                    LoadingPort.Deliveries1.Add(this);
                }
    
                LoadingPortId = LoadingPort.Id;
            }
            else if (!skipKeys)
            {
                LoadingPortId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LoadingPort")
                    && (ChangeTracker.OriginalValues["LoadingPort"] == LoadingPort))
                {
                    ChangeTracker.OriginalValues.Remove("LoadingPort");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LoadingPort", previousValue);
                }
                if (LoadingPort != null && !LoadingPort.ChangeTracker.ChangeTrackingEnabled)
                {
                    LoadingPort.StartTracking();
                }
            }
        }
    
        private void FixupQuota(Quota previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.Deliveries.Contains(this))
                {
                    Quota.Deliveries.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupWarehouse(Warehouse previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (Warehouse != null)
            {
                if (!Warehouse.Deliveries.Contains(this))
                {
                    Warehouse.Deliveries.Add(this);
                }
    
                WarehouseId = Warehouse.Id;
            }
            else if (!skipKeys)
            {
                WarehouseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Warehouse")
                    && (ChangeTracker.OriginalValues["Warehouse"] == Warehouse))
                {
                    ChangeTracker.OriginalValues.Remove("Warehouse");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Warehouse", previousValue);
                }
                if (Warehouse != null && !Warehouse.ChangeTracker.ChangeTrackingEnabled)
                {
                    Warehouse.StartTracking();
                }
            }
        }
    
        private void FixupApproval(Approval previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (Approval != null)
            {
                if (!Approval.Deliveries.Contains(this))
                {
                    Approval.Deliveries.Add(this);
                }
    
                ApprovalId = Approval.Id;
            }
            else if (!skipKeys)
            {
                ApprovalId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Approval")
                    && (ChangeTracker.OriginalValues["Approval"] == Approval))
                {
                    ChangeTracker.OriginalValues.Remove("Approval");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Approval", previousValue);
                }
                if (Approval != null && !Approval.ChangeTracker.ChangeTrackingEnabled)
                {
                    Approval.StartTracking();
                }
            }
        }
    
        private void FixupDocument(Document previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (Document != null)
            {
                if (!Document.Deliveries.Contains(this))
                {
                    Document.Deliveries.Add(this);
                }
    
                DocumentId = Document.Id;
            }
            else if (!skipKeys)
            {
                DocumentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Document")
                    && (ChangeTracker.OriginalValues["Document"] == Document))
                {
                    ChangeTracker.OriginalValues.Remove("Document");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Document", previousValue);
                }
                if (Document != null && !Document.ChangeTracker.ChangeTrackingEnabled)
                {
                    Document.StartTracking();
                }
            }
        }
    
        private void FixupCommercialInvoice(CommercialInvoice previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (CommercialInvoice != null)
            {
                if (!CommercialInvoice.Deliveries.Contains(this))
                {
                    CommercialInvoice.Deliveries.Add(this);
                }
    
                CommercialInvoiceId = CommercialInvoice.Id;
            }
            else if (!skipKeys)
            {
                CommercialInvoiceId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CommercialInvoice")
                    && (ChangeTracker.OriginalValues["CommercialInvoice"] == CommercialInvoice))
                {
                    ChangeTracker.OriginalValues.Remove("CommercialInvoice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CommercialInvoice", previousValue);
                }
                if (CommercialInvoice != null && !CommercialInvoice.ChangeTracker.ChangeTrackingEnabled)
                {
                    CommercialInvoice.StartTracking();
                }
            }
        }
    
        private void FixupLetterOfCredit(LetterOfCredit previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (LetterOfCredit != null)
            {
                if (!LetterOfCredit.Deliveries.Contains(this))
                {
                    LetterOfCredit.Deliveries.Add(this);
                }
    
                LCId = LetterOfCredit.Id;
            }
            else if (!skipKeys)
            {
                LCId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LetterOfCredit")
                    && (ChangeTracker.OriginalValues["LetterOfCredit"] == LetterOfCredit))
                {
                    ChangeTracker.OriginalValues.Remove("LetterOfCredit");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LetterOfCredit", previousValue);
                }
                if (LetterOfCredit != null && !LetterOfCredit.ChangeTracker.ChangeTrackingEnabled)
                {
                    LetterOfCredit.StartTracking();
                }
            }
        }
    
        private void FixupPaymentRequest(PaymentRequest previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (PaymentRequest != null)
            {
                if (!PaymentRequest.Deliveries.Contains(this))
                {
                    PaymentRequest.Deliveries.Add(this);
                }
    
                PaymentRequestId = PaymentRequest.Id;
            }
            else if (!skipKeys)
            {
                PaymentRequestId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PaymentRequest")
                    && (ChangeTracker.OriginalValues["PaymentRequest"] == PaymentRequest))
                {
                    ChangeTracker.OriginalValues.Remove("PaymentRequest");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PaymentRequest", previousValue);
                }
                if (PaymentRequest != null && !PaymentRequest.ChangeTracker.ChangeTrackingEnabled)
                {
                    PaymentRequest.StartTracking();
                }
            }
        }
    
        private void FixupBusinessPartner(BusinessPartner previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries_1.Contains(this))
            {
                previousValue.Deliveries_1.Remove(this);
            }
    
            if (BusinessPartner != null)
            {
                if (!BusinessPartner.Deliveries_1.Contains(this))
                {
                    BusinessPartner.Deliveries_1.Add(this);
                }
    
                ActualDeliveryBPId = BusinessPartner.Id;
            }
            else if (!skipKeys)
            {
                ActualDeliveryBPId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BusinessPartner")
                    && (ChangeTracker.OriginalValues["BusinessPartner"] == BusinessPartner))
                {
                    ChangeTracker.OriginalValues.Remove("BusinessPartner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BusinessPartner", previousValue);
                }
                if (BusinessPartner != null && !BusinessPartner.ChangeTracker.ChangeTrackingEnabled)
                {
                    BusinessPartner.StartTracking();
                }
            }
        }
    
        private void FixupDelivery2_1(Delivery previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Delivery1_1.Contains(this))
            {
                previousValue.Delivery1_1.Remove(this);
            }
    
            if (Delivery2_1 != null)
            {
                if (!Delivery2_1.Delivery1_1.Contains(this))
                {
                    Delivery2_1.Delivery1_1.Add(this);
                }
    
                RelDeliveryId = Delivery2_1.Id;
            }
            else if (!skipKeys)
            {
                RelDeliveryId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Delivery2_1")
                    && (ChangeTracker.OriginalValues["Delivery2_1"] == Delivery2_1))
                {
                    ChangeTracker.OriginalValues.Remove("Delivery2_1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Delivery2_1", previousValue);
                }
                if (Delivery2_1 != null && !Delivery2_1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Delivery2_1.StartTracking();
                }
            }
        }
    
        private void FixupForeignDeliveryPool(ForeignDeliveryPool previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Deliveries.Contains(this))
            {
                previousValue.Deliveries.Remove(this);
            }
    
            if (ForeignDeliveryPool != null)
            {
                if (!ForeignDeliveryPool.Deliveries.Contains(this))
                {
                    ForeignDeliveryPool.Deliveries.Add(this);
                }
    
                FDPId = ForeignDeliveryPool.Id;
            }
            else if (!skipKeys)
            {
                FDPId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ForeignDeliveryPool")
                    && (ChangeTracker.OriginalValues["ForeignDeliveryPool"] == ForeignDeliveryPool))
                {
                    ChangeTracker.OriginalValues.Remove("ForeignDeliveryPool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ForeignDeliveryPool", previousValue);
                }
                if (ForeignDeliveryPool != null && !ForeignDeliveryPool.ChangeTracker.ChangeTrackingEnabled)
                {
                    ForeignDeliveryPool.StartTracking();
                }
            }
        }
    
        private void FixupConvertedTd(Delivery previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WRDelivery.Contains(this))
            {
                previousValue.WRDelivery.Remove(this);
            }
    
            if (ConvertedTd != null)
            {
                if (!ConvertedTd.WRDelivery.Contains(this))
                {
                    ConvertedTd.WRDelivery.Add(this);
                }
    
                WarrantId = ConvertedTd.Id;
            }
            else if (!skipKeys)
            {
                WarrantId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ConvertedTd")
                    && (ChangeTracker.OriginalValues["ConvertedTd"] == ConvertedTd))
                {
                    ChangeTracker.OriginalValues.Remove("ConvertedTd");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ConvertedTd", previousValue);
                }
                if (ConvertedTd != null && !ConvertedTd.ChangeTracker.ChangeTrackingEnabled)
                {
                    ConvertedTd.StartTracking();
                }
            }
        }
    
        private void FixupDeliveryLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DeliveryLine item in e.NewItems)
                {
                    item.Delivery = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DeliveryLines", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Delivery, this))
                    {
                        item.Delivery = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DeliveryLines", item);
                    }
                }
            }
        }
    
        private void FixupDelivery1_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.Delivery2_1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Delivery1_1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.Delivery2_1, this))
                    {
                        item.Delivery2_1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Delivery1_1", item);
                    }
                }
            }
        }
    
        private void FixupWRDelivery(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Delivery item in e.NewItems)
                {
                    item.ConvertedTd = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("WRDelivery", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Delivery item in e.OldItems)
                {
                    if (ReferenceEquals(item.ConvertedTd, this))
                    {
                        item.ConvertedTd = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("WRDelivery", item);
                    }
                }
            }
        }

        #endregion

    }
}
