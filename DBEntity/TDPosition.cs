//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Commodity))]
    [KnownType(typeof(SHFE))]
    [KnownType(typeof(TDCapitalDetail))]
    [KnownType(typeof(HedgeLineTDPosition))]
    public partial class TDPosition: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public string TradeIndex
        {
            get { return _tradeIndex; }
            set
            {
                if (_tradeIndex != value)
                {
                    _tradeIndex = value;
                    OnPropertyChanged("TradeIndex");
                }
            }
        }
        private string _tradeIndex;
    
        [DataMember]
        public Nullable<int> CommodityId
        {
            get { return _commodityId; }
            set
            {
                if (_commodityId != value)
                {
                    ChangeTracker.RecordOriginalValue("CommodityId", _commodityId);
                    if (!IsDeserializing)
                    {
                        if (Commodity != null && Commodity.Id != value)
                        {
                            Commodity = null;
                        }
                    }
                    _commodityId = value;
                    OnPropertyChanged("CommodityId");
                }
            }
        }
        private Nullable<int> _commodityId;
    
        [DataMember]
        public Nullable<int> SHFEId
        {
            get { return _sHFEId; }
            set
            {
                if (_sHFEId != value)
                {
                    ChangeTracker.RecordOriginalValue("SHFEId", _sHFEId);
                    if (!IsDeserializing)
                    {
                        if (SHFE != null && SHFE.Id != value)
                        {
                            SHFE = null;
                        }
                    }
                    _sHFEId = value;
                    OnPropertyChanged("SHFEId");
                }
            }
        }
        private Nullable<int> _sHFEId;
    
        [DataMember]
        public Nullable<int> PositionDirection
        {
            get { return _positionDirection; }
            set
            {
                if (_positionDirection != value)
                {
                    _positionDirection = value;
                    OnPropertyChanged("PositionDirection");
                }
            }
        }
        private Nullable<int> _positionDirection;
    
        [DataMember]
        public Nullable<int> OpenClose
        {
            get { return _openClose; }
            set
            {
                if (_openClose != value)
                {
                    _openClose = value;
                    OnPropertyChanged("OpenClose");
                }
            }
        }
        private Nullable<int> _openClose;
    
        [DataMember]
        public Nullable<decimal> LotQuantity
        {
            get { return _lotQuantity; }
            set
            {
                if (_lotQuantity != value)
                {
                    _lotQuantity = value;
                    OnPropertyChanged("LotQuantity");
                }
            }
        }
        private Nullable<decimal> _lotQuantity;
    
        [DataMember]
        public Nullable<decimal> Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private Nullable<decimal> _price;
    
        [DataMember]
        public Nullable<decimal> Commission
        {
            get { return _commission; }
            set
            {
                if (_commission != value)
                {
                    _commission = value;
                    OnPropertyChanged("Commission");
                }
            }
        }
        private Nullable<decimal> _commission;
    
        [DataMember]
        public Nullable<decimal> LotWeight
        {
            get { return _lotWeight; }
            set
            {
                if (_lotWeight != value)
                {
                    _lotWeight = value;
                    OnPropertyChanged("LotWeight");
                }
            }
        }
        private Nullable<decimal> _lotWeight;
    
        [DataMember]
        public Nullable<decimal> PNL
        {
            get { return _pNL; }
            set
            {
                if (_pNL != value)
                {
                    _pNL = value;
                    OnPropertyChanged("PNL");
                }
            }
        }
        private Nullable<decimal> _pNL;
    
        [DataMember]
        public Nullable<int> TDCapitalDetailsId
        {
            get { return _tDCapitalDetailsId; }
            set
            {
                if (_tDCapitalDetailsId != value)
                {
                    ChangeTracker.RecordOriginalValue("TDCapitalDetailsId", _tDCapitalDetailsId);
                    if (!IsDeserializing)
                    {
                        if (TDCapitalDetail != null && TDCapitalDetail.Id != value)
                        {
                            TDCapitalDetail = null;
                        }
                    }
                    _tDCapitalDetailsId = value;
                    OnPropertyChanged("TDCapitalDetailsId");
                }
            }
        }
        private Nullable<int> _tDCapitalDetailsId;
    
        [DataMember]
        public Nullable<decimal> HedgedLotQuantity
        {
            get { return _hedgedLotQuantity; }
            set
            {
                if (_hedgedLotQuantity != value)
                {
                    _hedgedLotQuantity = value;
                    OnPropertyChanged("HedgedLotQuantity");
                }
            }
        }
        private Nullable<decimal> _hedgedLotQuantity;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Commodity Commodity
        {
            get { return _commodity; }
            set
            {
                if (!ReferenceEquals(_commodity, value))
                {
                    var previousValue = _commodity;
                    _commodity = value;
                    FixupCommodity(previousValue);
                    OnNavigationPropertyChanged("Commodity");
                }
            }
        }
        private Commodity _commodity;
    
        [DataMember]
        public SHFE SHFE
        {
            get { return _sHFE; }
            set
            {
                if (!ReferenceEquals(_sHFE, value))
                {
                    var previousValue = _sHFE;
                    _sHFE = value;
                    FixupSHFE(previousValue);
                    OnNavigationPropertyChanged("SHFE");
                }
            }
        }
        private SHFE _sHFE;
    
        [DataMember]
        public TDCapitalDetail TDCapitalDetail
        {
            get { return _tDCapitalDetail; }
            set
            {
                if (!ReferenceEquals(_tDCapitalDetail, value))
                {
                    var previousValue = _tDCapitalDetail;
                    _tDCapitalDetail = value;
                    FixupTDCapitalDetail(previousValue);
                    OnNavigationPropertyChanged("TDCapitalDetail");
                }
            }
        }
        private TDCapitalDetail _tDCapitalDetail;
    
        [DataMember]
        public TrackableCollection<HedgeLineTDPosition> HedgeLineTDPositions
        {
            get
            {
                if (_hedgeLineTDPositions == null)
                {
                    _hedgeLineTDPositions = new TrackableCollection<HedgeLineTDPosition>();
                    _hedgeLineTDPositions.CollectionChanged += FixupHedgeLineTDPositions;
                }
                return _hedgeLineTDPositions;
            }
            set
            {
                if (!ReferenceEquals(_hedgeLineTDPositions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hedgeLineTDPositions != null)
                    {
                        _hedgeLineTDPositions.CollectionChanged -= FixupHedgeLineTDPositions;
                    }
                    _hedgeLineTDPositions = value;
                    if (_hedgeLineTDPositions != null)
                    {
                        _hedgeLineTDPositions.CollectionChanged += FixupHedgeLineTDPositions;
                    }
                    OnNavigationPropertyChanged("HedgeLineTDPositions");
                }
            }
        }
        private TrackableCollection<HedgeLineTDPosition> _hedgeLineTDPositions;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Commodity = null;
            SHFE = null;
            TDCapitalDetail = null;
            HedgeLineTDPositions.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupCommodity(Commodity previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TDPositions.Contains(this))
            {
                previousValue.TDPositions.Remove(this);
            }
    
            if (Commodity != null)
            {
                if (!Commodity.TDPositions.Contains(this))
                {
                    Commodity.TDPositions.Add(this);
                }
    
                CommodityId = Commodity.Id;
            }
            else if (!skipKeys)
            {
                CommodityId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Commodity")
                    && (ChangeTracker.OriginalValues["Commodity"] == Commodity))
                {
                    ChangeTracker.OriginalValues.Remove("Commodity");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Commodity", previousValue);
                }
                if (Commodity != null && !Commodity.ChangeTracker.ChangeTrackingEnabled)
                {
                    Commodity.StartTracking();
                }
            }
        }
    
        private void FixupSHFE(SHFE previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TDPositions.Contains(this))
            {
                previousValue.TDPositions.Remove(this);
            }
    
            if (SHFE != null)
            {
                if (!SHFE.TDPositions.Contains(this))
                {
                    SHFE.TDPositions.Add(this);
                }
    
                SHFEId = SHFE.Id;
            }
            else if (!skipKeys)
            {
                SHFEId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SHFE")
                    && (ChangeTracker.OriginalValues["SHFE"] == SHFE))
                {
                    ChangeTracker.OriginalValues.Remove("SHFE");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SHFE", previousValue);
                }
                if (SHFE != null && !SHFE.ChangeTracker.ChangeTrackingEnabled)
                {
                    SHFE.StartTracking();
                }
            }
        }
    
        private void FixupTDCapitalDetail(TDCapitalDetail previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TDPositions.Contains(this))
            {
                previousValue.TDPositions.Remove(this);
            }
    
            if (TDCapitalDetail != null)
            {
                if (!TDCapitalDetail.TDPositions.Contains(this))
                {
                    TDCapitalDetail.TDPositions.Add(this);
                }
    
                TDCapitalDetailsId = TDCapitalDetail.Id;
            }
            else if (!skipKeys)
            {
                TDCapitalDetailsId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TDCapitalDetail")
                    && (ChangeTracker.OriginalValues["TDCapitalDetail"] == TDCapitalDetail))
                {
                    ChangeTracker.OriginalValues.Remove("TDCapitalDetail");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TDCapitalDetail", previousValue);
                }
                if (TDCapitalDetail != null && !TDCapitalDetail.ChangeTracker.ChangeTrackingEnabled)
                {
                    TDCapitalDetail.StartTracking();
                }
            }
        }
    
        private void FixupHedgeLineTDPositions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HedgeLineTDPosition item in e.NewItems)
                {
                    item.TDPosition = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HedgeLineTDPositions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HedgeLineTDPosition item in e.OldItems)
                {
                    if (ReferenceEquals(item.TDPosition, this))
                    {
                        item.TDPosition = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HedgeLineTDPositions", item);
                    }
                }
            }
        }

        #endregion

    }
}
