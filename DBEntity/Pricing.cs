//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;


namespace DBEntity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Quota))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(Unpricing))]
    [KnownType(typeof(Pricing))]
    public partial class Pricing: IObjectWithChangeTracker, INotifyPropertyChanged, IEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("Ver");
                }
            }
        }
        private byte[] _ver;
    
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private bool _isDeleted;
    
        [DataMember]
        public Nullable<System.DateTime> Created
        {
            get { return _created; }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private Nullable<System.DateTime> _created;
    
        [DataMember]
        public Nullable<System.DateTime> Updated
        {
            get { return _updated; }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private Nullable<System.DateTime> _updated;
    
        [DataMember]
        public Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private Nullable<int> _createdBy;
    
        [DataMember]
        public Nullable<int> UpdatedBy
        {
            get { return _updatedBy; }
            set
            {
                if (_updatedBy != value)
                {
                    _updatedBy = value;
                    OnPropertyChanged("UpdatedBy");
                }
            }
        }
        private Nullable<int> _updatedBy;
    
        [DataMember]
        public int QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    ChangeTracker.RecordOriginalValue("QuotaId", _quotaId);
                    if (!IsDeserializing)
                    {
                        if (Quota != null && Quota.Id != value)
                        {
                            Quota = null;
                        }
                    }
                    _quotaId = value;
                    OnPropertyChanged("QuotaId");
                }
            }
        }
        private int _quotaId;
    
        [DataMember]
        public Nullable<decimal> PricingQuantity
        {
            get { return _pricingQuantity; }
            set
            {
                if (_pricingQuantity != value)
                {
                    _pricingQuantity = value;
                    OnPropertyChanged("PricingQuantity");
                }
            }
        }
        private Nullable<decimal> _pricingQuantity;
    
        [DataMember]
        public Nullable<System.DateTime> PricingDate
        {
            get { return _pricingDate; }
            set
            {
                if (_pricingDate != value)
                {
                    _pricingDate = value;
                    OnPropertyChanged("PricingDate");
                }
            }
        }
        private Nullable<System.DateTime> _pricingDate;
    
        [DataMember]
        public Nullable<System.DateTime> StartPricingDate
        {
            get { return _startPricingDate; }
            set
            {
                if (_startPricingDate != value)
                {
                    _startPricingDate = value;
                    OnPropertyChanged("StartPricingDate");
                }
            }
        }
        private Nullable<System.DateTime> _startPricingDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndPricingDate
        {
            get { return _endPricingDate; }
            set
            {
                if (_endPricingDate != value)
                {
                    _endPricingDate = value;
                    OnPropertyChanged("EndPricingDate");
                }
            }
        }
        private Nullable<System.DateTime> _endPricingDate;
    
        [DataMember]
        public Nullable<decimal> DeferFee
        {
            get { return _deferFee; }
            set
            {
                if (_deferFee != value)
                {
                    _deferFee = value;
                    OnPropertyChanged("DeferFee");
                }
            }
        }
        private Nullable<decimal> _deferFee;
    
        [DataMember]
        public Nullable<decimal> AdjustQPFee
        {
            get { return _adjustQPFee; }
            set
            {
                if (_adjustQPFee != value)
                {
                    _adjustQPFee = value;
                    OnPropertyChanged("AdjustQPFee");
                }
            }
        }
        private Nullable<decimal> _adjustQPFee;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public Nullable<decimal> BasicPrice
        {
            get { return _basicPrice; }
            set
            {
                if (_basicPrice != value)
                {
                    _basicPrice = value;
                    OnPropertyChanged("BasicPrice");
                }
            }
        }
        private Nullable<decimal> _basicPrice;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<decimal> FinalPrice
        {
            get { return _finalPrice; }
            set
            {
                if (_finalPrice != value)
                {
                    _finalPrice = value;
                    OnPropertyChanged("FinalPrice");
                }
            }
        }
        private Nullable<decimal> _finalPrice;
    
        [DataMember]
        public Nullable<int> PricingBasis
        {
            get { return _pricingBasis; }
            set
            {
                if (_pricingBasis != value)
                {
                    _pricingBasis = value;
                    OnPropertyChanged("PricingBasis");
                }
            }
        }
        private Nullable<int> _pricingBasis;
    
        [DataMember]
        public Nullable<int> CurrencyId
        {
            get { return _currencyId; }
            set
            {
                if (_currencyId != value)
                {
                    ChangeTracker.RecordOriginalValue("CurrencyId", _currencyId);
                    if (!IsDeserializing)
                    {
                        if (Currency != null && Currency.Id != value)
                        {
                            Currency = null;
                        }
                    }
                    _currencyId = value;
                    OnPropertyChanged("CurrencyId");
                }
            }
        }
        private Nullable<int> _currencyId;
    
        [DataMember]
        public Nullable<int> UnpricingId
        {
            get { return _unpricingId; }
            set
            {
                if (_unpricingId != value)
                {
                    ChangeTracker.RecordOriginalValue("UnpricingId", _unpricingId);
                    if (!IsDeserializing)
                    {
                        if (Unpricing != null && Unpricing.Id != value)
                        {
                            Unpricing = null;
                        }
                    }
                    _unpricingId = value;
                    OnPropertyChanged("UnpricingId");
                }
            }
        }
        private Nullable<int> _unpricingId;
    
        [DataMember]
        public Nullable<decimal> Premium
        {
            get { return _premium; }
            set
            {
                if (_premium != value)
                {
                    _premium = value;
                    OnPropertyChanged("Premium");
                }
            }
        }
        private Nullable<decimal> _premium;
    
        [DataMember]
        public Nullable<decimal> ExchangeRate
        {
            get { return _exchangeRate; }
            set
            {
                if (_exchangeRate != value)
                {
                    _exchangeRate = value;
                    OnPropertyChanged("ExchangeRate");
                }
            }
        }
        private Nullable<decimal> _exchangeRate;
    
        [DataMember]
        public Nullable<System.DateTime> PriceDate
        {
            get { return _priceDate; }
            set
            {
                if (_priceDate != value)
                {
                    _priceDate = value;
                    OnPropertyChanged("PriceDate");
                }
            }
        }
        private Nullable<System.DateTime> _priceDate;
    
        [DataMember]
        public Nullable<int> RelPricingId
        {
            get { return _relPricingId; }
            set
            {
                if (_relPricingId != value)
                {
                    ChangeTracker.RecordOriginalValue("RelPricingId", _relPricingId);
                    if (!IsDeserializing)
                    {
                        if (BasePricing != null && BasePricing.Id != value)
                        {
                            BasePricing = null;
                        }
                    }
                    _relPricingId = value;
                    OnPropertyChanged("RelPricingId");
                }
            }
        }
        private Nullable<int> _relPricingId;
    
        [DataMember]
        public bool IsAutoGenerated
        {
            get { return _isAutoGenerated; }
            set
            {
                if (_isAutoGenerated != value)
                {
                    _isAutoGenerated = value;
                    OnPropertyChanged("IsAutoGenerated");
                }
            }
        }
        private bool _isAutoGenerated;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Quota Quota
        {
            get { return _quota; }
            set
            {
                if (!ReferenceEquals(_quota, value))
                {
                    var previousValue = _quota;
                    _quota = value;
                    FixupQuota(previousValue);
                    OnNavigationPropertyChanged("Quota");
                }
            }
        }
        private Quota _quota;
    
        [DataMember]
        public Currency Currency
        {
            get { return _currency; }
            set
            {
                if (!ReferenceEquals(_currency, value))
                {
                    var previousValue = _currency;
                    _currency = value;
                    FixupCurrency(previousValue);
                    OnNavigationPropertyChanged("Currency");
                }
            }
        }
        private Currency _currency;
    
        [DataMember]
        public Unpricing Unpricing
        {
            get { return _unpricing; }
            set
            {
                if (!ReferenceEquals(_unpricing, value))
                {
                    var previousValue = _unpricing;
                    _unpricing = value;
                    FixupUnpricing(previousValue);
                    OnNavigationPropertyChanged("Unpricing");
                }
            }
        }
        private Unpricing _unpricing;
    
        [DataMember]
        public TrackableCollection<Pricing> RelatedPricings
        {
            get
            {
                if (_relatedPricings == null)
                {
                    _relatedPricings = new TrackableCollection<Pricing>();
                    _relatedPricings.CollectionChanged += FixupRelatedPricings;
                }
                return _relatedPricings;
            }
            set
            {
                if (!ReferenceEquals(_relatedPricings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_relatedPricings != null)
                    {
                        _relatedPricings.CollectionChanged -= FixupRelatedPricings;
                    }
                    _relatedPricings = value;
                    if (_relatedPricings != null)
                    {
                        _relatedPricings.CollectionChanged += FixupRelatedPricings;
                    }
                    OnNavigationPropertyChanged("RelatedPricings");
                }
            }
        }
        private TrackableCollection<Pricing> _relatedPricings;
    
        [DataMember]
        public Pricing BasePricing
        {
            get { return _basePricing; }
            set
            {
                if (!ReferenceEquals(_basePricing, value))
                {
                    var previousValue = _basePricing;
                    _basePricing = value;
                    FixupBasePricing(previousValue);
                    OnNavigationPropertyChanged("BasePricing");
                }
            }
        }
        private Pricing _basePricing;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
    	static ICollection<string> eagerLoadProperties = new List<string>() { };
    	public ICollection<string> EagerLoadProperties
    	{
    		get { return eagerLoadProperties; }
    	}
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Quota = null;
            Currency = null;
            Unpricing = null;
            RelatedPricings.Clear();
            BasePricing = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupQuota(Quota previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pricings.Contains(this))
            {
                previousValue.Pricings.Remove(this);
            }
    
            if (Quota != null)
            {
                if (!Quota.Pricings.Contains(this))
                {
                    Quota.Pricings.Add(this);
                }
    
                QuotaId = Quota.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Quota")
                    && (ChangeTracker.OriginalValues["Quota"] == Quota))
                {
                    ChangeTracker.OriginalValues.Remove("Quota");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Quota", previousValue);
                }
                if (Quota != null && !Quota.ChangeTracker.ChangeTrackingEnabled)
                {
                    Quota.StartTracking();
                }
            }
        }
    
        private void FixupCurrency(Currency previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pricings.Contains(this))
            {
                previousValue.Pricings.Remove(this);
            }
    
            if (Currency != null)
            {
                if (!Currency.Pricings.Contains(this))
                {
                    Currency.Pricings.Add(this);
                }
    
                CurrencyId = Currency.Id;
            }
            else if (!skipKeys)
            {
                CurrencyId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Currency")
                    && (ChangeTracker.OriginalValues["Currency"] == Currency))
                {
                    ChangeTracker.OriginalValues.Remove("Currency");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Currency", previousValue);
                }
                if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
                {
                    Currency.StartTracking();
                }
            }
        }
    
        private void FixupUnpricing(Unpricing previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pricings.Contains(this))
            {
                previousValue.Pricings.Remove(this);
            }
    
            if (Unpricing != null)
            {
                if (!Unpricing.Pricings.Contains(this))
                {
                    Unpricing.Pricings.Add(this);
                }
    
                UnpricingId = Unpricing.Id;
            }
            else if (!skipKeys)
            {
                UnpricingId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Unpricing")
                    && (ChangeTracker.OriginalValues["Unpricing"] == Unpricing))
                {
                    ChangeTracker.OriginalValues.Remove("Unpricing");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Unpricing", previousValue);
                }
                if (Unpricing != null && !Unpricing.ChangeTracker.ChangeTrackingEnabled)
                {
                    Unpricing.StartTracking();
                }
            }
        }
    
        private void FixupBasePricing(Pricing previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RelatedPricings.Contains(this))
            {
                previousValue.RelatedPricings.Remove(this);
            }
    
            if (BasePricing != null)
            {
                if (!BasePricing.RelatedPricings.Contains(this))
                {
                    BasePricing.RelatedPricings.Add(this);
                }
    
                RelPricingId = BasePricing.Id;
            }
            else if (!skipKeys)
            {
                RelPricingId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BasePricing")
                    && (ChangeTracker.OriginalValues["BasePricing"] == BasePricing))
                {
                    ChangeTracker.OriginalValues.Remove("BasePricing");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BasePricing", previousValue);
                }
                if (BasePricing != null && !BasePricing.ChangeTracker.ChangeTrackingEnabled)
                {
                    BasePricing.StartTracking();
                }
            }
        }
    
        private void FixupRelatedPricings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Pricing item in e.NewItems)
                {
                    item.BasePricing = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RelatedPricings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pricing item in e.OldItems)
                {
                    if (ReferenceEquals(item.BasePricing, this))
                    {
                        item.BasePricing = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RelatedPricings", item);
                    }
                }
            }
        }

        #endregion

    }
}
