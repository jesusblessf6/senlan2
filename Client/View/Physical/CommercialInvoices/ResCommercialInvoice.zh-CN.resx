<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddFinalInvoice" xml:space="preserve">
    <value>新增最终发票</value>
  </data>
  <data name="AddProvisionalInvoice" xml:space="preserve">
    <value>新增临时发票</value>
  </data>
  <data name="AmountIncludingInterest" xml:space="preserve">
    <value>金额(含息)</value>
  </data>
  <data name="BLNotNull" xml:space="preserve">
    <value>请选择提单！</value>
  </data>
  <data name="CommercialInvoiceHome" xml:space="preserve">
    <value>商业发票首页</value>
  </data>
  <data name="CommercialInvoiceList" xml:space="preserve">
    <value>商业发票列表</value>
  </data>
  <data name="CurrencyInconsistentError" xml:space="preserve">
    <value>关联的临时发票的币种不一致，不能保存</value>
  </data>
  <data name="CurrencyInconsistentError2" xml:space="preserve">
    <value>关联的临时发票和最终发票所选的币种不一致，不能保存</value>
  </data>
  <data name="CurrencyInconsistentError3" xml:space="preserve">
    <value>关联的信用证上的开证币种和临时发票所选的币种不一致，不能保存！</value>
  </data>
  <data name="CurrentMonthFinalInvoice" xml:space="preserve">
    <value>本月最终发票</value>
  </data>
  <data name="CurrentMonthProvisionalInvoice" xml:space="preserve">
    <value>本月临时发票</value>
  </data>
  <data name="DeliveryFormNotNull" xml:space="preserve">
    <value>请选择发货单！</value>
  </data>
  <data name="InvoiceNoExisted" xml:space="preserve">
    <value>发票号已存在！</value>
  </data>
  <data name="InvoiceNoNotNull" xml:space="preserve">
    <value>请输入发票号！</value>
  </data>
  <data name="InvoiceType" xml:space="preserve">
    <value>发票类型</value>
  </data>
  <data name="ProvisionalInvoiceNotNull" xml:space="preserve">
    <value>请选择临时发票！</value>
  </data>
  <data name="PurchaseCommercialInvoiceFinal" xml:space="preserve">
    <value>采购商业发票-最终发票</value>
  </data>
  <data name="PurchaseCommercialInvoiceHome" xml:space="preserve">
    <value>采购商业发票首页</value>
  </data>
  <data name="PurchaseCommercialInvoiceList" xml:space="preserve">
    <value>采购商业发票列表</value>
  </data>
  <data name="PurchaseCommercialInvoiceProvisional" xml:space="preserve">
    <value>采购商业发票-临时发票</value>
  </data>
  <data name="RelatedInvoiceNo" xml:space="preserve">
    <value>关联发票号</value>
  </data>
  <data name="SalesCommercialInvoiceFinal" xml:space="preserve">
    <value>销售商业发票-最终发票</value>
  </data>
  <data name="SalesCommercialInvoiceHome" xml:space="preserve">
    <value>销售商业发票首页</value>
  </data>
  <data name="SalesCommercialInvoiceList" xml:space="preserve">
    <value>销售商业发票列表</value>
  </data>
  <data name="SalesCommercialInvoiceProvisional" xml:space="preserve">
    <value>销售商业发票-临时发票</value>
  </data>
  <data name="ShipTermError" xml:space="preserve">
    <value>装运条款太长，请不要超过50个字符！</value>
  </data>
</root>