using System.Collections.Generic;
using System.Linq;
using Client.ApprovalServiceReference;
using Client.Base.BaseClientVM;
using Client.PaymentRequestServiceReference;
using Client.QuotaServiceReference;
using Client.VATInvoicedRequestLineServiceReference;
using DBEntity;
using DBEntity.EnumEntity;
using Utility.ServiceManagement;
using Client.BusinessPartnerServiceReference;

namespace Client.ViewModel.Console.ApprovalCenter
{
	public class ApprovalCenterHomeVM : BaseVM
	{
		#region Member

		private List<PaymentRequest> _paymentRequests;
		private List<Quota> _purchaseQuotas;
		private List<Quota> _salesQuotas;
		private List<VATInvoiceRequestLine> _vatInvoiceRequestLines;
		private List<int> _idList;
		private List<BusinessPartner> _bpApproveLines;

		#endregion

		#region Property
		public List<int> IdList
		{
			get { return _idList; }
			set { 
				if(_idList != value)
				{
					_idList = value;
					Notify("IdList");
				}
			}
		}

		public List<Quota> PurchaseQuotas
		{
			get { return _purchaseQuotas; }
			set
			{
				_purchaseQuotas = value;
				Notify("PurchaseQuotas");
			}
		}

		public List<Quota> SalesQuotas
		{
			get { return _salesQuotas; }
			set
			{
				_salesQuotas = value;
				Notify("SalesQuotas");
			}
		}

		public List<PaymentRequest> PaymentRequests
		{
			get { return _paymentRequests; }
			set
			{
				_paymentRequests = value;
				Notify("PaymentRequests");
			}
		}

		public List<VATInvoiceRequestLine> VATInvoiceRequestLines
		{
			get { return _vatInvoiceRequestLines; }
			set
			{
				_vatInvoiceRequestLines = value;
				Notify("VATInvoiceRequestLines");
			}
		}

		public List<BusinessPartner> BPApproveLines
		{
			get { return _bpApproveLines; }
			set
			{
				_bpApproveLines = value;
				Notify("BPApproveLines");
			}
		}

		#endregion

		#region Constructor

		public ApprovalCenterHomeVM()
		{
			GetInternalIdList();
			LoadPurchaseQuotas();
			LoadSalesQuotas();
			LoadPaymentRequests();
			LoadVATInvoiceRequestLines();
			LoadBPApproveLines();
		}

		#endregion

		#region Method
		public void GetInternalIdList()
		{
			using (var businessPartnerService = SvcClientManager.GetSvcClient<BusinessPartnerServiceClient>(SvcType.BusinessPartnerSvc))
			{
				List<BusinessPartner> list = businessPartnerService.GetInternalCustomersByUser(CurrentUser.Id);
				if (list.Count > 0)
				{
					IdList = list.Select(c => c.Id).ToList();
				}
			}
		}

		public void LoadPurchaseQuotas()
		{
			PurchaseQuotas = LoadQuotas((int) ContractType.Purchase);
		}

		public void LoadSalesQuotas()
		{
			SalesQuotas = LoadQuotas((int) ContractType.Sales);
		}

		public List<Quota> LoadQuotas(int contractType)
		{
			var quotas = new List<Quota>();

			#region Query Quotas for Approval

			var quotaService = SvcClientManager.GetSvcClient<QuotaServiceClient>(SvcType.QuotaSvc);
			string condition =
				"it.Contract.ContractType = @p1 and it.ApprovalId is not NULL and (it.ApproveStatus = @p2 or it.ApproveStatus = @p3)" ;
			if (contractType == (int)ContractType.Purchase)
			{
				condition += " and (( it.Contract.TradeType = " + (int)TradeType.ShortDomesticTrade +
					" or it.Contract.TradeType = " + (int)TradeType.LongDomesticTrade +
					") or ((it.Contract.TradeType = " + (int)TradeType.LongForeignTrade + " or it.Contract.TradeType = " + (int)TradeType.ShortForeignTrade 
					+ " ) and it.IsAutoGenerated = False )) ";
			}
			if(IdList != null && IdList.Count > 0)
			{
				condition += string.Format(" and (");
				for (int j = 0; j < IdList.Count;j++ )
				{
					if (j == 0)
					{
						condition += string.Format(" it.Contract.InternalCustomerId = {0} ", IdList[j]);
					}
					else
					{
						condition += string.Format(" or it.Contract.InternalCustomerId = {0}", IdList[j]);
					}
				}
				condition += string.Format(" )");
			}
			var parameters = new List<object>
				{contractType, (int) ApproveStatus.ApproveNotStart, (int) ApproveStatus.InApprove};
			var includes = new List<string>
				{
					"Contract",
					"Pricings",
					"User",
					"Approval",
					"Approval.ApprovalStages",
					"Approval.ApprovalStages.ApprovalUser",
					"Contract.BusinessPartner",
					"Contract.InternalCustomer",
					"Commodity",
					"Brand",
					"Currency"
				};
			List<Quota> tmpQuotas = quotaService.Select(condition, parameters, includes);

			#endregion

			foreach (Quota q in tmpQuotas)
			{
				Quota quota = q;
				if (quota.Approval == null) continue;

				FilterDeleted(q.Pricings);
				FilterDeleted(q.Approval.ApprovalStages);

				IEnumerable<int> approvalUserIds = quota.Approval.ApprovalStages.Where(
					o => o.StageIndex == quota.ApprovalStageIndex).Select(
						o => o.ApprovalUserId);
				if (approvalUserIds.Contains(CurrentUser.Id))
				{
					if (quota.PricingType == (int)PricingType.Fixed)
					{
						Pricing p = quota.Pricings.FirstOrDefault();
						if (p != null)
							quota.StrPrice = p.FinalPrice == null
												 ? string.Empty
												 : p.FinalPrice.Value.ToString(RoundRules.STR_PRICE);
					}

					string passed, notPassed;
					List<ApprovalStage> stages = quota.Approval.ApprovalStages.ToList();
					ParseApprovalDetailString(stages, quota.ApprovalStageIndex ?? 0, out passed, out notPassed);

					if(quota.ApproveStatus == (int) ApproveStatus.Approved)
					{
						quota.CustomerStrField1 = passed + notPassed;
						quota.CustomerStrField2 = string.Empty;
					}
					else
					{
						quota.CustomerStrField1 = passed;
						quota.CustomerStrField2 = notPassed;
					}

					quotas.Add(quota);
				}
			}
			if (contractType == (int)ContractType.Purchase)
			{
				quotas = quotas.OrderBy(o => o.VituralRelQuotaId).ThenBy(o => o.RelQuotaStage ?? 0).ToList();
			}
			else
			{
				quotas = quotas.Where(o => o.IsAutoGenerated == false).ToList();
			}
			return quotas;
		}

		/// <summary>
		/// Approve the Quota by id
		/// </summary>
		/// <param name="quotaId"></param>
		public void ApproveQuota(int quotaId)
		{
			using (var approvalService = SvcClientManager.GetSvcClient<ApprovalServiceClient>(SvcType.ApprovalSvc))
			{
				approvalService.ApproveQuota(quotaId, CurrentUser.Id);
			}
		}

		/// <summary>
		/// Load Payment Request waiting for approval of current user
		/// </summary>
		public void LoadPaymentRequests()
		{
			var requestService = SvcClientManager.GetSvcClient<PaymentRequestServiceClient>(SvcType.PaymentRequestSvc);

			//Query the payment request in approval procedure
			string condition = "it.ApprovalId is not NULL and (it.ApproveStatus = @p1 or it.ApproveStatus = @p2)";
			if (IdList != null && IdList.Count > 0)
			{
				condition += string.Format(" and (");
				for (int j = 0; j < IdList.Count; j++)
				{

					if (j == 0)
					{
						condition += string.Format(" it.PayBusinessPartner.Id = {0} ", IdList[j]);
					}
					else
					{
						condition += string.Format(" or it.PayBusinessPartner.Id = {0}", IdList[j]);
					}
				}
				condition += string.Format(" )");
			}
			var parameters = new List<object> {(int) ApproveStatus.ApproveNotStart, (int) ApproveStatus.InApprove};
			var includes = new List<string>
				{
					"Quota",
					"Currency",
					"PayBankAccount",
					"PayBankAccount.Bank",
					"PayBusinessPartner",
					"ReceiveBankAccount",
					"ReceiveBankAccount.Bank",
					"ReceiveBusinessPartner",
					"PaymentMean",
					"PaymentUsage",
					"User",
					"Approval",
					"Approval.ApprovalStages",
					"Approval.ApprovalStages.ApprovalUser"
				};
			List<PaymentRequest> tmpRequests = requestService.Select(condition, parameters, includes).Where(r =>
					r.Approval.ApprovalStages.Any(
						o => o.StageIndex == r.ApprovalStageIndex && o.ApprovalUserId == CurrentUser.Id)).ToList();

			//Select the Payment Request to be approved by currenct user
			var requests = new List<PaymentRequest>();

			foreach (var request in tmpRequests)
			{
				var r = request;

				FilterDeleted(r.Approval.ApprovalStages);
				IEnumerable<int> approvalUserIds = r.Approval.ApprovalStages.Where(
					o => o.StageIndex == r.ApprovalStageIndex).Select(
						o => o.ApprovalUserId);

				if (approvalUserIds.Contains(CurrentUser.Id))
				{
					List<ApprovalStage> orderedStages = r.Approval.ApprovalStages.ToList();
					string passed;
					string notPassed;
					ParseApprovalDetailString(orderedStages, r.ApprovalStageIndex ?? 0, out passed, out notPassed);

					if (r.ApproveStatus == (int)ApproveStatus.Approved)
					{
						r.CustomerStrField1 = passed + notPassed;
						r.CustomerStrField2 = string.Empty;
					}
					else
					{
						r.CustomerStrField1 = passed;
						r.CustomerStrField2 = notPassed;
					}

					requests.Add(r);
				}
			}

			PaymentRequests = requests;
		}

		public void LoadVATInvoiceRequestLines()
		{
			var vatInvoiceLineService = SvcClientManager.GetSvcClient<VATInvoicedRequestLineServiceClient>(SvcType.VATInvoiceRequestLineSvc);

			//Query the payment request in approval procedure
			string condition = "it.ApprovalId is not NULL and (it.ApproveStatus = @p1 or it.ApproveStatus = @p2)";
			if (IdList != null && IdList.Count > 0)
			{
				condition += string.Format(" and (");
				for (int j = 0; j < IdList.Count; j++)
				{

					if (j == 0)
					{
						condition += string.Format(" it.VATInvoiceRequest.InternalCustomer.Id = {0} ", IdList[j]);
					}
					else
					{
						condition += string.Format(" or it.VATInvoiceRequest.InternalCustomer.Id = {0}", IdList[j]);
					}
				}
				condition += string.Format(" )");
			}
			var parameters = new List<object> { (int)ApproveStatus.ApproveNotStart, (int)ApproveStatus.InApprove };
			var includes = new List<string>
				{
					"VATInvoiceRequest",
					"Quota",
					"VATInvoiceRequest.BusinessPartner",
					"VATInvoiceRequest.InternalCustomer",
					"User",
					"Approval",
					"Approval.ApprovalStages",
					"Approval.ApprovalStages.ApprovalUser"
				};
			List<VATInvoiceRequestLine> tmpLines =
				vatInvoiceLineService.Select(condition, parameters, includes).Where(l =>
																					l.Approval.ApprovalStages.Any(
																						o =>
																						o.StageIndex ==
																						l.ApprovalStageIndex &&
																						o.ApprovalUserId ==
																						CurrentUser.Id)).ToList();

			//Select the Payment Request to be approved by currenct user
			var lines = new List<VATInvoiceRequestLine>();

			foreach (var line in tmpLines)
			{
				var l = line;

				FilterDeleted(line.Approval.ApprovalStages);
				IEnumerable<int> approvalUserIds = l.Approval.ApprovalStages.Where(
					o => o.StageIndex == l.ApprovalStageIndex).Select(
						o => o.ApprovalUserId);

				if (approvalUserIds.Contains(CurrentUser.Id))
				{
					List<ApprovalStage> orderedStages = l.Approval.ApprovalStages.ToList();
					string passed;
					string notPassed;
					ParseApprovalDetailString(orderedStages, l.ApprovalStageIndex ?? 0, out passed, out notPassed);

					if (l.ApproveStatus == (int)ApproveStatus.Approved)
					{
						l.CustomerStrField1 = passed + notPassed;
						l.CustomerStrField2 = string.Empty;
					}
					else
					{
						l.CustomerStrField1 = passed;
						l.CustomerStrField2 = notPassed;
					}

					lines.Add(l);
				}
			}

			VATInvoiceRequestLines = lines;
		}

		/// <summary>
		/// Parse the approval stages and output the approval detail strings
		/// </summary>
		/// <param name="stages"></param>
		/// <param name="currentStageIndex"></param>
		/// <param name="passed"></param>
		/// <param name="notPassed"></param>
		public static void ParseApprovalDetailString(List<ApprovalStage> stages, int currentStageIndex, out string passed,
											  out string notPassed)
		{
			//todo replace the linq logic with more clear code
			stages = stages.OrderBy(o => o.StageIndex).ToList();
			List<IGrouping<int?, ApprovalStage>> stageGroup = stages.GroupBy(o => o.StageIndex).ToList();

			List<string> passedUsers =
				stageGroup.Select(
					g =>
					string.Join("/",
								g.Where(o => o.StageIndex < currentStageIndex).Select(
									o => o.ApprovalUser.Name))).ToList();

			passedUsers = passedUsers.Where(o => o.Trim().Length > 0).ToList();

			passed = string.Join("->", passedUsers);

			List<string> notPassedUsers =
				stageGroup.Select(
					g =>
					string.Join("/",
								g.Where(o => o.StageIndex >= currentStageIndex).Select(
									o => o.ApprovalUser.Name))).ToList();

			notPassedUsers = notPassedUsers.Where(o => o.Trim().Length > 0).ToList();

			notPassed = string.Join("->", notPassedUsers);
			if (!string.IsNullOrWhiteSpace(notPassed) &&
				!string.IsNullOrWhiteSpace(passed))
			{
				notPassed = "->" + notPassed;
			}
		}

		/// <summary>
		/// Approve the Payment Request by Id
		/// </summary>
		/// <param name="id"></param>
		public void ApprovePaymentRequest(int id)
		{
			using(var approvalService = SvcClientManager.GetSvcClient<ApprovalServiceClient>(SvcType.ApprovalSvc))
			{
				approvalService.ApprovePaymentRequest(id, CurrentUser.Id);
			}
		}

		/// <summary>
		/// approve the VAT Invoice Request Line by id
		/// </summary>
		/// <param name="id"></param>
		public void ApproveVATInvoiceRequestLine(int id)
		{
			using (var approvalService = SvcClientManager.GetSvcClient<ApprovalServiceClient>(SvcType.ApprovalSvc))
			{
				approvalService.ApproveVATInvoiceRequestLine(id, CurrentUser.Id);
			}
		}

		public void LoadBPApproveLines()
		{
			var bpSvc = SvcClientManager.GetSvcClient<BusinessPartnerServiceClient>(SvcType.BusinessPartnerSvc);
			string condition = "it.ApprovalId is not NULL and (it.ApproveStatus = @p1 or it.ApproveStatus = @p2)";
			var parameters = new List<object> { (int)ApproveStatus.ApproveNotStart, (int)ApproveStatus.InApprove };
			var includes = new List<string>
				{
					"User",
					"Approval",
					"Approval.ApprovalStages",
					"Approval.ApprovalStages.ApprovalUser"
				};
			List<BusinessPartner> tmpLines =
				bpSvc.Select(condition, parameters, includes).Where(l =>
				                                                    l.Approval.ApprovalStages.Any(
					                                                    o =>
					                                                    o.StageIndex ==
					                                                    l.ApprovalStageIndex &&
					                                                    o.ApprovalUserId ==
					                                                    CurrentUser.Id)).ToList();

			//Select the Customer/Broker to be approved by currenct user
			var lines = new List<BusinessPartner>();

			foreach (var line in tmpLines)
			{
				var l = line;

				FilterDeleted(line.Approval.ApprovalStages);
				IEnumerable<int> approvalUserIds = l.Approval.ApprovalStages.Where(
					o => o.StageIndex == l.ApprovalStageIndex).Select(
						o => o.ApprovalUserId);

				if (approvalUserIds.Contains(CurrentUser.Id))
				{
					List<ApprovalStage> orderedStages = l.Approval.ApprovalStages.ToList();
					string passed;
					string notPassed;
					ParseApprovalDetailString(orderedStages, l.ApprovalStageIndex ?? 0, out passed, out notPassed);

					if (l.ApproveStatus == (int)ApproveStatus.Approved)
					{
						l.CustomerStrField1 = passed + notPassed;
						l.CustomerStrField2 = string.Empty;
					}
					else
					{
						l.CustomerStrField1 = passed;
						l.CustomerStrField2 = notPassed;
					}

					lines.Add(l);
				}
			}

			BPApproveLines = lines;
		}

		public void ApproveBP(int id)
		{
			using (var approvalService = SvcClientManager.GetSvcClient<ApprovalServiceClient>(SvcType.ApprovalSvc))
			{
				approvalService.ApproveBP(id, CurrentUser.Id);
			}
		}

		#endregion
	}
}