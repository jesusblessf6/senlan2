using System;
using System.Collections.Generic;
using System.Linq;
using Client.AttachmentServiceReference;
using Client.Base.BaseClientVM;
using Client.BrandServiceReference;
using Client.BusinessPartnerServiceReference;
using Client.CommodityServiceReference;
using Client.CommodityTypeServiceReference;
using Client.ContractServiceReference;
using Client.CurrencyServiceReference;
using Client.DocumentServiceReference;
using Client.PricingServiceReference;
using Client.QuotaServiceReference;
using Client.RateServiceReference;
using Client.SpecificationServiceReference;
using Client.View.Physical.Contracts;
using DBEntity;
using DBEntity.EnableProperty;
using DBEntity.EnumEntity;
using Utility.Misc;
using Utility.ServiceManagement;
using System.Windows.Forms;
using Client.PaymentMeanServiceReference;
using Client.SystemParameterServiceReference;
using System.Windows;
using System.Text.RegularExpressions;
using Client.BankAccountServiceReference;
using Client.UserServiceReference;

namespace Client.ViewModel.Physical.Contracts
{
    public class ShortContractDetailVM : BaseVM
    {
        #region Member

        private int _quotaId;
        private string _contractNo;
        private string _exContractNo;
        private string _exQuotaNo;
        private string _oldQuotaNo;
        private int? _supplierId;
        private string _supplierName;
        private decimal? _quantity;
        private decimal? _price;
        private string _billStatus;

        private int? _internalCustomerId;
        private string _internalCustomerName;
        private int? _warehouseId;
        private string _warehouseName;

        private bool _startStatus;
        private List<ContractUDF> _udfs;
        private int? _selectedUsdId;


        private int? _approveStatus;
        private int _financeStatus;
        private int _deliveryStatus;
        private DateTime? _signDate = DateTime.Now.Date;
        private int? _commodityId;
        private int? _commodityTypeId;
        private List<Commodity> _commodities;
        private List<CommodityType> _commodityTypes;
        private int? _brandId;
        private List<Brand> _brands;
        private int? _specificationId;
        private List<Specification> _specifications;
        private int _selectPricingType = 1;
        private Dictionary<string, int> _pricingTypes;
        private int _selectPricingBasis;
        private Dictionary<string, int> _pricingBasises;
        private DateTime? _pricingStartDate;
        private DateTime? _pricingEndDate;
        private bool _pricingSideTheir;
        private bool _pricingSideOwn;
        private decimal? _premium = 0;
        private DateTime? _deliveryDate;
        private string _description;
        private int _selectPricingCurrencyId;
        private decimal? _settlementRate;
        private Dictionary<string, int> _statusTypes;
        private int? _pricingSide;
        private List<Currency> _currencies;
        private List<Attachment> _attachments;

        private List<Quota> _quotas;
        private List<Quota> _addQuotas;
        private List<Quota> _updateQuotas;
        private List<Quota> _deleteQuotas;
        private List<Attachment> _addAttachments;
        private List<Attachment> _deleteAttachments;

        private List<BusinessPartner> _innerCustomers;
        private List<User> _Users;
        private int? _selectedUserId;
        private int _selectedInternalCustomerId;
        private bool _loadState;
        private string _shipTerm;
        private bool _isSplit;
        #region 多品牌
        private List<QuotaBrandRel> _allQuotaBrandRelList;
        private List<QuotaBrandRel> _addQuotaBrandRelList;
        private List<QuotaBrandRel> _updateQuotaBrandRelList;
        private List<QuotaBrandRel> _deleteQuotaBrandRelList;
        #endregion

        List<RelQuota> _relQuotas = new List<RelQuota>();

        private int? _groupId = null;

        private DateTime? _vATInvoiceDate;

        private string _vATInvoiceStr;
        private Dictionary<string, int> _paymentMean;
        private int? _selectPaymentMeanId;

        private string _AutoContractNo;
        private string _AutoQuotaNo;
        private string _IsAutoNoVisible;
        private string _IsUseMultipleBrands;

        private decimal? _QtyLimit;
        private bool _IsNeedAutoGenerated = true;
        private string _IsNeedAutoVisible;
        private List<BankAccount> _PayBankAccounts;
        private int? _PayBankAccountId;
        #endregion

        #region Property
        public int? SelectedUserId
        {
            get { return _selectedUserId; }
            set {
                if (_selectedUserId != value)
                {
                    _selectedUserId = value;
                    Notify("SelectedUserId");
                }
            }
        }

        public List<User> Users
        {
            get { return _Users; }
            set { 
                if(_Users != value)
                {
                    _Users = value;
                    Notify("Users");
                }
            }
        }

        public int? PayBankAccountId
        {
            get { return _PayBankAccountId; }
            set {
                if (_PayBankAccountId != value)
                {
                    _PayBankAccountId = value;
                    Notify("PayBankAccountId");
                }
            }
        }

        public List<BankAccount> PayBankAccounts
        {
            get { return _PayBankAccounts; }
            set { 
                if(_PayBankAccounts != value)
                {
                    _PayBankAccounts = value;
                    Notify("PayBankAccounts");
                }
            }
        }

        public string IsNeedAutoVisible
        {
            get { return _IsNeedAutoVisible; }
            set
            {
                if (_IsNeedAutoVisible != value)
                {
                    _IsNeedAutoVisible = value;
                    Notify("IsNeedAutoVisible");
                }
            }
        }

        public bool IsNeedAutoGenerated
        {
            get { return _IsNeedAutoGenerated; }
            set
            {
                if (_IsNeedAutoGenerated != value)
                {
                    _IsNeedAutoGenerated = value;
                    Notify("IsNeedAutoGenerated");
                }
            }
        }

        public decimal? QtyLimit
        {
            get { return _QtyLimit; }
            set
            {
                if (_QtyLimit != value)
                {
                    _QtyLimit = value;
                    Notify("QtyLimit");
                }
            }
        }

        public string IsUseMultipleBrands
        {
            get { return _IsUseMultipleBrands; }
            set {
                if (_IsUseMultipleBrands != value)
                {
                    _IsUseMultipleBrands = value;
                    Notify("IsUseMultipleBrands");
                }
            }
        }

        public string IsAutoNoVisible
        {
            get { return _IsAutoNoVisible; }
            set { 
                if(_IsAutoNoVisible != value)
                {
                    _IsAutoNoVisible = value;
                    Notify("IsAutoNoVisible");
                }
            }
        }

        public string AutoQuotaNo
        {
            get { return _AutoQuotaNo; }
            set { 
                if(_AutoQuotaNo != value)
                {
                    _AutoQuotaNo = value;
                    Notify("AutoQuotaNo");
                }
            }
        }

        public string AutoContractNo
        {
            get { return _AutoContractNo; }
            set { 
                if(_AutoContractNo != value)
                {
                    _AutoContractNo = value;
                    Notify("AutoContractNo");
                }
            }
        }

        public List<QuotaBrandRel> DeleteQuotaBrandList
        {
            get { return _deleteQuotaBrandRelList; }
            set
            {
                if (_deleteQuotaBrandRelList != value)
                {
                    _deleteQuotaBrandRelList = value;
                    Notify("DeleteQuotaBrandList");
                }
            }
        }

        public List<QuotaBrandRel> UpdateQuotaBrandRelList
        {
            get { return _updateQuotaBrandRelList; }
            set
            {
                if (_updateQuotaBrandRelList != value)
                {
                    _updateQuotaBrandRelList = value;
                    Notify("UpdateQuotaBrandRelList");
                }
            }
        }

        public List<QuotaBrandRel> AddQuotaBrandRelList
        {
            get { return _addQuotaBrandRelList; }
            set
            {
                if (_addQuotaBrandRelList != value)
                {
                    _addQuotaBrandRelList = value;
                    Notify("AddQuotaBrandRelList");
                }
            }
        }

        public List<QuotaBrandRel> AllQuotaBrandRelList
        {
            get { return _allQuotaBrandRelList; }
            set
            {
                if (_allQuotaBrandRelList != value)
                {
                    _allQuotaBrandRelList = value;
                    Notify("AllQuotaBrandRelList");
                }
            }
        }

        public int LoadFlag = 1;
        public TradeType TradeType { get; set; }

        /// <summary>
        /// 单据号
        /// </summary>
        public string ContractNo
        {
            get { return _contractNo; }
            set
            {
                if (_contractNo != value)
                {
                    _contractNo = value;
                    Notify("ContractNo");
                }
            }
        }

        /// <summary>
        /// 单据号
        /// </summary>
        public string ExQuotaNo
        {
            get { return _exQuotaNo; }
            set
            {
                if (_exQuotaNo != value)
                {
                    _exQuotaNo = value;
                    Notify("ExQuotaNo");
                }
            }
        }

        /// <summary>
        /// 原始单据号
        /// </summary>
        public string ExContractNo
        {
            get { return _exContractNo; }
            set
            {
                if (_exContractNo != value)
                {
                    _exContractNo = value;
                    Notify("ExContractNo");
                }
            }
        }

        /// <summary>`
        /// 供应商ID
        /// </summary>
        public int? SupplierId
        {
            get { return _supplierId; }
            set
            {
                if (_supplierId != value)
                {
                    _supplierId = value;
                    Notify("SupplierId");
                }
            }
        }

        /// <summary>`
        /// 供应商姓名
        /// </summary>
        public string SupplierName
        {
            get { return _supplierName; }
            set
            {
                if (_supplierName != value)
                {
                    _supplierName = value;
                    Notify("SupplierName");
                }
            }
        }

        /// <summary>
        /// 数量
        /// </summary>
        public decimal? Quantity
        {
            get
            {
                if (_quantity != null)
                    return Math.Round((decimal)_quantity, RoundRules.QUANTITY, MidpointRounding.AwayFromZero);

                return null;
            }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    Notify("Quantity");
                }
            }
        }

        /// <summary>
        /// 价格
        /// </summary>
        public decimal? Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    Notify("Price");
                }
            }
        }

        /// <summary>
        /// 批次列表
        /// </summary>
        public List<Quota> Quotas
        {
            get { return _quotas; }
            set
            {
                if (_quotas != value)
                {
                    _quotas = value;
                    Notify("Quotas");
                }
            }
        }

        public List<Quota> AddQuotas
        {
            get { return _addQuotas; }
            set
            {
                if (_addQuotas != value)
                {
                    _addQuotas = value;
                    Notify("AddQuotas");
                }
            }
        }

        public List<Quota> UpdateQuotas
        {
            get { return _updateQuotas; }
            set
            {
                if (_updateQuotas != value)
                {
                    _updateQuotas = value;
                    Notify("UpdateQuotas");
                }
            }
        }

        public List<Quota> DeleteQuotas
        {
            get { return _deleteQuotas; }
            set
            {
                if (_deleteQuotas != value)
                {
                    _deleteQuotas = value;
                    Notify("DeleteQuotas");
                }
            }
        }

        /// <summary>
        /// 新增附件列表
        /// </summary>
        public List<Attachment> AddAttachments
        {
            get { return _addAttachments; }
            set
            {
                if (_addAttachments != value)
                {
                    _addAttachments = value;
                    Notify("AddAttachments");
                }
            }
        }

        public List<Attachment> Attachments
        {
            get { return _attachments; }
            set
            {
                if (_attachments != value)
                {
                    _attachments = value;
                    Notify("Attachments");
                }
            }
        }

        /// <summary>
        /// 删除附件列表
        /// </summary>
        public List<Attachment> DeleteAttachments
        {
            get { return _deleteAttachments; }
            set
            {
                if (_deleteAttachments != value)
                {
                    _deleteAttachments = value;
                    Notify("DeleteAttachments");
                }
            }
        }

        /// <summary>`
        /// 签署公司ID
        /// </summary>
        public int? InternalCustomerId
        {
            get { return _internalCustomerId; }
            set
            {
                if (_internalCustomerId != value)
                {
                    _internalCustomerId = value;
                    Notify("InternalCustomerId");
                }
            }
        }

        /// <summary>
        /// 签署公司名称
        /// </summary>
        public string InternalCustomerName
        {
            get { return _internalCustomerName; }
            set
            {
                if (_internalCustomerName != value)
                {
                    _internalCustomerName = value;
                    Notify("InternalCustomerName");
                }
            }
        }

        /// <summary>
        /// 仓库Id
        /// </summary>
        public int? WarehouseId
        {
            get { return _warehouseId; }
            set
            {
                if (_warehouseId != value)
                {
                    _warehouseId = value;
                    Notify("WarehouseId");
                }
            }
        }

        /// <summary>
        /// 仓库名称
        /// </summary>
        public string WarehouseName
        {
            get { return _warehouseName; }
            set
            {
                if (_warehouseName != value)
                {
                    _warehouseName = value;
                    Notify("WarehouseName");
                }
            }
        }

        public List<ContractUDF> Udfs
        {
            get { return _udfs; }
            set
            {
                if (_udfs != value)
                {
                    _udfs = value;
                    Notify("Udfs");
                }
            }
        }

        public int? SelectedUsdId
        {
            get { return _selectedUsdId; }
            set
            {
                if (_selectedUsdId != value)
                {
                    _selectedUsdId = value;
                    Notify("SelectedUsdId");
                }
            }
        }

        /// <summary>
        /// 单据状态
        /// </summary>
        public string BillStatus
        {
            get { return _billStatus; }
            set
            {
                if (_billStatus != value)
                {
                    _billStatus = value;
                    Notify("BillStatus");
                }
            }
        }

        /// <summary>
        /// 审批状态
        /// </summary>
        public int? ApproveStatus
        {
            get { return _approveStatus; }
            set
            {
                if (_approveStatus != value)
                {
                    _approveStatus = value;
                    Notify("ApproveStatus");
                }
            }
        }

        /// <summary>
        /// 财务状态
        /// </summary>
        public int FinanceStatus
        {
            get { return _financeStatus; }
            set
            {
                if (_financeStatus != value)
                {
                    _financeStatus = value;
                    Notify("FinanceStatus");
                }
            }
        }

        /// <summary>
        /// 货运状态
        /// </summary>
        public int DeliveryStatus
        {
            get { return _deliveryStatus; }
            set
            {
                if (_deliveryStatus != value)
                {
                    _deliveryStatus = value;
                    Notify("DeliveryStatus");
                }
            }
        }

        /// <summary>
        /// 签署日期
        /// </summary>
        public DateTime? SignDate
        {
            get { return _signDate; }
            set
            {
                if (_signDate != value)
                {
                    _signDate = value;
                    Notify("SignDate");
                }
            }
        }

        /// <summary>
        /// 金属id
        /// </summary>
        public int? CommodityId
        {
            get { return _commodityId; }
            set
            {
                if (_commodityId != value)
                {
                    _commodityId = value;
                    Notify("CommodityId");
                }
            }
        }

        /// <summary>
        /// 金属类型id
        /// </summary>
        public int? CommodityTypeId
        {
            get { return _commodityTypeId; }
            set
            {
                if (_commodityTypeId != value)
                {
                    _commodityTypeId = value;
                    Notify("CommodityTypeId");
                }
            }
        }

        public List<Commodity> Commoditys
        {
            get { return _commodities; }
            set
            {
                if (_commodities != value)
                {
                    _commodities = value;
                    Notify("Commoditys");
                }
            }
        }

        public List<CommodityType> CommodityTypes
        {
            get { return _commodityTypes; }
            set
            {
                if (_commodityTypes != value)
                {
                    _commodityTypes = value;
                    Notify("CommodityTypes");
                }
            }
        }

        public int? BrandId
        {
            get { return _brandId; }
            set
            {
                if (_brandId != value)
                {
                    _brandId = value;
                    Notify("BrandId");
                }
            }
        }

        public List<Brand> Brands
        {
            get { return _brands; }
            set
            {
                if (_brands != value)
                {
                    _brands = value;
                    Notify("Brands");
                }
            }
        }

        public int? SpecificationId
        {
            get { return _specificationId; }
            set
            {
                if (_specificationId != value)
                {
                    _specificationId = value;
                    Notify("SpecificationId");
                }
            }
        }

        public List<Specification> Specifications
        {
            get { return _specifications; }
            set
            {
                if (_specifications != value)
                {
                    _specifications = value;
                    Notify("Specifications");
                }
            }
        }

        public int SelectPricingType
        {
            get { return _selectPricingType; }
            set
            {
                if (_selectPricingType != value)
                {
                    _selectPricingType = value;
                    Notify("SelectPricingType");
                }
            }
        }

        public Dictionary<string, int> PricingTypes
        {
            get { return _pricingTypes; }
            set
            {
                if (_pricingTypes != value)
                {
                    _pricingTypes = value;
                    Notify("PricingType");
                }
            }
        }

        public int SelectPricingBasis
        {
            get { return _selectPricingBasis; }
            set
            {
                if (_selectPricingBasis != value)
                {
                    _selectPricingBasis = value;
                    Notify("SelectPricingBasis");
                }
            }
        }

        public Dictionary<string, int> PricingBasises
        {
            get { return _pricingBasises; }
            set
            {
                if (_pricingBasises != value)
                {
                    _pricingBasises = value;
                    Notify("PricingBasises");
                }
            }
        }

        /// <summary>
        /// 点价开始日期
        /// </summary>
        public DateTime? PricingStartDate
        {
            get { return _pricingStartDate; }
            set
            {
                if (_pricingStartDate != value)
                {
                    _pricingStartDate = value;
                    Notify("PricingStartDate");
                }
            }
        }

        /// <summary>
        /// 点价截止日期
        /// </summary>
        public DateTime? PricingEndDate
        {
            get { return _pricingEndDate; }
            set
            {
                if (_pricingEndDate != value)
                {
                    _pricingEndDate = value;
                    Notify("PricingEndDate");
                }
            }
        }

        public bool PricingSideTheir
        {
            get { return _pricingSideTheir; }
            set
            {
                if (_pricingSideTheir != value)
                {
                    _pricingSideTheir = value;
                    Notify("PricingSideTheir");
                }
            }
        }

        public bool PricingSideOwn
        {
            get { return _pricingSideOwn; }
            set
            {
                if (_pricingSideOwn != value)
                {
                    _pricingSideOwn = value;
                    Notify("PricingSideOwn");
                }
            }
        }

        /// <summary>
        /// 升贴水
        /// </summary>
        public decimal? Premium
        {
            get { return _premium; }
            set
            {
                if (_premium != value)
                {
                    _premium = value;
                    Notify("Premium");
                }
            }
        }

        /// <summary>
        /// 交/提货日期
        /// </summary>
        public DateTime? DeliveryDate
        {
            get { return _deliveryDate; }
            set
            {
                if (_deliveryDate != value)
                {
                    _deliveryDate = value;
                    Notify("DeliveryDate");
                }
            }
        }

        /// <summary>
        /// 备注
        /// </summary>
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    Notify("Description");
                }
            }
        }

        public int SelectPricingCurrencyId
        {
            get { return _selectPricingCurrencyId; }
            set
            {
                if (_selectPricingCurrencyId != value)
                {
                    _selectPricingCurrencyId = value;
                    Notify("SelectPricingCurrencyId");
                }
            }
        }

        /// <summary>
        /// 汇率
        /// </summary>
        public decimal? SettlementRate
        {
            get
            {
                if (_settlementRate != null)
                {
                    return Math.Round((decimal)_settlementRate, RoundRules.RATE, MidpointRounding.AwayFromZero);
                }

                return null;
            }
            set
            {
                if (_settlementRate != value)
                {
                    _settlementRate = value;
                    Notify("SettlementRate");
                }
            }
        }

        public Dictionary<string, int> StatusTypes
        {
            get { return _statusTypes; }
            set
            {
                if (_statusTypes != value)
                {
                    _statusTypes = value;
                    Notify("StatusTypes");
                }
            }
        }

        public int? PricingSide
        {
            get { return _pricingSide; }
            set
            {
                if (_pricingSide != value)
                {
                    _pricingSide = value;
                    Notify("PricingSide");
                }
            }
        }

        public List<Currency> Currencies
        {
            get { return _currencies; }
            set
            {
                if (_currencies != value)
                {
                    _currencies = value;
                    Notify("Currencies");
                }
            }
        }

        public int QuotaId
        {
            get { return _quotaId; }
            set
            {
                if (_quotaId != value)
                {
                    _quotaId = value;
                    Notify("QuotaId");
                }
            }
        }

        public ContractType ContractType { get; set; }

        public List<BusinessPartner> InnerCustomers
        {
            get { return _innerCustomers; }
            set
            {
                if (_innerCustomers != value)
                {
                    _innerCustomers = value;
                    Notify("InnerCustomers");
                }
            }
        }

        public int SelectedInternalCustomerId
        {
            get { return _selectedInternalCustomerId; }
            set
            {
                if (_selectedInternalCustomerId != value)
                {
                    _selectedInternalCustomerId = value;
                    Notify("SelectedInternalCustomerId");
                }
            }
        }

        public string ShipTerm
        {
            get { return _shipTerm; }
            set
            {
                if (_shipTerm != value)
                {
                    _shipTerm = value;
                    Notify("ShipTerm");
                }
            }
        }

        #region 控件enable属性

        private bool _isSignBPEnable;
        private bool _isBPEnable;
        private bool _isSaveAsDraftEnable;
        private bool _isSignDateEnable;
        private bool _isRelTransactionNewBtnEnable;
        private bool _isRelTransactionEditBtnEnable;
        private bool _isRelTransactionDeleteBtnEnable;

        public bool IsSignBPEnable
        {
            get { return _isSignBPEnable; }
            set
            {
                if (_isSignBPEnable != value)
                {
                    _isSignBPEnable = value;
                    Notify("IsSignBPEnable");
                }
            }
        }

        public bool IsBPEnable
        {
            get { return _isBPEnable; }
            set
            {
                if (_isBPEnable != value)
                {
                    _isBPEnable = value;
                    Notify("IsBPEnable");
                }
            }
        }

        public bool IsSignDateEnable
        {
            get { return _isSignDateEnable; }
            set
            {
                if (_isSignDateEnable != value)
                {
                    _isSignDateEnable = value;
                    Notify("IsSignDateEnable");
                }
            }
        }

        public bool IsRelTransactionNewBtnEnable
        {
            get { return _isRelTransactionNewBtnEnable; }
            set
            {
                if (_isRelTransactionNewBtnEnable != value)
                {
                    _isRelTransactionNewBtnEnable = value;
                    Notify("IsRelTransactionNewBtnEnable");
                }
            }
        }

        public bool IsRelTransactionEditBtnEnable
        {
            get { return _isRelTransactionEditBtnEnable; }
            set
            {
                if (_isRelTransactionEditBtnEnable != value)
                {
                    _isRelTransactionEditBtnEnable = value;
                    Notify("IsRelTransactionEditBtnEnable");
                }
            }
        }

        public bool IsRelTransactionDeleteBtnEnable
        {
            get { return _isRelTransactionDeleteBtnEnable; }
            set
            {
                if (_isRelTransactionDeleteBtnEnable != value)
                {
                    _isRelTransactionDeleteBtnEnable = value;
                    Notify("IsRelTransactionDeleteBtnEnable");
                }
            }
        }

        public bool IsSaveAsDraftEnable
        {
            get { return _isSaveAsDraftEnable; }
            set
            {
                if (_isSaveAsDraftEnable != value)
                {
                    _isSaveAsDraftEnable = value;
                    Notify("IsSaveAsDraftEnable");
                }
            }
        }

        //成员变量
        private bool _isPriceEnable;
        private bool _isQuantityEnable;
        private bool _isPricingBasisEnable;
        private bool _isPricingStartDateEnable;
        private bool _isPricingEndDateEnable;
        private bool _isCommodityEnable;
        private bool _isPremiumEnable;
        private bool _isPricingTypeEnable;

        //属性
        public bool IsPricingTypeEnable
        {
            get { return _isPricingTypeEnable; }
            set
            {
                if (_isPricingTypeEnable != value)
                {
                    _isPricingTypeEnable = value;
                    Notify("IsPricingTypeEnable");
                }
            }
        }

        public bool IsPriceEnable
        {
            get { return _isPriceEnable; }
            set
            {
                if (_isPriceEnable != value)
                {
                    _isPriceEnable = value;
                    Notify("IsPriceEnable");
                }
            }
        }

        public bool IsQuantityEnable
        {
            get { return _isQuantityEnable; }
            set
            {
                if (_isQuantityEnable != value)
                {
                    _isQuantityEnable = value;
                    Notify("IsQuantityEnable");
                }
            }
        }

        public bool IsPricingBasisEnable
        {
            get { return _isPricingBasisEnable; }
            set
            {
                if (_isPricingBasisEnable != value)
                {
                    _isPricingBasisEnable = value;
                    Notify("IsPricingBasisEnable");
                }
            }
        }

        public bool IsPricingStartDateEnable
        {
            get { return _isPricingStartDateEnable; }
            set
            {
                if (_isPricingStartDateEnable != value)
                {
                    _isPricingStartDateEnable = value;
                    Notify("IsPricingStartDateEnable");
                }
            }
        }

        public bool IsPricingEndDateEnable
        {
            get { return _isPricingEndDateEnable; }
            set
            {
                if (_isPricingEndDateEnable != value)
                {
                    _isPricingEndDateEnable = value;
                    Notify("IsPricingEndDateEnable");
                }
            }
        }

        public bool IsCommodityEnable
        {
            get { return _isCommodityEnable; }
            set
            {
                if (_isCommodityEnable != value)
                {
                    _isCommodityEnable = value;
                    Notify("IsCommodityEnable");
                }
            }
        }

        public bool IsPremiumEnable
        {
            get { return _isPremiumEnable; }
            set
            {
                if (_isPremiumEnable != value)
                {
                    _isPremiumEnable = value;
                    Notify("IsPremiumEnable");
                }
            }
        }

        #endregion

        public List<RelQuota> RelQuotas
        {
            get { return _relQuotas; }
            set
            {
                if (_relQuotas != value)
                {
                    _relQuotas = value;
                    Notify("RelQuotas");
                }
            }
        }

        public int? GroupId
        {
            get { return _groupId; }
            set
            {
                if (_groupId != value)
                {
                    _groupId = value;
                    Notify("GroupId");
                }
            }
        }

        public DateTime? VATInvoiceDate
        {
            get { return _vATInvoiceDate; }
            set 
            {
                if (_vATInvoiceDate != value)
                {
                    _vATInvoiceDate = value;
                    Notify("VATInvoiceDate");
                }
            }
        }

        public string VATInvoiceStr
        {
            get { return _vATInvoiceStr; }
            set
            {
                if (_vATInvoiceStr != value)
                {
                    _vATInvoiceStr = value;
                    Notify("VATInvoiceDate");
                }
            }
        }

        public Dictionary<string, int> PaymentMean
        {
            get { return _paymentMean; }
            set
            {
                if (_paymentMean != value)
                {
                    _paymentMean = value;
                    Notify("PaymentMean");
                }
            }
        }

        public int? SelectPaymentMeanId
        {
            get { return _selectPaymentMeanId; }
            set
            {
                if (_selectPaymentMeanId != value)
                {
                    _selectPaymentMeanId = value;
                    Notify("SelectPaymentMeanId");
                }
            }
        }

        #endregion

        #region Constructor

        public ShortContractDetailVM(TradeType tradeType, ContractType contractType)
        {
            AllQuotaBrandRelList = new List<QuotaBrandRel>();
            AddQuotaBrandRelList = new List<QuotaBrandRel>();
            ObjectId = 0;
            LoadFlag = 1;
            TradeType = tradeType;
            ContractType = contractType;
            IsSaveAsDraftEnable = true;
            LoadPricingSide();
            LoadComboxValue();
            MultipleBrandsIsVisible();
            LoadDocumentEnableProperty(ObjectId);
            LoadDocumentLineEnableProperty(ObjectId);
            if (tradeType == DBEntity.EnumEntity.TradeType.ShortForeignTrade || tradeType == DBEntity.EnumEntity.TradeType.LongForeignTrade)
            {
                IsAutoNoVisible = "Visible";
                IsNeedAutoVisible = "Visible";
            }
            else
            {
                if (tradeType == TradeType.ShortDomesticTrade)
                {
                    if (contractType == ContractType.Purchase)
                    {
                        VATInvoiceStr = "预收票日期";
                    }
                    else
                    {
                        VATInvoiceStr = "预开票日期";
                    }
                    _vATInvoiceDate = DateTime.Today;
                }
                IsAutoNoVisible = "Collapsed";
                IsNeedAutoVisible = "Collapsed";
                _IsNeedAutoGenerated = false;
            }
        }

        public ShortContractDetailVM(TradeType tradeType, ContractType contractType, int id)
        {
            AllQuotaBrandRelList = new List<QuotaBrandRel>();
            AddQuotaBrandRelList = new List<QuotaBrandRel>();
            UpdateQuotaBrandRelList = new List<QuotaBrandRel>();
            DeleteQuotaBrandList = new List<QuotaBrandRel>();
            ObjectId = id;
            if (ObjectId > 0)
            {
                IsNeedAutoVisible = "Collapsed";
            }
            LoadFlag = 1;
            _startStatus = true;
            TradeType = tradeType;
            ContractType = contractType;
            Contract cc = GetContractById(id);
            FilterDeleted(cc.Quotas);
            IsSaveAsDraftEnable = !((id > 0) && (!cc.IsDraft));
            LoadComboxValue();
            MultipleBrandsIsVisible();
            SetData(cc);
            if (ContractType == ContractType.Purchase && TradeType == TradeType.ShortDomesticTrade)
            {
                Quota q = cc.Quotas.FirstOrDefault();
                if (q.QuotaGroupId == q.Id)
                    GroupId = QuotaId;
                else
                    GroupId = q.QuotaGroupId;
            }
            LoadAttachments();
            LoadDocumentEnableProperty(ObjectId);
            LoadDocumentLineEnableProperty(cc.Quotas[0].Id);
            if (contractType == ContractType.Purchase)
            {
                VATInvoiceStr = "收票日期";
            }
            else
            {
                VATInvoiceStr = "开票日期";
            }
        }

        public ShortContractDetailVM(TradeType tradeType, ContractType contractType, int id, bool isSplit)
        {
            _isSplit = isSplit;
            AllQuotaBrandRelList = new List<QuotaBrandRel>();
            AddQuotaBrandRelList = new List<QuotaBrandRel>();
            UpdateQuotaBrandRelList = new List<QuotaBrandRel>();
            DeleteQuotaBrandList = new List<QuotaBrandRel>();
            ObjectId = id;
            LoadFlag = 1;
            _startStatus = true;
            TradeType = tradeType;
            ContractType = contractType;
            Contract cc = GetContractById(id);
            FilterDeleted(cc.Quotas);
            IsSaveAsDraftEnable = !((id > 0) && (!cc.IsDraft));
            LoadComboxValue();
            MultipleBrandsIsVisible();
            SetData(cc);
            ObjectId = 0;
            GroupId = QuotaId;
            ContractNo = string.Empty;
            LoadAttachments();
            LoadDocumentEnableProperty(ObjectId);
            LoadDocumentLineEnableProperty(cc.Quotas[0].Id);
            DeliveryStatus = (int)StatusType.NotCompleted;
            FinanceStatus = (int)StatusType.NotCompleted;
            if (contractType == ContractType.Purchase)
            {
                VATInvoiceStr = "收票日期";
            }
            else
            {
                VATInvoiceStr = "开票日期";
            }
        }

        /// <summary>
        /// Only for the copy between Purchase and Sales
        /// </summary>
        /// <param name="contract"></param>
        public ShortContractDetailVM(Contract contract)
        {
            AllQuotaBrandRelList = new List<QuotaBrandRel>();
            AddQuotaBrandRelList = new List<QuotaBrandRel>();
            LoadFlag = 1;
            TradeType = (TradeType)contract.TradeType;
            ContractType = contract.ContractType == (int)ContractType.Purchase
                               ? ContractType.Sales
                               : ContractType.Purchase;
            FilterDeleted(contract.Quotas);
            LoadComboxValue();
            MultipleBrandsIsVisible();
            CloneData(contract);

            LoadDocumentEnableProperty(0);
            LoadDocumentLineEnableProperty(0);
        }

        #endregion

        #region Method

        #region 页面加载初始化数据及数据联动

        /// <summary>
        /// 初始化下拉框
        /// </summary>
        private void LoadComboxValue()
        {
            LoadStatus();
            LoadCommodity();
            LoadPricingType();
            LoadPricingBasis();
            LoadCurrency();
            LoadInnerCustomer();
            LoadUdf();
            LoadIsSalesUsers();
            SetPaymentMean();
        }

        /// <summary>
        /// 选择币种获得付款账号
        /// </summary>
        public void LoadPayBankAccounts()
        {
            if (SelectedInternalCustomerId > 0)
            {
                using (
                    var bankaccountTypeService =
                        SvcClientManager.GetSvcClient<BankAccountServiceClient>(SvcType.BankAccountSvc))
                {
                    //BankAccount defaultBankAccount = bankaccountTypeService.GetDefaultBankAccountByBusinessPartnerId(CurrentUser.Id, SelectedInternalCustomerId, null);

                    PayBankAccounts = bankaccountTypeService.GetBankAccountsByPaymentMean(null,
                                                                                          Convert.ToInt32(SelectedInternalCustomerId));
                    PayBankAccounts.Insert(0, new BankAccount { Id = 0, Description = "" });

                    //if (defaultBankAccount != null)
                    //{
                    //    bool flag = false;
                    //    foreach (var payBankAccount in PayBankAccounts)
                    //    {
                    //        if (payBankAccount.Id == defaultBankAccount.Id)
                    //        {
                    //            flag = true;
                    //            break;
                    //        }
                    //    }
                    //    if (!flag)
                    //    {
                    //        PayBankAccounts.Insert(1, defaultBankAccount);
                    //    }
                    //    if (ObjectId <= 0)
                    //    {
                    //        PayBankAccountId = defaultBankAccount.Id;
                    //    }

                    //}
                }
            }
            else
            {
                PayBankAccounts = new List<BankAccount>();
            }
        }

        public void MultipleBrandsIsVisible()
        {
            using (var systemParameterService = SvcClientManager.GetSvcClient<SystemParameterServiceClient>(SvcType.SystemParameterSvc))
            {
                List<DBEntity.SystemParameter> list = systemParameterService.GetAll();
                if(list != null && list.Count > 0)
                {
                    DBEntity.SystemParameter systemParameter = list.FirstOrDefault();
                    if (systemParameter.IsUseMultipleBrands)
                    {
                        IsUseMultipleBrands = "Visible";
                    }
                    else
                    {
                        IsUseMultipleBrands = "Collapsed";
                    }
                }
            }
        }

        #region 下拉框

        private void LoadInnerCustomer()
        {
            using (var busService = SvcClientManager.GetSvcClient<BusinessPartnerServiceClient>(SvcType.BusinessPartnerSvc))
            {
                _innerCustomers = busService.GetInternalCustomersByUser(CurrentUser.Id);
                _innerCustomers.Insert(0, new BusinessPartner { Id = 0, Name = string.Empty });
            }
        }

        private void LoadIsSalesUsers()
        { 
            using(var userService = SvcClientManager.GetSvcClient<UserServiceClient>(SvcType.UserSvc))
            {
                _Users = userService.GetIsSalesUsers(CurrentUser.Id);
                _Users.Insert(0, new User { Id = 0, Name = string.Empty });
            }
        }

        private void LoadUdf()
        {
            using (
              var contractUDFService =
                   SvcClientManager.GetSvcClient<ContractUDFServiceReference.ContractUDFServiceClient>(SvcType.ContractUDFSvc))
            {
                _udfs = contractUDFService.GetAll();
                if (_udfs != null && _udfs.Count > 0)
                {
                    List<ContractUDF> defualtList = _udfs.Where(c => c.IsDefault && !c.IsDeleted).ToList();
                    if (defualtList != null && defualtList.Count > 0)
                    {
                        ContractUDF defualtUDF = defualtList.FirstOrDefault();
                        SelectedUsdId = defualtUDF.Id;
                    }
                }
                _udfs.Insert(0, new ContractUDF { Id = 0, Name = string.Empty });
            }
        }

        private void LoadStatus()
        {
            StatusTypes = new Dictionary<string, int>();
            StatusTypes = EnumHelper.GetEnumDic<StatusType>(StatusTypes);
        }

        private void LoadCommodity()
        {
            using (var commService = SvcClientManager.GetSvcClient<CommodityServiceClient>(SvcType.CommoditySvc))
            {
                _commodities = commService.GetCommoditiesByUser(CurrentUser.Id);
            }
            _commodities.Insert(0, new Commodity { Id = 0, Name = string.Empty });
        }

        public void LoadCommodityType()
        {
            if (CommodityId != null && CommodityId != 0)
            {
                using (
                    var commodityTypeService =
                        SvcClientManager.GetSvcClient<CommodityTypeServiceClient>(SvcType.CommodityTypeSvc))
                {
                    const string str = "it.CommodityId = @p1";
                    var parameters = new List<object> { CommodityId };
                    CommodityTypes = commodityTypeService.Query(str, parameters);
                    if ((ObjectId != 0 || (ObjectId == 0 && _isSplit)) && _loadState)
                        return;
                    if (CommodityTypes.Count > 0)
                    {
                        CommodityTypeId = CommodityTypes[0].Id;
                    }
                    else
                    {
                        CommodityTypeId = null;
                        BrandId = null;
                        SpecificationId = null;
                    }
                }
            }
            else
            {
                CommodityTypes = new List<CommodityType>();
                Brands = new List<Brand>();
                Specifications = new List<Specification>();
            }
        }

        public void LoadBrandAndSpecification()
        {
            LoadBrand();
            LoadSpecification();
        }

        private void LoadBrand()
        {
            if (CommodityId != 0 && CommodityTypeId != null)
            {
                using (var brandService = SvcClientManager.GetSvcClient<BrandServiceClient>(SvcType.BrandSvc))
                {
                    const string str = "it.CommodityId = @p1 and it.CommodityTypeId = @p2";
                    var parameters = new List<object> { CommodityId, CommodityTypeId };
                    List<Brand> brands = brandService.Query(str, parameters).OrderBy(b => b.Name).ToList();
                    brands.Insert(0, new Brand());
                    if ((ObjectId != 0 || (ObjectId == 0 && _isSplit)) && _loadState && BrandId != null)
                    {
                        Brands = brands;
                        return;
                    }
                    if (brands.Count > 0)
                    {
                        BrandId = brands[0].Id;
                    }
                    else
                    {
                        BrandId = null;
                    }
                    Brands = brands;
                }
            }
            else
            {
                Brands = new List<Brand>();
            }
        }

        private void LoadSpecification()
        {
            if (CommodityId != 0 && CommodityTypeId != null)
            {
                using (
                    var specificationService =
                        SvcClientManager.GetSvcClient<SpecificationServiceClient>(SvcType.SpecificationSvc))
                {
                    const string str = "it.CommodityId = @p1 and it.CommodityTypeId = @p2";
                    var parameters = new List<object> { CommodityId, CommodityTypeId };
                    List<Specification> tempSpecifications = specificationService.Query(str, parameters).OrderBy(s => s.Name).ToList();
                    tempSpecifications.Insert(0, new Specification());
                    if ((ObjectId != 0 || (ObjectId == 0 && _isSplit)) && _loadState && SpecificationId != null)
                    {
                        Specifications = tempSpecifications;
                        _loadState = false;
                        return;
                    }

                    if (tempSpecifications.Count > 0)
                    {
                        SpecificationId = tempSpecifications[0].Id;
                    }
                    else
                    {
                        SpecificationId = null;
                    }
                    Specifications = tempSpecifications;
                }
            }
            else
            {
                Specifications = new List<Specification>();
            }
        }

        private void LoadPricingType()
        {
            PricingTypes = new Dictionary<string, int>();
            PricingTypes = EnumHelper.GetEnumDic<PricingType>(PricingTypes);
        }

        private void LoadPricingBasis()
        {
            PricingBasises = new Dictionary<string, int> { { "", 0 } };
            PricingBasises = EnumHelper.GetEnumDic<PricingBasis>(PricingBasises);
        }

        public void LoadPricingSide()
        {
            PricingSideTheir = false;
            PricingSideOwn = true;
        }

        public void LoadPricingSideByEdit()
        {
            if (!PricingSide.HasValue)
            {
                LoadPricingSide();
            }
            else
            {
                switch ((int)PricingSide)
                {
                    case 1:
                        PricingSideTheir = true;
                        PricingSideOwn = false;
                        break;
                    case 2:
                        PricingSideTheir = false;
                        PricingSideOwn = true;
                        break;
                }
            }
        }

        private void GetPricingSide()
        {
            if (PricingSideTheir)
            {
                PricingSide = (int)DBEntity.EnumEntity.PricingSide.TheirSide;
            }
            else if (PricingSideOwn)
            {
                PricingSide = (int)DBEntity.EnumEntity.PricingSide.OurSide;
            }
        }

        #endregion

        private void SetPaymentMean()
        {
            using (
                var paymentMeanService = SvcClientManager.GetSvcClient<PaymentMeanServiceClient>(SvcType.PaymentMeanSvc)
                )
            {
                PaymentMean = new Dictionary<string, int> { { "", 0 } };
                List<PaymentMean> paymentmeans = paymentMeanService.GetAll();
                foreach (PaymentMean paymentmean in paymentmeans)
                {
                    PaymentMean.Add(paymentmean.Name, paymentmean.Id);
                }
            }
        }


        private void LoadCurrency()
        {
            using (var currencyService = SvcClientManager.GetSvcClient<CurrencyServiceClient>(SvcType.CurrencySvc))
            {
                List<Currency> currencies = currencyService.GetAll();
                currencies.Insert(0, new Currency { Id = 0, Name = "" });
                Currencies = currencies;
            }
        }

        /// <summary>
        /// 根据币种返回兑换的汇率
        /// </summary>
        public void LoadRate(int currencyFrom, int currencyTo)
        {
            if (_startStatus)
            {
                _startStatus = !_startStatus;
                return;
            }
            if (currencyFrom != 0 && currencyTo != 0)
            {
                using (var rateService = SvcClientManager.GetSvcClient<RateServiceClient>(SvcType.RateSvc))
                {
                    decimal? rate = rateService.GetExchangeRate(currencyFrom, currencyTo, CurrentUser.Id);
                    SettlementRate = rate.HasValue ? rate : null;
                }
            }
            else
            {
                SettlementRate = null;
            }
        }

        public void LoadRate()
        {
            //if (TradeType == TradeType.ShortDomesticTrade)
            //{
            //内贸短单
            if (SelectPricingCurrencyId != 0)
            {
                int cnyCurrencyId = GetCNY();
                LoadRate(cnyCurrencyId, SelectPricingCurrencyId);
            }
            else
            {
                SettlementRate = null;
            }
            //}
        }

        #endregion

        private Contract GetContractById(int id)
        {
            var contract = new Contract();
            using (
                var contractService =
                    SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
            {
                const string str = "it.Id = @p1";
                var parameters = new List<object> { id };
                List<Contract> contracts = contractService.Select(str, parameters,
                                                                  new List<string>
                                                                      {
                                                                          "Quotas",
                                                                          "BusinessPartner",
                                                                          "InternalCustomer",
                                                                          "Quotas.Warehouse",
                                                                          "Quotas.Pricings",
                                                                          "Quotas.Commodity",
                                                                          "Quotas.CommodityType",
                                                                          "Quotas.Brand",
                                                                          "Quotas.Specification",
                                                                          "ContractUDF",
                                                                          "Quotas.QuotaBrandRels",
                                                                          "Quotas.QuotaBrandRels.Brand",
                                                                          "Quotas.QuotaBrandRels.Specification",
                                                                          "Quotas.QuotaBrandRels.Warehouse"
                                                                      });
                if (contracts.Count > 0)
                {
                    contract = contracts[0];
                }
            }
            return contract;
        }

        private void SetData(Contract contract)
        {
            _loadState = true;
            ObjectId = contract.Id;
            ContractNo = contract.ContractNo;
            ExContractNo = contract.ExContractNo;
            SignDate = contract.SignDate;
            QtyLimit = contract.QtyLimit;
            SupplierId = contract.BPId;
            SupplierName = contract.BusinessPartner == null ? string.Empty : contract.BusinessPartner.ShortName;
            SelectedInternalCustomerId = contract.InternalCustomerId ?? 0;
            InternalCustomerName = contract.InternalCustomer == null ? string.Empty : contract.InternalCustomer.ShortName;
            Description = contract.Description;
            SelectedUsdId = contract.UDFId;
            PayBankAccountId = contract.BankAccountId;
            IsNeedAutoGenerated = contract.IsNeedAutoGenerated == null ? false : contract.IsNeedAutoGenerated.Value;
            SelectedUserId = contract.Sales ?? 0;
            if(contract.Sales.HasValue)
            {
                if (!_Users.Select(c => c.Id).Contains(contract.Sales.Value))
                {
                     using(var userService = SvcClientManager.GetSvcClient<UserServiceClient>(SvcType.UserSvc))
                     {
                         User user = userService.GetById(contract.Sales.Value);
                         _Users.Add(user);
                     }
                }
            }
            if (contract.Quotas != null && contract.Quotas.Count > 0)
            {
                Quota quota = contract.Quotas[0];

                if(quota.RelQuotaId.HasValue)
                {
                    using (var quotaService = SvcClientManager.GetSvcClient<QuotaServiceClient>(SvcType.QuotaSvc))
                    {
                        string queryStr = "it.Id = @p1";
                        var parameters = new List<object> { quota.RelQuotaId.Value };
                        Quota relQuota = quotaService.Select(queryStr, parameters, new List<string> { "Contract"}).FirstOrDefault();

                        if(relQuota != null)
                        {
                            AutoContractNo = relQuota.Contract.ContractNo;
                        }
                    }
                }
                QuotaId = quota.Id;
                Quantity = quota.Quantity;
                ApproveStatus = quota.ApproveStatus;
                FinanceStatus = quota.FinanceStatus ? 1 : 0;
                DeliveryStatus = quota.DeliveryStatus ? 1 : 0;
                CommodityId = quota.CommodityId;
                _oldQuotaNo = quota.QuotaNo;
                ExQuotaNo = quota.ExQuotaNo;
                CommodityTypeId = quota.CommodityTypeId;
                BrandId = quota.BrandId;
                SpecificationId = quota.SpecificationId;
                SelectPricingType = quota.PricingType;
                SelectPricingBasis = quota.PricingBasis ?? 0;
                PricingStartDate = quota.PricingStartDate;
                PricingEndDate = quota.PricingEndDate;
                PricingSide = quota.PricingSide;
                Premium = quota.Premium;
                SelectPricingCurrencyId = quota.PricingCurrencyId ?? 0;
                ShipTerm = quota.ShipTerm;
                AllQuotaBrandRelList = quota.QuotaBrandRels.Where(c => c.IsDeleted == false).ToList();
                //SettlementRate = quota.SettlementRate;
                if (quota.Warehouse != null)
                {
                    WarehouseId = quota.WarehouseId;
                    WarehouseName = quota.Warehouse.Name;
                }
                DeliveryDate = quota.DeliveryDate;
                if (contract.TradeType == (int)TradeType.ShortDomesticTrade)
                {
                    VATInvoiceDate = quota.VATInvoiceDate;
                }
                if (quota.PricingType == (int)PricingType.Fixed)
                {
                    Pricing firstOrDefault = quota.Pricings.FirstOrDefault();
                    if (firstOrDefault != null)
                    {
                        Price = firstOrDefault.FinalPrice;
                        //获取固定点价的汇率
                        //if (TradeType == TradeType.ShortDomesticTrade)
                        //{
                        //汇率
                        SettlementRate = firstOrDefault.ExchangeRate;
                        //}
                    }
                }
                else
                {
                    //if (TradeType == DBEntity.EnumEntity.TradeType.LongDomesticTrade || TradeType == DBEntity.EnumEntity.TradeType.ShortDomesticTrade)
                    //{
                        Price = quota.TempPrice;
                    //}
                }
                SelectPricingCurrencyId = quota.PricingCurrencyId ?? 0;
                SelectPaymentMeanId = quota.PaymentMeanId ?? 0;
                LoadRelQuota(quota.Id);
            }

            LoadPricingSideByEdit();

        }

        private void LoadRelQuota(int id)
        {
            if (ContractType == ContractType.Purchase)
            {
                using (var quotaService = SvcClientManager.GetSvcClient<QuotaServiceClient>(SvcType.QuotaSvc))
                {
                    List<Quota> quotas = quotaService.SelectWithMultiOrderLazyLoad(
                        "it.RelQuotaId == " + id + " and it.Contract.ContractType == " + (int)ContractType + " and it.Contract.TradeType == " + (int)TradeType.ShortDomesticTrade, null, 
                        new List<SortCol>
                        {
                            new SortCol() { ColName = "RelQuotaStage", ByDescending = false }
                        }, 
                        new List<string>() { "Contract", "Contract.InternalCustomer" },
                        null).ToList();
                    if (quotas.Count > 0)
                    {
                        foreach (Quota quota in quotas)
                        {
                            var rel = new RelQuota
                                               {
                                                   BusinessParnterId = quota.Contract.InternalCustomerId.Value,
                                                   BusinessParnterName = quota.Contract.InternalCustomer.ShortName,
                                                   Price = quota.RelPrice,
                                                   QuotaStage = quota.RelQuotaStage.Value,
                                                   SignDate = quota.Contract.SignDate.Value,
                                                   VATInvoiceDate = quota.VATInvoiceDate
                                               };
                            RelQuotas.Add(rel);
                        }
                    }
                }
            }
        }

        public void CloneData(Contract contract)
        {
            ExContractNo = contract.ExContractNo;
            SupplierId = contract.InternalCustomerId;
            SupplierName = contract.InternalCustomer.ShortName;
            SelectedInternalCustomerId = contract.BPId ?? 0;
            InternalCustomerName = contract.BusinessPartner.ShortName;
            Description = contract.Description;
            SelectedUsdId = contract.UDFId;
            QtyLimit = contract.QtyLimit;
            PayBankAccountId = contract.BankAccountId;
            IsNeedAutoGenerated = contract.IsNeedAutoGenerated == null ? false : contract.IsNeedAutoGenerated.Value;
            SelectedUserId = contract.Sales ?? 0;

            if (contract.Quotas != null && contract.Quotas.Count > 0)
            {
                Quota quota = contract.Quotas[0];
                FilterDeleted(quota.QuotaBrandRels);

                QuotaId = quota.Id;
                Quantity = quota.Quantity;
                CommodityId = quota.CommodityId;
                ExQuotaNo = quota.ExQuotaNo;
                CommodityTypeId = quota.CommodityTypeId;
                BrandId = quota.BrandId;
                SpecificationId = quota.SpecificationId;
                SelectPricingType = quota.PricingType;
                SelectPricingBasis = quota.PricingBasis ?? 0;
                PricingStartDate = quota.PricingStartDate;
                PricingEndDate = quota.PricingEndDate;
                PricingSide = quota.PricingSide;
                Premium = quota.Premium;
                SelectPricingCurrencyId = quota.PricingCurrencyId ?? 0;
                ShipTerm = quota.ShipTerm;
                AllQuotaBrandRelList = quota.QuotaBrandRels.ToList();

            }
        }

        private int GetCNY()
        {
            using (var currencyService = SvcClientManager.GetSvcClient<CurrencyServiceClient>(SvcType.CurrencySvc))
            {
                Currency currency = currencyService.GetCurrencyByCode("CNY");
                if (currency != null)
                {
                    return currency.Id;
                }

                throw new Exception(ResContract.CNYNotFound);
            }
        }

        /// <summary>
        /// 新增
        /// </summary>
        protected override void Create()
        {
            GetPricingSide();
            using (
                var contractService =
                    SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
            {
                Quota quota = GetSaveQuota();
                quota.IsDraft = IsSaveAsDraft;
                if (AddQuotas == null)
                {
                    AddQuotas = new List<Quota>();
                }
                AddQuotas.Add(quota);
                if (TradeType == TradeType.ShortDomesticTrade)
                {
                    //内贸短单(未开票)
                    quota.VATStatus = (int)QuotaVATStatus.NotAtAll;
                }
                int? a = QtyLimit == null ? 0 : Convert.ToInt32(QtyLimit);
                var contract = new Contract
                    {
                        ContractNo = ContractNo,
                        ExContractNo = ExContractNo,
                        SignDate = SignDate,
                        BPId = SupplierId ?? 0,
                        InternalCustomerId = SelectedInternalCustomerId,
                        Description = Description,
                        TradeType = (int)TradeType,
                        ContractType = (int)ContractType,
                        IsDraft = IsSaveAsDraft,
                        AutoContractNo = AutoContractNo,
                        QtyLimit = a == 0 ? null : a,
                        UDFId = (SelectedUsdId == 0 ? null : SelectedUsdId),
                        IsNeedAutoGenerated = IsNeedAutoGenerated,
                        BankAccountId = PayBankAccountId == 0 ? null : PayBankAccountId,
                        Sales = (SelectedUserId == 0 ? null : SelectedUserId)
                    };
                contractService.CreateDocument(CurrentUser.Id, contract, AddQuotas, AddAttachments, RelQuotas, GroupId);
            }
        }

        /// <summary>
        /// 获取批次的信息
        /// </summary>
        /// <returns></returns>
        private Quota GetSaveQuota()
        {
            if (SelectPaymentMeanId.HasValue && SelectPaymentMeanId.Value == 0)
            {
                SelectPaymentMeanId = null;
            }
            var quota = new Quota
                            {
                                Quantity = Quantity,
                                ApproveStatus = ApproveStatus,
                                FinanceStatus = FinanceStatus == 1,
                                DeliveryStatus = DeliveryStatus == 1,
                                ImplementedDate = SignDate,
                                CommodityId = CommodityId ?? 0,
                                CommodityTypeId = CommodityTypeId ?? 0,
                                BrandId = BrandId ?? 0,
                                SpecificationId = SpecificationId ?? 0,
                                PricingType = SelectPricingType,
                                PricingStartDate = PricingStartDate,
                                PricingEndDate = PricingEndDate,
                                PricingSide = PricingSide ?? 0,
                                Premium = Premium,
                                Price = Price ?? 0,
                                PricingCurrencyId = SelectPricingCurrencyId,
                                WarehouseId = WarehouseId,
                                DeliveryDate = DeliveryDate,
                                ShipTerm = ShipTerm,
                                ExQuotaNo = ExQuotaNo,
                                VATInvoiceDate = VATInvoiceDate,
                                PaymentMeanId = SelectPaymentMeanId,
                                AutoQuotaNo = AutoContractNo//短单的对手批次号默认等于短单的对手合同号
                            };
            if (SelectPricingBasis != 0)
            {
                quota.PricingBasis = SelectPricingBasis;
            }
            quota.SettlementRate = SelectPricingType == (int)PricingType.Fixed ? SettlementRate : null;
            //多品牌
            quota.QuotaBrandRels.Clear();
            foreach (QuotaBrandRel brandRel in AllQuotaBrandRelList)
            {
                var newBrandRel = new QuotaBrandRel
                {
                    BrandId = brandRel.BrandId,
                    Id = brandRel.Id,
                    SpecificationId = (brandRel.SpecificationId == null || brandRel.SpecificationId.Value <= 0) ? null : brandRel.SpecificationId,
                    IsDeleted = brandRel.IsDeleted,
                    Quantity = brandRel.Quantity,
                    Price = brandRel.Price,
                    WarehouseId = brandRel.WarehouseId
                };
                quota.QuotaBrandRels.Add(newBrandRel);
            }

            return quota;
        }

        /// <summary>
        /// 修改合同
        /// </summary>
        protected override void Update()
        {
            GetPricingSide();
            using (
                var contractService =
                    SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
            {
                Quota quota = GetSaveQuota();
                quota.Id = QuotaId;
                quota.IsDraft = IsSaveAsDraft;
                quota.QuotaNo = _oldQuotaNo;
                quota.ExQuotaNo = ExQuotaNo;
                if (UpdateQuotas == null)
                {
                    UpdateQuotas = new List<Quota>();
                }
                UpdateQuotas.Add(quota);
                int? a = QtyLimit == null ? 0 : Convert.ToInt32(QtyLimit);
                var contract = new Contract
                    {
                        Id = ObjectId,
                        ContractNo = ContractNo,
                        ExContractNo = ExContractNo,
                        SignDate = SignDate,
                        BPId = SupplierId ?? 0,
                        InternalCustomerId = SelectedInternalCustomerId,
                        Description = Description,
                        TradeType = (int)TradeType,
                        ContractType = (int)ContractType,
                        IsDraft = IsSaveAsDraft,
                        AutoContractNo = AutoContractNo,
                        QtyLimit = a == 0 ? null : a,
                        UDFId = (SelectedUsdId == 0 ? null : SelectedUsdId),
                        IsNeedAutoGenerated = IsNeedAutoGenerated,
                        BankAccountId = PayBankAccountId == 0 ? null : PayBankAccountId,
                        Sales = (SelectedUserId == 0 ? null : SelectedUserId)
                    };
                contractService.UpdateDocument(CurrentUser.Id, contract, AddQuotas, UpdateQuotas, DeleteQuotas,
                                               AddAttachments, DeleteAttachments, RelQuotas, GroupId);
            }
        }

        /// <summary>
        /// 数据验证
        /// </summary>
        /// <returns></returns>
        public override bool Validate()
        {
            //if (ContractType == DBEntity.EnumEntity.ContractType.Sales && (TradeType == DBEntity.EnumEntity.TradeType.LongDomesticTrade || TradeType == DBEntity.EnumEntity.TradeType.ShortDomesticTrade))
            //{
            //    if (PayBankAccountId == null || PayBankAccountId <= 0)
            //    {
            //        System.Windows.Forms.DialogResult dr = System.Windows.Forms.MessageBox.Show("未选择银行账号，确定保存吗?", "", System.Windows.Forms.MessageBoxButtons.OKCancel);
            //        if (dr == System.Windows.Forms.DialogResult.Cancel)
            //        {
            //            return;
            //        }
            //    }
            //}

            if (QtyLimit.HasValue)
            {
                Regex reg = new Regex("^-?\\d+$");
                if (!reg.IsMatch(QtyLimit.Value.ToString()))
                {
                    throw new Exception("数量上下浮请输入整数");
                }
            }
            if (!Quantity.HasValue)
            {
                throw new Exception(ResContract.QuantityNotNull);
            }
            if (!SignDate.HasValue)
            {
                throw new Exception(ResContract.SignDateRequired);
            }
            if (!SupplierId.HasValue)
            {
                throw new Exception(ResContract.SupplierRequired);
            }
            if (SelectedInternalCustomerId == 0)
            {
                throw new Exception(Properties.Resources.SignSideRequired);
            }
            if (SupplierId.Value == SelectedInternalCustomerId)
            {
                if (ContractType == DBEntity.EnumEntity.ContractType.Purchase)
                {
                    throw new Exception("供应商和签署方不能相同");
                }
                else
                {
                    throw new Exception("采购商和签署方不能相同");
                }
            }
            if (!CommodityId.HasValue)
            {
                throw new Exception(Properties.Resources.CommodityNotNull);
            }
            if (!CommodityTypeId.HasValue)
            {
                throw new Exception(Properties.Resources.CommodityTypeRequired);
            }
            if (SelectPricingType == 0)
            {
                throw new Exception(ResContract.PricingTypeNotNull);
            }
            if (SelectPricingCurrencyId == 0)
            {
                throw new Exception(ResContract.PricingCurrencyNotNull);
            }
            if (SelectPricingType == (int)PricingType.Average)
            {
                if (TradeType == DBEntity.EnumEntity.TradeType.LongDomesticTrade || TradeType == DBEntity.EnumEntity.TradeType.ShortDomesticTrade)
                {
                    if (!Price.HasValue)
                    {
                        throw new Exception(Properties.Resources.PriceNotNull);
                    }
                }
                if (SelectPricingBasis == 0)
                {
                    throw new Exception(ResContract.PricingRefNotNull);
                }
                if (!PricingStartDate.HasValue)
                {
                    throw new Exception(ResContract.PricingStartDateNotNull);
                }
                if (!PricingEndDate.HasValue)
                {
                    throw new Exception(ResContract.PricingEndDateNotNull);
                }
                if(PricingStartDate.Value > PricingEndDate.Value)
                {
                    throw new Exception("点价开始日期不能大于点价结束日期");
                }
            }
            else if (SelectPricingType == (int)PricingType.Manual)
            {
                if (TradeType == DBEntity.EnumEntity.TradeType.LongDomesticTrade || TradeType == DBEntity.EnumEntity.TradeType.ShortDomesticTrade)
                {
                    if (!Price.HasValue)
                    {
                        throw new Exception(Properties.Resources.PriceNotNull);
                    }
                }
                if (SelectPricingBasis == 0)
                {
                    throw new Exception(ResContract.PricingRefNotNull);
                }
                if (!PricingStartDate.HasValue)
                {
                    throw new Exception(ResContract.PricingStartDateNotNull);
                }
                if (!PricingEndDate.HasValue)
                {
                    throw new Exception(ResContract.PricingEndDateNotNull);
                }
                if (PricingStartDate.Value > PricingEndDate.Value)
                {
                    throw new Exception("点价开始日期不能大于点价结束日期");
                }
                if (!Premium.HasValue)
                {
                    throw new Exception(ResContract.PremiumNotNull);
                }
            }
            else if (SelectPricingType == (int)PricingType.Fixed)
            {
                //固定价点价
                if (!Price.HasValue)
                {
                    throw new Exception(Properties.Resources.PriceNotNull);
                }
                //if (TradeType == TradeType.ShortDomesticTrade)
                //{
                if (!SettlementRate.HasValue)
                {
                    throw new Exception(Properties.Resources.ExchangeRateNotNull);
                }
                //}
            }

            if (!string.IsNullOrEmpty(ContractNo))
            {
                using (var contractService = SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
                {
                    string queryStr = "it.ContractNo = @p1";
                    var parameters = new List<object> { ContractNo };
                    List<Contract> contractList = contractService.Select(queryStr, parameters, new List<string> { "Quotas"});
                    List<Contract> resultContractList = new List<Contract>();
                    foreach(Contract contract in contractList)
                    {
                        if(!contract.Quotas.FirstOrDefault().IsAutoGenerated)
                        {
                            resultContractList.Add(contract);
                        }
                    }

                    if (resultContractList != null && resultContractList.Count > 0)
                    {
                        if (ObjectId <= 0)
                        {
                            //if (System.Windows.MessageBox.Show("系统中已经存在相同合同号的数据，是否继续保存？", "提示", MessageBoxButton.OKCancel) == MessageBoxResult.Cancel)
                            //{
                            //    return false;
                            //}
                            throw new Exception("系统中已经存在相同合同号的数据");
                        }
                        else
                        {
                            if (resultContractList.Select(c => c.Id).Contains(ObjectId))
                            {
                                if (resultContractList.Count > 1)
                                {
                                    //if (System.Windows.MessageBox.Show("系统中已经存在相同合同号的数据，是否继续保存？", "提示", MessageBoxButton.OKCancel) == MessageBoxResult.Cancel)
                                    //{
                                    //    return false;
                                    //}
                                    throw new Exception("系统中已经存在相同合同号的数据");
                                }
                            }
                        }
                    }
                }
            }

            return true;
        }

        #region 附件操作

        private int GetDocumentId(string code)
        {
            int id;
            using (var documentService = SvcClientManager.GetSvcClient<DocumentServiceClient>(SvcType.DocumentSvc))
            {
                id = documentService.GetByTableCode(code).Id;
            }
            return id;
        }

        /// <summary>
        /// 加载附件列表
        /// </summary>
        public void LoadAttachments()
        {

            //点编辑的时候
            if (ObjectId != 0)
            {
                //int id = GetDocumentId("Contract");
                const int documentType = (int)DocumentType.Contract;
                using (
                    var attachmentService = SvcClientManager.GetSvcClient<AttachmentServiceClient>(SvcType.AttachmentSvc)
                    )
                {
                    const string queryStr = "it.RecordId = @p1 and it.DocumentId= @p2";
                    var parameters = new List<object> { ObjectId, documentType };
                    _attachments = attachmentService.Query(queryStr, parameters);
                    Attachments = attachmentService.ChangeAttachmentName(_attachments);
                }
            }
        }

        /// <summary>
        /// 新增附件
        /// </summary>
        /// <param name="attachment"></param>
        public void AddAttachment(Attachment attachment)
        {
            if (Attachments == null)
                Attachments = new List<Attachment>();
            if (AddAttachments == null)
                AddAttachments = new List<Attachment>();
            int did = GetDocumentId("Contract");
            attachment.DocumentId = did;
            int id = -GetMaxNum();
            attachment.Id = id;
            _attachments.Add(attachment);
            using (var attachmentService = SvcClientManager.GetSvcClient<AttachmentServiceClient>(SvcType.AttachmentSvc))
            {
                Attachments = attachmentService.ChangeAttachmentName(_attachments);
            }
            AddAttachments.Add(attachment);
        }

        /// <summary>
        /// 给新增的附件一个id值，方便删除操作定位
        /// </summary>
        /// <returns></returns>
        private int GetMaxNum()
        {
            if (Attachments.Count == 0)
                return 1;
            IEnumerable<int> query = from attachment in Attachments select Math.Abs(attachment.Id);
            int num = query.Max() + 1;
            return num;
        }

        /// <summary>
        /// 删除附件
        /// </summary>
        /// <param name="deleteId"></param>
        public void RemoveAttachment(int deleteId)
        {
            Attachment attachment = GetAttachmentById(deleteId, Attachments);
            if (attachment != null)
            {
                Attachments.Remove(attachment);
                if (Attachments.Count == 0)
                    Attachments = null;
            }

            Attachment addattachment = GetAttachmentById(deleteId, AddAttachments);
            {
                if (addattachment != null)
                {
                    //如果是新增的附件
                    AddAttachments.Remove(addattachment);
                    if (AddAttachments.Count == 0)
                        AddAttachments = null;
                }
                else
                {
                    //增加到删除列表里
                    if (DeleteAttachments == null)
                    {
                        DeleteAttachments = new List<Attachment>();
                    }
                    DeleteAttachments.Add(attachment);
                }
            }
        }

        /// <summary>
        /// 根据id获取附件
        /// </summary>
        /// <param name="id"></param>
        /// <param name="atts"> </param>
        /// <returns></returns>
        public Attachment GetAttachmentById(int id, List<Attachment> atts)
        {
            if (atts == null)
                return null;
            return atts.FirstOrDefault(attachment => attachment.Id == id);
        }



        #endregion

        #region 加载合同批次页面的控件的enable属性

        private void LoadDocumentEnableProperty(int id)
        {
            if (id <= 0)
            {
                IsBPEnable = true;
                IsSignBPEnable = true;
                IsSignDateEnable = true;
                IsRelTransactionNewBtnEnable = true;
                IsRelTransactionDeleteBtnEnable = true;
                IsRelTransactionEditBtnEnable = true;
            }
            else
            {
                using (var contractService =
                    SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
                {
                    ContractEnableProperty cep = contractService.SetElementsEnableProperty(id);

                    IsBPEnable = cep.IsBPEnable;
                    IsSignBPEnable = cep.IsSignBPEnable;
                    IsSignDateEnable = cep.IsSignDateEnable;
                    IsRelTransactionNewBtnEnable = cep.IsRelTransactionNewBtnEnable;
                    IsRelTransactionEditBtnEnable = cep.IsRelTransactionEditBtnEnable;
                    IsRelTransactionDeleteBtnEnable = cep.IsRelTransactionDeleteBtnEnable;
                }
            }
        }

        private void LoadDocumentLineEnableProperty(int id)
        {
            if (id <= 0)
            {
                IsPriceEnable = true;
                IsQuantityEnable = true;
                IsPricingBasisEnable = true;
                IsPricingStartDateEnable = true;
                IsPricingEndDateEnable = true;
                IsCommodityEnable = true;
                IsPremiumEnable = true;
                IsPricingTypeEnable = true;
            }
            else
            {
                using (var quotaService =
                    SvcClientManager.GetSvcClient<QuotaServiceClient>(SvcType.QuotaSvc))
                {
                    QuotaEnableProperty qep = quotaService.SetElementsEnableProperty(id);
                    IsCommodityEnable = qep.IsCommodityEnable;
                    IsPremiumEnable = qep.IsPremiumEnable;
                    IsPriceEnable = qep.IsPriceEnable;
                    IsPricingBasisEnable = qep.IsPricingBasisEnable;
                    IsPricingEndDateEnable = qep.IsPricingEndDateEnable;
                    IsPricingStartDateEnable = qep.IsPricingStartDateEnable;
                    IsQuantityEnable = qep.IsQuantityEnable;
                    IsPricingTypeEnable = qep.IsPricingTypeEnable;
                }
            }
        }

        #endregion

        #region 根据点价基准获取价格币种

        public void SetCurrencyByPricingBasis()
        {
            if (SelectPricingBasis != 0 && SelectPricingType != (int)PricingType.Fixed)
            {
                using (var pricingService = SvcClientManager.GetSvcClient<PricingServiceClient>(SvcType.PricingSvc))
                {
                    if (SelectPricingBasis != 0)
                    {
                        var pb = (PricingBasis)SelectPricingBasis;
                        SelectPricingCurrencyId = pricingService.GetCurrencyByPricingBasis(pb).Id;
                    }
                }
            }
        }

        #endregion

        #region 新增多品牌验证
        public void UpdateBrandRelByPricingType()
        {
            if (AllQuotaBrandRelList.Count > 0)
            {
                var list = AllQuotaBrandRelList.Where(brandRel => !brandRel.IsDeleted).ToList();
                foreach (QuotaBrandRel brandRel in list)
                {
                    AllQuotaBrandRelList.Remove(brandRel);
                    if (brandRel.Id > 0)
                    {
                        var newBrandRel = new QuotaBrandRel
                        {
                            Id = brandRel.Id,
                            BrandId = brandRel.BrandId,
                            SpecificationId = brandRel.SpecificationId,
                            Quantity = brandRel.Quantity,
                            Price = brandRel.Price,
                            WarehouseId = brandRel.WarehouseId,
                            IsDeleted = true
                        };
                        AllQuotaBrandRelList.Add(newBrandRel);
                    }
                    else
                    {
                        AddQuotaBrandRelList.Remove(brandRel);
                    }
                }
            }
        }

        public void DeleteQuotaBrandRel(int quotaBrandRelID)
        {
            if (AllQuotaBrandRelList.Count > 0)
            {
                List<QuotaBrandRel> quotaBrandRelList = AllQuotaBrandRelList.Where(c => c.Id == quotaBrandRelID).ToList();
                if (quotaBrandRelList.Count > 0)
                {
                    QuotaBrandRel brandRel = quotaBrandRelList[0];
                    AllQuotaBrandRelList.Remove(brandRel);
                    if (quotaBrandRelID > 0)
                    {
                        var newBrandRel = new QuotaBrandRel
                        {
                            Id = brandRel.Id,
                            BrandId = brandRel.BrandId,
                            SpecificationId = brandRel.SpecificationId,
                            Quantity = brandRel.Quantity,
                            Price = brandRel.Price,
                            WarehouseId = brandRel.WarehouseId,
                            IsDeleted = true
                        };
                        AllQuotaBrandRelList.Add(newBrandRel);
                    }
                    else
                    {
                        AddQuotaBrandRelList.Remove(brandRel);
                    }
                }
            }
        }

        public void UpdateQty()
        {
            decimal qty = 0;
            if (AllQuotaBrandRelList.Count > 0)
            {
                qty += AllQuotaBrandRelList.Where(brandRel => !brandRel.IsDeleted).Sum(brandRel => brandRel.Quantity ?? 0);
                Quantity = Convert.ToDecimal(string.Format("{0:#,##0.0000}", qty));
            }
            //Quantity = Convert.ToDecimal(string.Format("{0:#,##0.0000}", qty));
        }

        public void UpdatePrice()
        {
            if (AllQuotaBrandRelList.Count > 0)
            {
                using (var quotaService = SvcClientManager.GetSvcClient<QuotaServiceClient>(SvcType.QuotaSvc))
                {
                     Price = quotaService.GetAvgPrice(AllQuotaBrandRelList);
                }
            }
            //else
            //{
            //    Price = null;
            //}
        }

        public bool ValidateBrands()
        {
            if (!CommodityId.HasValue)
            {
                throw new Exception(Properties.Resources.CommodityNotNull);
            }

            if (!CommodityTypeId.HasValue)
            {
                throw new Exception(Properties.Resources.CommodityTypeRequired);
            }
            return true;
        }
        #endregion

        public void AddRelQuota(RelQuota relQuota)
        {
            //RelQuotas
            RelQuotas.Add(relQuota);
            SetRelQuotaStage();
        }

        public void DeleteRelQuota(int id)
        {
            RelQuotas.RemoveAt(id - 1);
            SetRelQuotaStage();
        }

        private void SetRelQuotaStage()
        {
            if (RelQuotas.Count > 0)
            {
                for (int i = 0; i < RelQuotas.Count; i++)
                {
                    RelQuotas[i].QuotaStage = i + 1;
                }
            }
        }

        public RelQuota GetRelQuotaByStage(int stage)
        {
            RelQuota rel = null;
            if (RelQuotas != null && RelQuotas.Count > 0)
            {
                rel = RelQuotas.FirstOrDefault(o => o.QuotaStage == stage);
            }
            return rel;
        }

        public bool RelQuotaCanBeDelete(int stage)
        {
            bool flag = false;

            int maxStage = RelQuotas.Max(o => o.QuotaStage);
            if (stage == maxStage)
            {
                //最后一个
                using (var contractService = SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
                {
                    flag = contractService.RelQuotaCanBeDelete(CurrentUser.Id, stage, ObjectId);
                }
            }
            
            return flag;
        }

        public bool IsPopupContraryDocumentNoEmptyInfo()
        {
            if (TradeType == TradeType.LongDomesticTrade || TradeType == TradeType.ShortDomesticTrade)
                return false;
            using (var busService = SvcClientManager.GetSvcClient<BusinessPartnerServiceClient>(SvcType.BusinessPartnerSvc))
            {
                BusinessPartner bp = busService.SelectById(null, SupplierId ?? 0);
                if (bp != null && bp.CustomerType == (int)BusinessPartnerType.InternalCustomer)
                {
                    if (string.IsNullOrEmpty(AutoContractNo))
                    {
                        return true;
                    }
                }
                return false;
            }
        }
        #endregion
    }
}
