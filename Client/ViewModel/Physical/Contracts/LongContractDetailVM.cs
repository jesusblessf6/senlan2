using System;
using System.Collections.Generic;
using System.Linq;
using Client.AttachmentServiceReference;
using Client.Base.BaseClientVM;
using Client.BusinessPartnerServiceReference;
using Client.ContractServiceReference;
using Client.DocumentServiceReference;
using Client.QuotaServiceReference;
using Client.View.Physical.Contracts;
using DBEntity;
using DBEntity.EnableProperty;
using DBEntity.EnumEntity;
using Utility.ServiceManagement;
using System.Windows;
using System.Text.RegularExpressions;
using Client.BankAccountServiceReference;
using Client.UserServiceReference;

namespace Client.ViewModel.Physical.Contracts
{
    public class LongContractDetailVM : ObjectBaseVM
    {
        #region Member

        private string _contractNo;
        private string _exContractNo;
        private string _description;
        private int? _internalCustomerId;
        private string _internalCustomerName;
        private DateTime? _signDate;
        private int? _supplierId;
        private string _supplierName;

        private List<Quota> _addQuotas;
        private List<Quota> _updateQuotas;
        private List<Quota> _deleteQuotas;
        private List<Quota> _quotas;
        private List<ContractUDF> _udfs;
        private int? _selectedUsdId;

        private List<Attachment> _addAttachments;
        private List<Attachment> _deleteAttachments;
        private List<Attachment> _attachments;

        private List<BusinessPartner> _internalCustomers;
        private int _selectedInternalCustomerId;
        private string _AutoContractNo;
        private string _IsAutoNoVisible;
        private decimal? _QtyLimit;
        private bool _IsNeedAutoGenerated = true;
        private string _IsNeedAutoVisible;
        private List<BankAccount> _PayBankAccounts;
        private int? _PayBankAccountId;
        private List<User> _Users;
        private int? _selectedUserId;
        #endregion

        #region Property
        public int? SelectedUserId
        {
            get { return _selectedUserId; }
            set
            {
                if (_selectedUserId != value)
                {
                    _selectedUserId = value;
                    Notify("SelectedUserId");
                }
            }
        }

        public List<User> Users
        {
            get { return _Users; }
            set
            {
                if (_Users != value)
                {
                    _Users = value;
                    Notify("Users");
                }
            }
        }

        public int? PayBankAccountId
        {
            get { return _PayBankAccountId; }
            set
            {
                if (_PayBankAccountId != value)
                {
                    _PayBankAccountId = value;
                    Notify("PayBankAccountId");
                }
            }
        }

        public List<BankAccount> PayBankAccounts
        {
            get { return _PayBankAccounts; }
            set
            {
                if (_PayBankAccounts != value)
                {
                    _PayBankAccounts = value;
                    Notify("PayBankAccounts");
                }
            }
        }
        public string IsNeedAutoVisible
        {
            get { return _IsNeedAutoVisible; }
            set
            {
                if (_IsNeedAutoVisible != value)
                {
                    _IsNeedAutoVisible = value;
                    Notify("IsNeedAutoVisible");
                }
            }
        }

        public bool IsNeedAutoGenerated
        {
            get { return _IsNeedAutoGenerated; }
            set
            {
                if (_IsNeedAutoGenerated != value)
                {
                    _IsNeedAutoGenerated = value;
                    Notify("IsNeedAutoGenerated");
                }
            }
        }

        public decimal? QtyLimit
        {
            get { return _QtyLimit; }
            set
            {
                if (_QtyLimit != value)
                {
                    _QtyLimit = value;
                    Notify("QtyLimit");
                }
            }
        }

        public string IsAutoNoVisible
        {
            get { return _IsAutoNoVisible; }
            set
            {
                if (_IsAutoNoVisible != value)
                {
                    _IsAutoNoVisible = value;
                    Notify("IsAutoNoVisible");
                }
            }
        }

        public string AutoContractNo
        {
            get { return _AutoContractNo; }
            set {
                if(_AutoContractNo != value)
                {
                    _AutoContractNo = value;
                    Notify("AutoContractNo");
                }
            }
        }

        public TradeType TradeType { get; set; }
        public ContractType ContractType { get; set; }

        public List<Quota> AddQuotas
        {
            get { return _addQuotas; }
            set
            {
                if (_addQuotas != value)
                {
                    _addQuotas = value;
                    Notify("AddQuotas");
                }
            }
        }

        public List<Quota> UpdateQuotas
        {
            get { return _updateQuotas; }
            set
            {
                if (_updateQuotas != value)
                {
                    _updateQuotas = value;
                    Notify("UpdateQuotas");
                }
            }
        }

        public List<Quota> DeleteQuotas
        {
            get { return _deleteQuotas; }
            set
            {
                if (_deleteQuotas != value)
                {
                    _deleteQuotas = value;
                    Notify("DeleteQuotas");
                }
            }
        }

        public List<Quota> Quotas
        {
            get { return _quotas; }
            set
            {
                if (_quotas != value)
                {
                    _quotas = value;
                    Notify("Quotas");
                }
            }
        }

        public List<ContractUDF> Udfs
        {
            get { return _udfs; }
            set
            {
                if (_udfs != value)
                {
                    _udfs = value;
                    Notify("Udfs");
                }
            }
        }

        public List<Attachment> AddAttachments
        {
            get { return _addAttachments; }
            set
            {
                if (_addAttachments != value)
                {
                    _addAttachments = value;
                    Notify("AddAttachments");
                }
            }
        }

        public List<Attachment> DeleteAttachments
        {
            get { return _deleteAttachments; }
            set
            {
                if (_deleteAttachments != value)
                {
                    _deleteAttachments = value;
                    Notify("DeleteAttachments");
                }
            }
        }

        /// <summary>
        /// 附件列表
        /// </summary>
        public List<Attachment> Attachments
        {
            get { return _attachments; }
            set
            {
                if (_attachments != value)
                {
                    _attachments = value;
                    Notify("Attachments");
                }
            }
        }

        public int? SupplierId
        {
            get { return _supplierId; }
            set
            {
                if (_supplierId != value)
                {
                    _supplierId = value;
                    Notify("SupplierId");
                }
            }
        }

        public string SupplierName
        {
            get { return _supplierName; }
            set
            {
                if (_supplierName != value)
                {
                    _supplierName = value;
                    Notify("SupplierName");
                }
            }
        }

        public int? InternalCustomerId
        {
            get { return _internalCustomerId; }
            set
            {
                if (_internalCustomerId != value)
                {
                    _internalCustomerId = value;
                    Notify("InternalCustomerId");
                }
            }
        }

        public string InternalCustomerName
        {
            get { return _internalCustomerName; }
            set
            {
                if (_internalCustomerName != value)
                {
                    _internalCustomerName = value;
                    Notify("InternalCustomerName");
                }
            }
        }
        public string ExContractNo
        {
            get { return _exContractNo; }
            set
            {
                if (_exContractNo != value)
                {
                    _exContractNo = value;
                    Notify("ExContractNo");
                }
            }
        }

        public string ContractNo
        {
            get { return _contractNo; }
            set
            {
                if (_contractNo != value)
                {
                    _contractNo = value;
                    Notify("ContractNo");
                }
            }
        }

        public DateTime? SignDate
        {
            get { return _signDate; }
            set
            {
                if (_signDate != value)
                {
                    _signDate = value;
                    Notify("SignDate");
                }
            }
        }

        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    Notify("Description");
                }
            }
        }

        public List<BusinessPartner> InternalCustomers
        {
            get { return _internalCustomers; }
            set
            {
                if (_internalCustomers != value)
                {
                    _internalCustomers = value;
                    Notify("InternalCustomers");
                }
            }
        }

        public int SelectedInternalCustomerId
        {
            get { return _selectedInternalCustomerId; }
            set
            {
                if (_selectedInternalCustomerId != value)
                {
                    _selectedInternalCustomerId = value;
                    Notify("SelectedInternalCustomerId");
                }
            }
        }

        public int? SelectedUsdId
        {
            get { return _selectedUsdId; }
            set
            {
                if (_selectedUsdId != value)
                {
                    _selectedUsdId = value;
                    Notify("SelectedUsdId");
                }
            }
        }
        

        #region 控件enable属性

        private bool _isSignBPEnable;
        private bool _isBPEnable;
        private bool _isSaveAsDraftEnable;

        public bool IsSignBPEnable
        {
            get { return _isSignBPEnable; }
            set
            {
                if (_isSignBPEnable != value)
                {
                    _isSignBPEnable = value;
                    Notify("IsSignBPEnable");
                }
            }
        }

        public bool IsBPEnable
        {
            get { return _isBPEnable; }
            set
            {
                if (_isBPEnable != value)
                {
                    _isBPEnable = value;
                    Notify("IsBPEnable");
                }
            }
        }

        public bool IsSaveAsDraftEnable
        {
            get { return _isSaveAsDraftEnable; }
            set
            {
                if (_isSaveAsDraftEnable != value)
                {
                    _isSaveAsDraftEnable = value;
                    Notify("IsSaveAsDraftEnable");
                }
            }
        }

        #endregion
        #endregion

        #region Constructor

        public LongContractDetailVM(TradeType tradeType, ContractType contractType)
        {
            ObjectId = 0;
            TradeType = tradeType;
            ContractType = contractType;
            if (tradeType == DBEntity.EnumEntity.TradeType.ShortForeignTrade || tradeType == DBEntity.EnumEntity.TradeType.LongForeignTrade)
            {
                IsAutoNoVisible = "Visible";
                IsNeedAutoVisible = "Visible";
            }
            else
            {
                _IsNeedAutoGenerated = false;
                IsAutoNoVisible = "Collapsed";
                IsNeedAutoVisible = "Collapsed";
            }
            Initialize();
        }

        public LongContractDetailVM(TradeType tradeType, ContractType contractType, int id)
        {
            ObjectId = id;
            TradeType = tradeType;
            ContractType = contractType;
            if (ObjectId > 0)
            {
                IsNeedAutoVisible = "Collapsed";
            }
            if (tradeType == DBEntity.EnumEntity.TradeType.ShortForeignTrade || tradeType == DBEntity.EnumEntity.TradeType.LongForeignTrade)
            {
                IsAutoNoVisible = "Visible";
            }
            else
            {
                IsAutoNoVisible = "Collapsed";
            }
            Initialize();
        }

        #endregion

        #region Method

        /// <summary>
        /// 选择币种获得付款账号
        /// </summary>
        public void LoadPayBankAccounts()
        {
            if (SelectedInternalCustomerId > 0)
            {
                using (
                    var bankaccountTypeService =
                        SvcClientManager.GetSvcClient<BankAccountServiceClient>(SvcType.BankAccountSvc))
                {
                    //BankAccount defaultBankAccount = bankaccountTypeService.GetDefaultBankAccountByBusinessPartnerId(CurrentUser.Id, SelectedInternalCustomerId, null);

                    PayBankAccounts = bankaccountTypeService.GetBankAccountsByPaymentMean(null,
                                                                                          Convert.ToInt32(SelectedInternalCustomerId));
                    PayBankAccounts.Insert(0, new BankAccount { Id = 0, Description = "" });

                    //if (defaultBankAccount != null)
                    //{
                    //    bool flag = false;
                    //    foreach (var payBankAccount in PayBankAccounts)
                    //    {
                    //        if (payBankAccount.Id == defaultBankAccount.Id)
                    //        {
                    //            flag = true;
                    //            break;
                    //        }
                    //    }
                    //    if (!flag)
                    //    {
                    //        PayBankAccounts.Insert(1, defaultBankAccount);
                    //    }
                    //    if (ObjectId <= 0)
                    //    {
                    //        PayBankAccountId = defaultBankAccount.Id;
                    //    }

                    //}
                }
            }
            else
            {
                PayBankAccounts = new List<BankAccount>();
            }
        }

        private void Initialize()
        {
            LoadDocumentEnableProperty();

            using (var bpService = SvcClientManager.GetSvcClient<BusinessPartnerServiceClient>(SvcType.BusinessPartnerSvc))
            {
                _internalCustomers = bpService.GetInternalCustomersByUser(CurrentUser.Id);
                _internalCustomers.Insert(0, new BusinessPartner { Id = 0, ShortName = string.Empty });
            }

            using (
              var contractUDFService =
                   SvcClientManager.GetSvcClient<ContractUDFServiceReference.ContractUDFServiceClient>(SvcType.ContractUDFSvc))
            {
                _udfs = contractUDFService.GetAll();
                if(_udfs != null && _udfs.Count > 0)
                {
                    List<ContractUDF> defualtList = _udfs.Where(c => c.IsDefault && !c.IsDeleted).ToList();
                    if(defualtList != null && defualtList.Count > 0)
                    {
                        ContractUDF defualtUDF = defualtList.FirstOrDefault();
                        SelectedUsdId = defualtUDF.Id;
                    }
                }
                _udfs.Insert(0, new ContractUDF { Id = 0, Name = string.Empty });
            }

            using (var userService = SvcClientManager.GetSvcClient<UserServiceClient>(SvcType.UserSvc))
            {
                _Users = userService.GetIsSalesUsers(CurrentUser.Id);
                _Users.Insert(0, new User { Id = 0, Name = string.Empty });
            }

            if(ObjectId > 0)
            {
                LoadContract();
                LoadAttachments();
            }
        }

        /// <summary>
        /// 根据Id获取合同，并筛选没有作废的批次
        /// </summary>
        private void LoadContract()
        {
            using (
                var contractService =
                    SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
            {
                const string str = "it.Id = @p1 ";
                var parameters = new List<object> {ObjectId};
                List<Contract> contracts = contractService.Select(str, parameters,
                                                                  new List<string>
                                                                      {
                                                                          "Quotas",
                                                                          "BusinessPartner",
                                                                          "InternalCustomer",
                                                                          "Quotas.Warehouse",
                                                                          "Quotas.Commodity",
                                                                          "Quotas.CommodityType",
                                                                          "Quotas.Brand",
                                                                          "Quotas.Specification",
                                                                          "Quotas.Pricings",
                                                                          "ContractUDF"
                                                                      });
                if (contracts.Count > 0)
                {
                    Contract contract = contracts[0];
                    FilterDeleted(contract.Quotas);
                    //筛选没有作废的批次
                    if (contract.Quotas.Count > 0)
                    {
                        Quotas = contract.Quotas.ToList().FindAll(o => o.IsDeleted == false).OrderByDescending(c => c.Id).ToList();
                        if (Quotas.Count == 0)
                        {
                            Quotas = null;
                        }
                        else
                        {
                            foreach (Quota q in Quotas)
                            {
                                FilterDeleted(q.Pricings);
                                if (q.PricingType == (int) PricingType.Fixed)
                                {
                                    Pricing pricing = q.Pricings.FirstOrDefault();
                                    if (pricing != null)
                                    {
                                        q.Price = pricing.FinalPrice ?? 0;
                                        q.StrPrice = q.Price.ToString(RoundRules.STR_PRICE);
                                        if (TradeType == TradeType.LongDomesticTrade)
                                        {
                                            q.SettlementRate = pricing.ExchangeRate;
                                        }
                                    }
                                }
                                else
                                {
                                    if(TradeType == DBEntity.EnumEntity.TradeType.LongForeignTrade || TradeType == DBEntity.EnumEntity.TradeType.ShortForeignTrade)
                                    {
                                        if (q.PricingType == (int)PricingType.Manual)
                                        {
                                            q.StrPrice = Properties.Resources.Detail;
                                        }
                                        else if (q.PricingType == (int)PricingType.Average)
                                        {
                                            //平均价点价
                                            var firstOrDefault = q.Pricings.FirstOrDefault();
                                            if (firstOrDefault != null)
                                            {
                                                q.Price = firstOrDefault.FinalPrice ?? 0;
                                                q.StrPrice = q.Price.ToString(RoundRules.STR_PRICE);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        q.StrPrice = (q.TempPrice ?? 0).ToString(RoundRules.STR_PRICE);
                                        q.Price = q.TempPrice ?? 0;
                                    }
                                }
                                //else if (q.PricingType == (int)PricingType.Average)
                                //{
                                //    //平均价点价
                                //    var firstOrDefault = q.Pricings.FirstOrDefault();
                                //    if (firstOrDefault != null)
                                //    {
                                //        q.Price = firstOrDefault.FinalPrice ?? 0;
                                //        q.StrPrice = q.Price.ToString(RoundRules.STR_PRICE);
                                //    }
                                //}
                            }
                        }

                        Quota quota = contract.Quotas.FirstOrDefault();
                        if (quota.RelQuotaId.HasValue)
                        {
                            using (var quotaService = SvcClientManager.GetSvcClient<QuotaServiceClient>(SvcType.QuotaSvc))
                            {
                                string queryStr = "it.Id = @p1";
                                var relParameters = new List<object> { quota.RelQuotaId.Value };
                                Quota relQuota = quotaService.Select(queryStr, relParameters, new List<string> { "Contract" }).FirstOrDefault();

                                if (relQuota != null)
                                {
                                    AutoContractNo = relQuota.Contract.ContractNo;
                                }
                            }
                        }
                    }

                    ContractNo = contract.ContractNo;
                    ExContractNo = contract.ExContractNo;
                    SupplierId = contract.BPId;
                    SupplierName = contract.BusinessPartner.ShortName;
                    SignDate = contract.SignDate;
                    QtyLimit = contract.QtyLimit;
                    SelectedInternalCustomerId = contract.InternalCustomerId ?? 0;
                    Description = contract.Description;
                    SelectedUsdId=contract.UDFId;
                    PayBankAccountId = contract.BankAccountId;
                    SelectedUserId = contract.Sales ?? 0;
                    IsNeedAutoGenerated = contract.IsNeedAutoGenerated == null ? false : contract.IsNeedAutoGenerated.Value;
                    if (contract.Sales.HasValue)
                    {
                        if (!_Users.Select(c => c.Id).Contains(contract.Sales.Value))
                        {
                            using (var userService = SvcClientManager.GetSvcClient<UserServiceClient>(SvcType.UserSvc))
                            {
                                User user = userService.GetById(contract.Sales.Value);
                                _Users.Add(user);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 新增
        /// </summary>
        protected override void Create()
        {
            using (
                var contractService =
                    SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
            {
                int? a = QtyLimit == null ? 0 : Convert.ToInt32(QtyLimit);
                var contract = new Contract
                    {
                        ContractNo = ContractNo,
                        ExContractNo=ExContractNo,
                        BPId = SupplierId ?? 0,
                        SignDate = SignDate,
                        InternalCustomerId = SelectedInternalCustomerId,
                        TradeType = (int) TradeType,
                        ContractType = (int) ContractType,
                        Description = Description,
                        IsDraft = IsSaveAsDraft,
                        QtyLimit = a == 0 ? null : a,
                        AutoContractNo = AutoContractNo,
                        UDFId = (SelectedUsdId == 0 ? null : SelectedUsdId),
                        IsNeedAutoGenerated = IsNeedAutoGenerated,
                        BankAccountId = PayBankAccountId == 0 ? null : PayBankAccountId,
                        Sales = (SelectedUserId == 0 ? null : SelectedUserId)
                    };
                SetVAT();

                contractService.CreateDocument(CurrentUser.Id, contract, AddQuotas, AddAttachments,null,null);
            }
        }
        /// <summary>
        /// 修改
        /// </summary>
        protected override void Update()
        {
            using (
                var contractService =
                    SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
            {
                int? a = QtyLimit == null ? 0 : Convert.ToInt32(QtyLimit);
                var contract = new Contract
                    {
                        Id = ObjectId,
                        ContractNo = ContractNo,
                        ExContractNo=ExContractNo,
                        BPId = SupplierId ?? 0,
                        SignDate = SignDate,
                        InternalCustomerId = SelectedInternalCustomerId,
                        TradeType = (int) TradeType,
                        ContractType = (int) ContractType,
                        Description = Description,
                        IsDraft = IsSaveAsDraft,
                        QtyLimit = a == 0 ? null : a,
                        AutoContractNo = AutoContractNo,
                        UDFId = (SelectedUsdId == 0 ? null : SelectedUsdId),
                        IsNeedAutoGenerated = IsNeedAutoGenerated,
                        BankAccountId = PayBankAccountId == 0 ? null : PayBankAccountId,
                        Sales = (SelectedUserId == 0 ? null : SelectedUserId)
                    };
                contractService.UpdateDocument(CurrentUser.Id, contract, AddQuotas, UpdateQuotas, DeleteQuotas,
                                               AddAttachments, DeleteAttachments,null,null);
            }
        }

        /// <summary>
        /// 设置开票状态为未开票
        /// </summary>
        private void SetVAT()
        {
            if(TradeType==TradeType.LongDomesticTrade)
            {
                if (AddQuotas != null && AddQuotas.Count > 0)
                {
                    foreach (Quota addQuota in AddQuotas)
                    {
                        addQuota.VATStatus = (int)QuotaVATStatus.NotAtAll;
                    }
                }
            }
        }

        public override bool Validate()
        {

            //if(ContractType == DBEntity.EnumEntity.ContractType.Sales && (TradeType == DBEntity.EnumEntity.TradeType.LongDomesticTrade || TradeType == DBEntity.EnumEntity.TradeType.ShortDomesticTrade))
            //{
            //    if(PayBankAccountId == null || PayBankAccountId <= 0)
            //    {
            //        System.Windows.Forms.DialogResult dr = System.Windows.Forms.MessageBox.Show("确定要退出吗?", "", System.Windows.Forms.MessageBoxButtons.OKCancel);
            //        if(dr == System.Windows.Forms.DialogResult.Cancel)
            //        {
            //            return false;
            //        }
            //    }
            //}

            if (QtyLimit.HasValue)
            {
                Regex reg = new Regex("^-?\\d+$");
                if (!reg.IsMatch(QtyLimit.Value.ToString()))
                {
                    throw new Exception("数量上下浮请输入整数");
                }
            }

            if (Quotas == null || Quotas.Count == 0)
            {
                throw new Exception(ResContract.QuotaInfoRequired);
            }
            if (!SupplierId.HasValue)
            {
                throw new Exception(ResContract.SupplierRequired);
            }
            if (SelectedInternalCustomerId == 0)
            {
                throw new Exception(Properties.Resources.SignSideRequired);
            }
            if (SupplierId.Value == SelectedInternalCustomerId)
            {
                if (ContractType == DBEntity.EnumEntity.ContractType.Purchase)
                {
                    throw new Exception("供应商和签署方不能相同");
                }
                else
                {
                    throw new Exception("采购商和签署方不能相同");
                }
            }
            if (!SignDate.HasValue)
            {
                throw new Exception(ResContract.SignDateRequired);
            }
            if (!string.IsNullOrEmpty(ContractNo))
            {
                using (var contractService = SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
                {
                    string queryStr = "it.ContractNo = @p1";
                    var parameters = new List<object> { ContractNo };
                    List<Contract> contractList = contractService.Select(queryStr, parameters, new List<string> { "Quotas"});

                    List<Contract> resultContractList = new List<Contract>();
                    foreach (Contract contract in contractList)
                    {
                        if (!contract.Quotas.FirstOrDefault().IsAutoGenerated)
                        {
                            resultContractList.Add(contract);
                        }
                    }

                    if (resultContractList != null && resultContractList.Count > 0)
                    {
                        if (ObjectId <= 0)
                        {
                            //if (System.Windows.MessageBox.Show("系统中已经存在相同合同号的数据，是否继续保存？", "提示", MessageBoxButton.OKCancel) == MessageBoxResult.Cancel)
                            //{
                            //    return false;
                            //}
                            throw new Exception("系统中已经存在相同合同号的数据");
                        }
                        else
                        {
                            if (resultContractList.Select(c => c.Id).Contains(ObjectId))
                            {
                                if (resultContractList.Count > 1)
                                {
                                    //if (System.Windows.MessageBox.Show("系统中已经存在相同合同号的数据，是否继续保存？", "提示", MessageBoxButton.OKCancel) == MessageBoxResult.Cancel)
                                    //{
                                    //    return false;
                                    //}
                                    throw new Exception("系统中已经存在相同合同号的数据");
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }

        public bool ValidateContractNo()
        {
            if (!string.IsNullOrEmpty(ContractNo))
            {
                using (var contractService = SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
                {
                    string queryStr = "it.ContractNo = @p1";
                    var parameters = new List<object> { ContractNo };
                    List<Contract> contractList = contractService.Select(queryStr, parameters, null);
                    if (contractList != null && contractList.Count > 0)
                    {
                        if (ObjectId <= 0)
                        {
                            if (System.Windows.MessageBox.Show("系统中已经存在相同合同号的数据，是否继续保存？", "提示", MessageBoxButton.OKCancel) == MessageBoxResult.Cancel)
                            {
                                return false;
                            }
                        }
                        else
                        {
                            if (contractList.Select(c => c.Id).Contains(ObjectId))
                            {
                                if (contractList.Count > 1)
                                {
                                    if (System.Windows.MessageBox.Show("系统中已经存在相同合同号的数据，是否继续保存？", "提示", MessageBoxButton.OKCancel) == MessageBoxResult.Cancel)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }

        #region 维护批次列表

        /// <summary>
        /// 新增批次
        /// </summary>
        /// <param name="quota"></param>
        public void AddQuota(Quota quota)
        {
            if (Quotas == null)
                Quotas = new List<Quota>();
            int no = GetQuotaNo();
            quota.Id = -no;
            Quotas.Add(quota);
            if (AddQuotas == null)
            {
                AddQuotas = new List<Quota>();
            }
            AddQuotas.Add(quota);
        }

        /// <summary>
        /// 修改批次
        /// </summary>
        /// <param name="id"></param>
        public void UpdateQuota(int id)
        {
            Quota quota = GetQuotaById(id, Quotas);
            if (quota != null)
            {
                Quota addQuota = GetQuotaById(id, AddQuotas);
                if (addQuota == null)
                {
                    if (UpdateQuotas == null)
                    {
                        UpdateQuotas = new List<Quota> {quota};
                    }
                }
            }
        }

        /// <summary>
        /// 删除批次
        /// </summary>
        /// <param name="id"></param>
        public void DeleteQuota(int id)
        {
            Quota quota = GetQuotaById(id, Quotas);
            if (quota != null)
            {
                Quotas.Remove(quota);
                Quota addQuota = GetQuotaById(id, AddQuotas);
                if (addQuota != null)
                {
                    AddQuotas.Remove(addQuota);
                }
                else
                {
                    Quota updateQuota = GetQuotaById(id, UpdateQuotas);
                    if (updateQuota != null)
                    {
                        UpdateQuotas.Remove(updateQuota);
                    }
                    if (DeleteQuotas == null)
                    {
                        DeleteQuotas = new List<Quota>();
                    }
                    DeleteQuotas.Add(quota);
                }
            }
        }

        #endregion

        /// <summary>
        /// 自动生成新增的批次Id
        /// </summary>
        /// <returns></returns>
        private int GetQuotaNo()
        {
            if (Quotas.Count == 0)
                return 1;
            IEnumerable<int> query = from quota in Quotas select Math.Abs(quota.Id);
            int no = query.Max();
            return no + 1;
        }

        /// <summary>
        /// 根据Id查找批次
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Quota GetQuotaById(int id)
        {
            IEnumerable<Quota> query = from quota in Quotas where quota.Id == id select quota;
            List<Quota> q = query.ToList();
            if (q.Count > 0)
            {
                return q[0];
            }
            return null;
        }

        #region 维护附件列表

        /// <summary>
        /// 加载附件
        /// </summary>
        public void LoadAttachments()
        {
            //int id=GetDocumentId("Contract");
            const int documentType = (int)DocumentType.Contract;
            if (ObjectId <= 0)
            {
                Attachments.Clear();
            }
            else
            {
                using (
                    var attachmentService =
                        SvcClientManager.GetSvcClient<AttachmentServiceClient>(SvcType.AttachmentSvc))
                {
                    const string queryStr = "it.RecordId = @p1 and it.DocumentId= @p2";
                    var parameters = new List<object> { ObjectId, documentType };
                    _attachments = attachmentService.Query(queryStr, parameters);
                    Attachments= attachmentService.ChangeAttachmentName(_attachments);
                }
            }
        }

        private int GetDocumentId(string code)
        {
            int id;
            using (var documentService = SvcClientManager.GetSvcClient<DocumentServiceClient>(SvcType.DocumentSvc))
            {
                id = documentService.GetByTableCode(code).Id;
            }
            return id;
        }

        /// <summary>
        /// 新增附件
        /// </summary>
        /// <param name="attachment"></param>
        public void AddAttachment(Attachment attachment)
        {
            int did = GetDocumentId("Contract");
            if (Attachments == null)
                Attachments = new List<Attachment>();
            if (AddAttachments == null)
                AddAttachments = new List<Attachment>();
            attachment.DocumentId = did;
            int id = -GetMaxNum();
            attachment.Id = id;
            _attachments.Add(attachment);
            using (
                    var attachmentService = SvcClientManager.GetSvcClient<AttachmentServiceClient>(SvcType.AttachmentSvc)
                    )
            {
                Attachments= attachmentService.ChangeAttachmentName(_attachments);
            }
            AddAttachments.Add(attachment);
        }

        private int GetMaxNum()
        {
            if (Attachments != null && Attachments.Count > 0)
            {
                IEnumerable<int> query = from attachment in Attachments select Math.Abs(attachment.Id);
                int num = query.Max() + 1;
                return num;
            }

            return 1;
        }

        /// <summary>
        /// 删除附件
        /// </summary>
        /// <param name="deleteId"></param>
        public void RemoveAttachment(int deleteId)
        {
            Attachment attachment = GetAttachmentById(deleteId, Attachments);
            if (attachment != null)
            {
                Attachments.Remove(attachment);
                if (Attachments.Count == 0)
                    Attachments = null;
            }

            Attachment addattachment = GetAttachmentById(deleteId, AddAttachments);
            {
                if (addattachment != null)
                {
                    //如果是新增的附件
                    AddAttachments.Remove(addattachment);
                    if (AddAttachments.Count == 0)
                        AddAttachments = null;
                }
                else
                {
                    //增加到删除列表里
                    if (DeleteAttachments == null)
                    {
                        DeleteAttachments = new List<Attachment>();
                    }
                    DeleteAttachments.Add(attachment);
                }
            }
        }

        #endregion

        /// <summary>
        /// 根据id获取附件
        /// </summary>
        /// <param name="id"></param>
        /// <param name="atts"> </param>
        /// <returns></returns>
        public Attachment GetAttachmentById(int id, List<Attachment> atts)
        {
            if (atts != null)
            {
                return atts.FirstOrDefault(attachment => attachment.Id == id);
            }

            return null;
        }

        public Quota GetQuotaById(int id, List<Quota> quotas)
        {
            if (quotas != null)
            {
                return quotas.FirstOrDefault(quota => quota.Id == id);
            }

            return null;
        }

        public bool QuotaCanEditWithApproveStatus(int id)
        {

            using (var quotaService = SvcClientManager.GetSvcClient<QuotaServiceClient>(SvcType.QuotaSvc))
            {
                var quota = quotaService.GetById(id);
                if (quota.ApproveStatus == (int)ApproveStatus.InApprove || quota.ApproveStatus == (int)ApproveStatus.Approved)
                {
                    return false;
                }

                return true;
            }
        }

        

        #region 加载合同批次页面的控件的enable属性

        private void LoadDocumentEnableProperty()
        {
            if (ObjectId <= 0)
            {
                IsBPEnable = true;
                IsSignBPEnable = true;
                IsSaveAsDraftEnable = true;
            }
            else
            {
                using (var contractService =
                    SvcClientManager.GetSvcClient<ContractServiceClient>(SvcType.ContractSvc))
                {
                    ContractEnableProperty cep = contractService.SetElementsEnableProperty(ObjectId);

                    IsBPEnable = cep.IsBPEnable;
                    IsSignBPEnable = cep.IsSignBPEnable;
                }

                IsSaveAsDraftEnable = false;
            }
        }

        #endregion

        #endregion

        /// <summary>
        /// 如果是关联交易，没有填写对手盘合同号给出提示
        /// </summary>
        /// <returns></returns>
        public bool IsPopupContraryDocumentNoEmptyInfo()
        {
            if (TradeType == TradeType.LongDomesticTrade || TradeType == TradeType.ShortDomesticTrade)
                return false;
            using (var busService = SvcClientManager.GetSvcClient<BusinessPartnerServiceClient>(SvcType.BusinessPartnerSvc))
            {
                BusinessPartner bp = busService.SelectById(null, SupplierId ?? 0);
                if (bp != null && bp.CustomerType == (int)BusinessPartnerType.InternalCustomer)
                {
                    if (string.IsNullOrEmpty(AutoContractNo))
                    {
                        return true;
                    }
                }
                return false;
            }
        }
    }
}